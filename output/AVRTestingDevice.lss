
output/AVRTestingDevice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001716  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00001716  000017aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000057  008000a6  008000a6  000017f0  2**0
                  ALLOC
  3 .stab         00000d98  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000258  00000000  00000000  00002588  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000170  00000000  00000000  000027e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000386  00000000  00000000  00002950  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f41  00000000  00000000  00002cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c9a  00000000  00000000  00004c17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000018f8  00000000  00000000  000058b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000071ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007e7  00000000  00000000  0000736c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c48  00000000  00000000  00007b53  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001d0  00000000  00000000  0000879b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}



void    usbEventResetReady(void)
{
       0:	1e c1       	rjmp	.+572    	; 0x23e <__ctors_end>
       2:	65 c1       	rjmp	.+714    	; 0x2ce <__vector_1>
       4:	37 c1       	rjmp	.+622    	; 0x274 <__bad_interrupt>
       6:	36 c1       	rjmp	.+620    	; 0x274 <__bad_interrupt>
       8:	35 c1       	rjmp	.+618    	; 0x274 <__bad_interrupt>
       a:	34 c1       	rjmp	.+616    	; 0x274 <__bad_interrupt>
       c:	33 c1       	rjmp	.+614    	; 0x274 <__bad_interrupt>
       e:	32 c1       	rjmp	.+612    	; 0x274 <__bad_interrupt>
      10:	31 c1       	rjmp	.+610    	; 0x274 <__bad_interrupt>
      12:	30 c1       	rjmp	.+608    	; 0x274 <__bad_interrupt>
      14:	2f c1       	rjmp	.+606    	; 0x274 <__bad_interrupt>
      16:	2e c1       	rjmp	.+604    	; 0x274 <__bad_interrupt>
      18:	2d c1       	rjmp	.+602    	; 0x274 <__bad_interrupt>
      1a:	2c c1       	rjmp	.+600    	; 0x274 <__bad_interrupt>
      1c:	2b c1       	rjmp	.+598    	; 0x274 <__bad_interrupt>
      1e:	6e c4       	rjmp	.+2268   	; 0x8fc <main+0x132>
      20:	74 c4       	rjmp	.+2280   	; 0x90a <main+0x140>
      22:	76 c4       	rjmp	.+2284   	; 0x910 <main+0x146>
      24:	8b c4       	rjmp	.+2326   	; 0x93c <main+0x172>
      26:	91 c4       	rjmp	.+2338   	; 0x94a <main+0x180>
      28:	98 c4       	rjmp	.+2352   	; 0x95a <main+0x190>
      2a:	9b c4       	rjmp	.+2358   	; 0x962 <main+0x198>
      2c:	a0 c4       	rjmp	.+2368   	; 0x96e <main+0x1a4>

0000002e <usbDescriptorHidReport>:
      2e:	05 01 09 06 a1 01 85 01 05 07 19 e0 29 e7 15 00     ............)...
      3e:	25 01 75 01 95 08 81 02 95 01 75 08 81 03 95 03     %.u.......u.....
      4e:	75 08 15 00 25 65 05 07 19 00 29 65 81 00 95 05     u...%e....)e....
      5e:	75 01 05 08 19 01 29 05 91 02 95 01 75 03 91 03     u.....).....u...
      6e:	c0 05 01 09 02 a1 01 09 01 a1 00 85 02 05 09 19     ................
      7e:	01 29 03 15 00 25 01 95 03 75 01 81 02 95 01 75     .)...%...u.....u
      8e:	05 81 03 05 01 09 30 09 31 09 38 15 81 25 7f 75     ......0.1.8..%.u
      9e:	08 95 03 81 06 c0 c0                                .......

000000a5 <__c.2048>:
      a5:	42 69 74 42 61 6e 67 20 4d 6f 64 65 20 4f 6e 00     BitBang Mode On.

000000b5 <__c.2045>:
      b5:	41 44 43 20 4d 65 61 74 65 72 20 4d 6f 64 65 20     ADC Meater Mode 
      c5:	6f 66 66 00                                         off.

000000c9 <__c.2042>:
      c9:	41 44 43 20 4d 65 61 74 65 72 20 4d 6f 64 65 20     ADC Meater Mode 
      d9:	6f 6e 00                                            on.

000000dc <__c.2039>:
      dc:	4d 6f 75 73 65 20 6d 6f 76 65 20 78 3d 2d 35 30     Mouse move x=-50
      ec:	20 79 3d 32 30 20 73 70 65 65 64 20 35 00            y=20 speed 5.

000000fa <__c.2036>:
      fa:	4d 6f 75 73 65 20 6d 6f 76 65 20 78 3d 35 30 20     Mouse move x=50 
     10a:	79 3d 30 20 73 70 65 65 64 20 31 30 00              y=0 speed 10.

00000117 <__c.2033>:
     117:	2b 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     +---------------
     127:	2d 2d 2d 2d 2d 2b 00                                -----+.

0000012e <__c.2031>:
     12e:	7c 20 20 28 32 29 20 55 53 42 20 4d 6f 75 73 65     |  (2) USB Mouse
     13e:	20 20 20 20 20 7c 00                                     |.

00000145 <__c.2029>:
     145:	7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     |---------------
     155:	2d 2d 2d 2d 2d 7c 00                                -----|.

0000015c <__c.2027>:
     15c:	7c 20 20 28 31 29 20 55 53 42 20 4b 65 79 62 6f     |  (1) USB Keybo
     16c:	61 64 20 20 20 7c 00                                ad   |.

00000173 <__c.2025>:
     173:	7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     |---------------
     183:	2d 2d 2d 2d 2d 7c 00                                -----|.

0000018a <__c.2023>:
     18a:	7c 20 55 53 42 20 54 65 73 74 69 6e 67 20 44 65     | USB Testing De
     19a:	76 69 63 65 20 7c 00                                vice |.

000001a1 <__c.2021>:
     1a1:	2b 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     +---------------
     1b1:	2d 2d 2d 2d 2d 2b 00                                -----+.

000001b8 <__c.2018>:
     1b8:	6e 6f 74 65 70 61 64 2e 65 78 65 00                 notepad.exe.

000001c4 <usbDescriptorString0>:
     1c4:	04 03 09 04                                         ....

000001c8 <usbDescriptorStringVendor>:
     1c8:	1c 03 77 00 77 00 77 00 2e 00 54 00 2d 00 34 00     ..w.w.w...T.-.4.
     1d8:	32 00 64 00 2e 00 63 00 6f 00 6d 00                 2.d...c.o.m.

000001e4 <usbDescriptorStringDevice>:
     1e4:	26 03 55 00 53 00 42 00 20 00 54 00 65 00 73 00     &.U.S.B. .T.e.s.
     1f4:	74 00 69 00 6e 00 67 00 20 00 44 00 65 00 76 00     t.i.n.g. .D.e.v.
     204:	69 00 63 00 65 00                                   i.c.e.

0000020a <usbDescriptorDevice>:
     20a:	12 01 10 01 00 00 00 08 4f 1b 02 00 00 01 01 02     ........O.......
     21a:	00 01                                               ..

0000021c <usbDescriptorConfiguration>:
     21c:	09 02 22 00 01 01 00 80 64 09 04 00 00 01 03 00     ..".....d.......
     22c:	00 00 09 21 01 01 00 01 22 77 00 07 05 81 03 08     ...!...."w......
     23c:	00 0a                                               ..

0000023e <__ctors_end>:
     23e:	11 24       	eor	r1, r1
     240:	1f be       	out	0x3f, r1	; 63
     242:	cf e5       	ldi	r28, 0x5F	; 95
     244:	d2 e0       	ldi	r29, 0x02	; 2
     246:	de bf       	out	0x3e, r29	; 62
     248:	cd bf       	out	0x3d, r28	; 61

0000024a <__do_copy_data>:
     24a:	10 e0       	ldi	r17, 0x00	; 0
     24c:	a0 e6       	ldi	r26, 0x60	; 96
     24e:	b0 e0       	ldi	r27, 0x00	; 0
     250:	e6 e1       	ldi	r30, 0x16	; 22
     252:	f7 e1       	ldi	r31, 0x17	; 23
     254:	02 c0       	rjmp	.+4      	; 0x25a <.do_copy_data_start>

00000256 <.do_copy_data_loop>:
     256:	05 90       	lpm	r0, Z+
     258:	0d 92       	st	X+, r0

0000025a <.do_copy_data_start>:
     25a:	a6 3a       	cpi	r26, 0xA6	; 166
     25c:	b1 07       	cpc	r27, r17
     25e:	d9 f7       	brne	.-10     	; 0x256 <.do_copy_data_loop>

00000260 <__do_clear_bss>:
     260:	10 e0       	ldi	r17, 0x00	; 0
     262:	a6 ea       	ldi	r26, 0xA6	; 166
     264:	b0 e0       	ldi	r27, 0x00	; 0
     266:	01 c0       	rjmp	.+2      	; 0x26a <.do_clear_bss_start>

00000268 <.do_clear_bss_loop>:
     268:	1d 92       	st	X+, r1

0000026a <.do_clear_bss_start>:
     26a:	ad 3f       	cpi	r26, 0xFD	; 253
     26c:	b1 07       	cpc	r27, r17
     26e:	e1 f7       	brne	.-8      	; 0x268 <.do_clear_bss_loop>
     270:	ac d2       	rcall	.+1368   	; 0x7ca <main>
     272:	1b c7       	rjmp	.+3638   	; 0x10aa <exit>

00000274 <__bad_interrupt>:
     274:	c5 ce       	rjmp	.-630    	; 0x0 <__vectors>

00000276 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     276:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     278:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
     27a:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
     27c:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
     27e:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
     280:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
     282:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
     284:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
     286:	09 c0       	rjmp	.+18     	; 0x29a <usbCrcLoopEntry>

00000288 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
     288:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
     28a:	82 27       	eor	r24, r18

0000028c <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
     28c:	97 95       	ror	r25
    ror     resCrcL
     28e:	87 95       	ror	r24
    brcs    usbCrcNoXor
     290:	10 f0       	brcs	.+4      	; 0x296 <usbCrcNoXor>
    eor     resCrcL, polyL
     292:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
     294:	95 27       	eor	r25, r21

00000296 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
     296:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
     298:	c8 f3       	brcs	.-14     	; 0x28c <usbCrcBitLoop>

0000029a <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
     29a:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
     29c:	a8 f3       	brcs	.-22     	; 0x288 <usbCrcByteLoop>

0000029e <usbCrcReady>:
usbCrcReady:
    ret
     29e:	08 95       	ret

000002a0 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     2a0:	ea df       	rcall	.-44     	; 0x276 <usbCrc16>
    st      ptr+, resCrcL
     2a2:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     2a4:	9d 93       	st	X+, r25
    ret
     2a6:	08 95       	ret

000002a8 <usbMeasureFrameLength>:

; extern unsigned usbMeasurePacketLength(void);
; returns time between two idle strobes in multiples of 7 CPU clocks
.global usbMeasureFrameLength
usbMeasureFrameLength:
    ldi     cntH, 6         ; wait ~ 10 ms for D- == 0
     2a8:	a6 e0       	ldi	r26, 0x06	; 6
    clr     cnt16L
     2aa:	88 27       	eor	r24, r24
    clr     cnt16H
     2ac:	99 27       	eor	r25, r25

000002ae <usbMFTime16>:
usbMFTime16:
    dec     cntH
     2ae:	aa 95       	dec	r26
    breq    usbMFTimeout
     2b0:	69 f0       	breq	.+26     	; 0x2cc <usbMFTimeout>

000002b2 <usbMFWaitStrobe>:
usbMFWaitStrobe:            ; first wait for D- == 0 (idle strobe)
    sbiw    cnt16, 1        ;[0] [6]
     2b2:	01 97       	sbiw	r24, 0x01	; 1
    breq    usbMFTime16     ;[2]
     2b4:	e1 f3       	breq	.-8      	; 0x2ae <usbMFTime16>
    sbic    USBIN, USBMINUS ;[3]
     2b6:	b0 99       	sbic	0x16, 0	; 22
    rjmp    usbMFWaitStrobe ;[4]
     2b8:	fc cf       	rjmp	.-8      	; 0x2b2 <usbMFWaitStrobe>

000002ba <usbMFWaitIdle>:
usbMFWaitIdle:              ; then wait until idle again
    sbis    USBIN, USBMINUS ;1 wait for D- == 1
     2ba:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    usbMFWaitIdle   ;2
     2bc:	fe cf       	rjmp	.-4      	; 0x2ba <usbMFWaitIdle>
    ldi     cnt16L, 1       ;1 represents cycles so far
     2be:	81 e0       	ldi	r24, 0x01	; 1
    clr     cnt16H          ;1
     2c0:	99 27       	eor	r25, r25

000002c2 <usbMFWaitLoop>:
usbMFWaitLoop:
    in      cntH, USBIN     ;[0] [7]
     2c2:	a6 b3       	in	r26, 0x16	; 22
    adiw    cnt16, 1        ;[1]
     2c4:	01 96       	adiw	r24, 0x01	; 1
    breq    usbMFTimeout    ;[3]
     2c6:	11 f0       	breq	.+4      	; 0x2cc <usbMFTimeout>
    andi    cntH, USBMASK   ;[4]
     2c8:	a5 70       	andi	r26, 0x05	; 5
    brne    usbMFWaitLoop   ;[5]
     2ca:	d9 f7       	brne	.-10     	; 0x2c2 <usbMFWaitLoop>

000002cc <usbMFTimeout>:
usbMFTimeout:
#if resL != cnt16L
    mov     resL, cnt16L
    mov     resH, cnt16H
#endif
    ret
     2cc:	08 95       	ret

000002ce <__vector_1>:
; when instruction starts


USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], r0, YH, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-23] push only what is necessary to sync with edge ASAP
     2ce:	cf 93       	push	r28
    in      YL, SREG            ;[-21]
     2d0:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-20]
     2d2:	cf 93       	push	r28

000002d4 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     2d4:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
     2d6:	b0 9b       	sbis	0x16, 0	; 22
    brne    waitForJ        ; just make sure we have ANY timeout
     2d8:	e9 f7       	brne	.-6      	; 0x2d4 <waitForJ>

000002da <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
     2da:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK              ;[-14]
     2dc:	0b c0       	rjmp	.+22     	; 0x2f4 <foundK>
    sbis    USBIN, USBMINUS
     2de:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
     2e0:	09 c0       	rjmp	.+18     	; 0x2f4 <foundK>
    sbis    USBIN, USBMINUS
     2e2:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
     2e4:	07 c0       	rjmp	.+14     	; 0x2f4 <foundK>
    sbis    USBIN, USBMINUS
     2e6:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
     2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <foundK>
    sbis    USBIN, USBMINUS
     2ea:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
     2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <foundK>
    sbis    USBIN, USBMINUS
     2ee:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     2f2:	d5 c0       	rjmp	.+426    	; 0x49e <sofError>

000002f4 <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    r0                  ;[-12]
     2f4:	0f 92       	push	r0
;   [---]                       ;[-11]
    push    YH                  ;[-10]
     2f6:	df 93       	push	r29
;   [---]                       ;[-9]
    lds     YL, usbInputBufOffset;[-8]
     2f8:	c0 91 da 00 	lds	r28, 0x00DA
;   [---]                       ;[-7]
    clr     YH                  ;[-6]
     2fc:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-5] [rx loop init]
     2fe:	cf 51       	subi	r28, 0x1F	; 31
    sbci    YH, hi8(-(usbRxBuf));[-4] [rx loop init]
     300:	df 4f       	sbci	r29, 0xFF	; 255
    mov     r0, x2              ;[-3] [rx loop init]
     302:	01 2e       	mov	r0, r17
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
     304:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    haveTwoBitsK        ;[-1]
     306:	03 c0       	rjmp	.+6      	; 0x30e <haveTwoBitsK>
    pop     YH                  ;[0] undo the pushes from before
     308:	df 91       	pop	r29
    pop     r0                  ;[2]
     30a:	0f 90       	pop	r0
    rjmp    waitForK            ;[4] this was not the end of sync, retry
     30c:	e6 cf       	rjmp	.-52     	; 0x2da <waitForK>

0000030e <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:               ;[1]
    push    shift           ;[1]
     30e:	2f 93       	push	r18
    push    x1              ;[3]
     310:	0f 93       	push	r16
    push    x2              ;[5]
     312:	1f 93       	push	r17
    push    x3              ;[7]
     314:	4f 93       	push	r20
    ldi     shift, 0xff     ;[9] [rx loop init]
     316:	2f ef       	ldi	r18, 0xFF	; 255
    ori     x3, 0xff        ;[10] [rx loop init] == ser x3, clear zero flag
     318:	4f 6f       	ori	r20, 0xFF	; 255

    in      x1, USBIN       ;[11] <-- sample bit 0
     31a:	06 b3       	in	r16, 0x16	; 22
    bst     x1, USBMINUS    ;[12]
     31c:	00 fb       	bst	r16, 0
    bld     shift, 0        ;[13]
     31e:	20 f9       	bld	r18, 0
    push    x4              ;[14] == phase
     320:	5f 93       	push	r21
;   [---]                   ;[15]
    push    cnt             ;[16]
     322:	3f 93       	push	r19
;   [---]                   ;[17]
    ldi     phase, 0        ;[18] [rx loop init]
     324:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[19] [rx loop init]
     326:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[20]
     328:	65 c0       	rjmp	.+202    	; 0x3f4 <rxbit1>

0000032a <continueWithBit5>:
bit 7: jump, fixup bitstuff
; 87 [+ 2] cycles
------------------------------------------------------------------
*/
continueWithBit5:
    in      x2, USBIN       ;[055] <-- bit 5
     32a:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[056]
     32c:	01 26       	eor	r0, r17
    or      phase, r0       ;[057]
     32e:	50 29       	or	r21, r0
    sbrc    phase, USBMINUS ;[058]
     330:	50 fd       	sbrc	r21, 0
    lpm                     ;[059] optional nop3; modifies r0
     332:	c8 95       	lpm
    in      phase, USBIN    ;[060] <-- phase
     334:	56 b3       	in	r21, 0x16	; 22
    eor     x1, x2          ;[061]
     336:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[062]
     338:	00 fb       	bst	r16, 0
    bld     shift, 5        ;[063]
     33a:	25 f9       	bld	r18, 5
    andi    shift, 0x3f     ;[064]
     33c:	2f 73       	andi	r18, 0x3F	; 63
    in      x1, USBIN       ;[065] <-- bit 6
     33e:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff5        ;[066] *** unstuff escape
     340:	b1 f0       	breq	.+44     	; 0x36e <unstuff5>
    eor     phase, x1       ;[067]
     342:	50 27       	eor	r21, r16
    eor     x2, x1          ;[068]
     344:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[069]
     346:	10 fb       	bst	r17, 0
    bld     shift, 6        ;[070]
     348:	26 f9       	bld	r18, 6

0000034a <didUnstuff6>:
didUnstuff6:                ;[   ]
    in      r0, USBIN       ;[071] <-- phase
     34a:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x02     ;[072]
     34c:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6        ;[073] *** unstuff escape
     34e:	f0 f0       	brcs	.+60     	; 0x38c <unstuff6>

00000350 <didUnstuff5>:
didUnstuff5:                ;[   ]
    nop2                    ;[074]
     350:	00 c0       	rjmp	.+0      	; 0x352 <didUnstuff5+0x2>
;   [---]                   ;[075]
    in      x2, USBIN       ;[076] <-- bit 7
     352:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2          ;[077]
     354:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[078]
     356:	00 fb       	bst	r16, 0
    bld     shift, 7        ;[079]
     358:	27 f9       	bld	r18, 7

0000035a <didUnstuff7>:
didUnstuff7:                ;[   ]
    eor     r0, x2          ;[080]
     35a:	01 26       	eor	r0, r17
    or      phase, r0       ;[081]
     35c:	50 29       	or	r21, r0
    in      r0, USBIN       ;[082] <-- phase
     35e:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x04     ;[083]
     360:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop          ;[084]
     362:	e8 f5       	brcc	.+122    	; 0x3de <rxLoop>

00000364 <unstuff7>:
;   [---]                   ;[085]
unstuff7:                   ;[   ]
    andi    x3, ~0x80       ;[085]
     364:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80     ;[086]
     366:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN       ;[087] <-- sample stuffed bit 7
     368:	16 b3       	in	r17, 0x16	; 22
    nop                     ;[088]
     36a:	00 00       	nop
    rjmp    didUnstuff7     ;[089]
     36c:	f6 cf       	rjmp	.-20     	; 0x35a <didUnstuff7>

0000036e <unstuff5>:
;   [---]                   ;[090]
                            ;[080]

unstuff5:                   ;[067]
    eor     phase, x1       ;[068]
     36e:	50 27       	eor	r21, r16
    andi    x3, ~0x20       ;[069]
     370:	4f 7d       	andi	r20, 0xDF	; 223
    ori     shift, 0x20     ;[070]
     372:	20 62       	ori	r18, 0x20	; 32
    in      r0, USBIN       ;[071] <-- phase
     374:	06 b2       	in	r0, 0x16	; 22
    mov     x2, x1          ;[072]
     376:	10 2f       	mov	r17, r16
    nop                     ;[073]
     378:	00 00       	nop
    nop2                    ;[074]
     37a:	00 c0       	rjmp	.+0      	; 0x37c <unstuff5+0xe>
;   [---]                   ;[075]
    in      x1, USBIN       ;[076] <-- bit 6
     37c:	06 b3       	in	r16, 0x16	; 22
    eor     r0, x1          ;[077]
     37e:	00 26       	eor	r0, r16
    or      phase, r0       ;[078]
     380:	50 29       	or	r21, r0
    eor     x2, x1          ;[079]
     382:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[080]
     384:	10 fb       	bst	r17, 0
    bld     shift, 6        ;[081] no need to check bitstuffing, we just had one
     386:	26 f9       	bld	r18, 6
    in      r0, USBIN       ;[082] <-- phase
     388:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff5     ;[083]
     38a:	e2 cf       	rjmp	.-60     	; 0x350 <didUnstuff5>

0000038c <unstuff6>:
;   [---]                   ;[084]
                            ;[074]

unstuff6:                   ;[074]
    andi    x3, ~0x40       ;[075]
     38c:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN       ;[076] <-- bit 6 again
     38e:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x40     ;[077]
     390:	20 64       	ori	r18, 0x40	; 64
    nop2                    ;[078]
     392:	00 c0       	rjmp	.+0      	; 0x394 <unstuff6+0x8>
;   [---]                   ;[079]
    rjmp    didUnstuff6     ;[080]
     394:	da cf       	rjmp	.-76     	; 0x34a <didUnstuff6>

00000396 <unstuff0>:
;   [---]                   ;[081]
                            ;[071]

unstuff0:                   ;[013]
    eor     r0, x2          ;[014]
     396:	01 26       	eor	r0, r17
    or      phase, r0       ;[015]
     398:	50 29       	or	r21, r0
    andi    x2, USBMASK     ;[016] check for SE0
     39a:	15 70       	andi	r17, 0x05	; 5
    in      r0, USBIN       ;[017] <-- phase
     39c:	06 b2       	in	r0, 0x16	; 22
    breq    didUnstuff0     ;[018] direct jump to se0 would be too long
     39e:	69 f1       	breq	.+90     	; 0x3fa <didUnstuff0>
    andi    x3, ~0x01       ;[019]
     3a0:	4e 7f       	andi	r20, 0xFE	; 254
    ori     shift, 0x01     ;[020]
     3a2:	21 60       	ori	r18, 0x01	; 1
    mov     x1, x2          ;[021] mov existing sample
     3a4:	01 2f       	mov	r16, r17
    in      x2, USBIN       ;[022] <-- bit 1 again
     3a6:	16 b3       	in	r17, 0x16	; 22
    rjmp    didUnstuff0     ;[023]
     3a8:	28 c0       	rjmp	.+80     	; 0x3fa <didUnstuff0>

000003aa <unstuff1>:
;   [---]                   ;[024]
                            ;[014]

unstuff1:                   ;[024]
    eor     r0, x1          ;[025]
     3aa:	00 26       	eor	r0, r16
    or      phase, r0       ;[026]
     3ac:	50 29       	or	r21, r0
    andi    x3, ~0x02       ;[027]
     3ae:	4d 7f       	andi	r20, 0xFD	; 253
    in      r0, USBIN       ;[028] <-- phase
     3b0:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x02     ;[029]
     3b2:	22 60       	ori	r18, 0x02	; 2
    mov     x2, x1          ;[030]
     3b4:	10 2f       	mov	r17, r16
    rjmp    didUnstuff1     ;[031]
     3b6:	29 c0       	rjmp	.+82     	; 0x40a <didUnstuff1>

000003b8 <unstuff2>:
;   [---]                   ;[032]
                            ;[022]

unstuff2:                   ;[035]
    eor     r0, x2          ;[036]
     3b8:	01 26       	eor	r0, r17
    or      phase, r0       ;[037]
     3ba:	50 29       	or	r21, r0
    andi    x3, ~0x04       ;[038]
     3bc:	4b 7f       	andi	r20, 0xFB	; 251
    in      r0, USBIN       ;[039] <-- phase
     3be:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x04     ;[040]
     3c0:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2          ;[041]
     3c2:	01 2f       	mov	r16, r17
    rjmp    didUnstuff2     ;[042]
     3c4:	2d c0       	rjmp	.+90     	; 0x420 <didUnstuff2>

000003c6 <unstuff3>:
;   [---]                   ;[043]
                            ;[033]

unstuff3:                   ;[043]
    in      x2, USBIN       ;[044] <-- bit 3 again
     3c6:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[045]
     3c8:	01 26       	eor	r0, r17
    or      phase, r0       ;[046]
     3ca:	50 29       	or	r21, r0
    andi    x3, ~0x08       ;[047]
     3cc:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08     ;[048]
     3ce:	28 60       	ori	r18, 0x08	; 8
    nop                     ;[049]
     3d0:	00 00       	nop
    in      r0, USBIN       ;[050] <-- phase
     3d2:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff3     ;[051]
     3d4:	2e c0       	rjmp	.+92     	; 0x432 <didUnstuff3>

000003d6 <unstuff4>:
;   [---]                   ;[052]
                            ;[042]

unstuff4:                   ;[053]
    andi    x3, ~0x10       ;[054]
     3d6:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN       ;[055] <-- bit 4 again
     3d8:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x10     ;[056]
     3da:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4     ;[057]
     3dc:	30 c0       	rjmp	.+96     	; 0x43e <didUnstuff4>

000003de <rxLoop>:
;   [---]                   ;[058]
                            ;[048]

rxLoop:                     ;[085]
    eor     x3, shift       ;[086] reconstruct: x3 is 0 at bit locations we changed, 1 at others
     3de:	42 27       	eor	r20, r18
    in      x1, USBIN       ;[000] <-- bit 0
     3e0:	06 b3       	in	r16, 0x16	; 22
    st      y+, x3          ;[001]
     3e2:	49 93       	st	Y+, r20
;   [---]                   ;[002]
    eor     r0, x1          ;[003]
     3e4:	00 26       	eor	r0, r16
    or      phase, r0       ;[004]
     3e6:	50 29       	or	r21, r0
    eor     x2, x1          ;[005]
     3e8:	10 27       	eor	r17, r16
    in      r0, USBIN       ;[006] <-- phase
     3ea:	06 b2       	in	r0, 0x16	; 22
    ser     x3              ;[007]
     3ec:	4f ef       	ldi	r20, 0xFF	; 255
    bst     x2, USBMINUS    ;[008]
     3ee:	10 fb       	bst	r17, 0
    bld     shift, 0        ;[009]
     3f0:	20 f9       	bld	r18, 0
    andi    shift, 0xf9     ;[010]
     3f2:	29 7f       	andi	r18, 0xF9	; 249

000003f4 <rxbit1>:
rxbit1:                     ;[   ]
    in      x2, USBIN       ;[011] <-- bit 1
     3f4:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff0        ;[012] *** unstuff escape
     3f6:	79 f2       	breq	.-98     	; 0x396 <unstuff0>
    andi    x2, USBMASK     ;[013] SE0 check for bit 1
     3f8:	15 70       	andi	r17, 0x05	; 5

000003fa <didUnstuff0>:
didUnstuff0:                ;[   ] Z only set if we detected SE0 in bitstuff
    breq    se0             ;[014]
     3fa:	59 f1       	breq	.+86     	; 0x452 <se0>
    eor     r0, x2          ;[015]
     3fc:	01 26       	eor	r0, r17
    or      phase, r0       ;[016]
     3fe:	50 29       	or	r21, r0
    in      r0, USBIN       ;[017] <-- phase
     400:	06 b2       	in	r0, 0x16	; 22
    eor     x1, x2          ;[018]
     402:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[019]
     404:	00 fb       	bst	r16, 0
    bld     shift, 1        ;[020]
     406:	21 f9       	bld	r18, 1
    andi    shift, 0xf3     ;[021]
     408:	23 7f       	andi	r18, 0xF3	; 243

0000040a <didUnstuff1>:
didUnstuff1:                ;[   ]
    in      x1, USBIN       ;[022] <-- bit 2
     40a:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff1        ;[023] *** unstuff escape
     40c:	71 f2       	breq	.-100    	; 0x3aa <unstuff1>
    eor     r0, x1          ;[024]
     40e:	00 26       	eor	r0, r16
    or      phase, r0       ;[025]
     410:	50 29       	or	r21, r0
    subi    cnt, 1          ;[026] overflow check
     412:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow        ;[027]
     414:	d0 f0       	brcs	.+52     	; 0x44a <overflow>
    in      r0, USBIN       ;[028] <-- phase
     416:	06 b2       	in	r0, 0x16	; 22
    eor     x2, x1          ;[029]
     418:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[030]
     41a:	10 fb       	bst	r17, 0
    bld     shift, 2        ;[031]
     41c:	22 f9       	bld	r18, 2
    andi    shift, 0xe7     ;[032]
     41e:	27 7e       	andi	r18, 0xE7	; 231

00000420 <didUnstuff2>:
didUnstuff2:                ;[   ]
    in      x2, USBIN       ;[033] <-- bit 3
     420:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff2        ;[034] *** unstuff escape
     422:	51 f2       	breq	.-108    	; 0x3b8 <unstuff2>
    eor     r0, x2          ;[035]
     424:	01 26       	eor	r0, r17
    or      phase, r0       ;[036]
     426:	50 29       	or	r21, r0
    eor     x1, x2          ;[037]
     428:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[038]
     42a:	00 fb       	bst	r16, 0
    in      r0, USBIN       ;[039] <-- phase
     42c:	06 b2       	in	r0, 0x16	; 22
    bld     shift, 3        ;[040]
     42e:	23 f9       	bld	r18, 3
    andi    shift, 0xcf     ;[041]
     430:	2f 7c       	andi	r18, 0xCF	; 207

00000432 <didUnstuff3>:
didUnstuff3:                ;[   ]
    breq    unstuff3        ;[042] *** unstuff escape
     432:	49 f2       	breq	.-110    	; 0x3c6 <unstuff3>
    nop                     ;[043]
     434:	00 00       	nop
    in      x1, USBIN       ;[044] <-- bit 4
     436:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1          ;[045]
     438:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[046]
     43a:	10 fb       	bst	r17, 0
    bld     shift, 4        ;[047]
     43c:	24 f9       	bld	r18, 4

0000043e <didUnstuff4>:
didUnstuff4:                ;[   ]
    eor     r0, x1          ;[048]
     43e:	00 26       	eor	r0, r16
    or      phase, r0       ;[049]
     440:	50 29       	or	r21, r0
    in      r0, USBIN       ;[050] <-- phase
     442:	06 b2       	in	r0, 0x16	; 22
    andi    shift, 0x9f     ;[051]
     444:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4        ;[052] *** unstuff escape
     446:	39 f2       	breq	.-114    	; 0x3d6 <unstuff4>
    rjmp    continueWithBit5;[053]
     448:	70 cf       	rjmp	.-288    	; 0x32a <continueWithBit5>

0000044a <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
     44a:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
     44c:	1a bf       	out	0x3a, r17	; 58

0000044e <ignorePacket>:
ignorePacket:
    clr     token
     44e:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
     450:	19 c0       	rjmp	.+50     	; 0x484 <handleSetupOrOut>

00000452 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
     452:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
     454:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
     456:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
     458:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
     45a:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
     45c:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
     45e:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
     460:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
     462:	09 f1       	breq	.+66     	; 0x4a6 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
     464:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
     466:	f9 f0       	breq	.+62     	; 0x4a6 <handleData>
    lds     shift, usbDeviceAddr;[17]
     468:	20 91 d8 00 	lds	r18, 0x00D8
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
     46c:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
     46e:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
     470:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
     472:	ed cf       	rjmp	.-38     	; 0x44e <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
     474:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
     476:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
     478:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
     47a:	51 f1       	breq	.+84     	; 0x4d0 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
     47c:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
     47e:	11 f0       	breq	.+4      	; 0x484 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
     480:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
     482:	29 f7       	brne	.-54     	; 0x44e <ignorePacket>

00000484 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
     484:	00 93 df 00 	sts	0x00DF, r16

00000488 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
     488:	3f 91       	pop	r19
     48a:	5f 91       	pop	r21
     48c:	4f 91       	pop	r20
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	2f 91       	pop	r18
     494:	df 91       	pop	r29
     496:	0f 90       	pop	r0
    USB_LOAD_PENDING(YL)        ;[49]
     498:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
     49a:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
     49c:	1b cf       	rjmp	.-458    	; 0x2d4 <waitForJ>

0000049e <sofError>:
sofError:
    POP_RETI                    ;macro call
     49e:	cf 91       	pop	r28
     4a0:	cf bf       	out	0x3f, r28	; 63
     4a2:	cf 91       	pop	r28
    reti
     4a4:	18 95       	reti

000004a6 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
     4a6:	20 91 df 00 	lds	r18, 0x00DF
    tst     shift               ;[20]
     4aa:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
     4ac:	69 f3       	breq	.-38     	; 0x488 <doReturn>
    lds     x2, usbRxLen        ;[22]
     4ae:	10 91 dd 00 	lds	r17, 0x00DD
    tst     x2                  ;[24]
     4b2:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
     4b4:	79 f5       	brne	.+94     	; 0x514 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
     4b6:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
     4b8:	7a f1       	brmi	.+94     	; 0x518 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
     4ba:	30 93 dd 00 	sts	0x00DD, r19
    sts     usbRxToken, shift   ;[30]
     4be:	20 93 d9 00 	sts	0x00D9, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
     4c2:	10 91 da 00 	lds	r17, 0x00DA
    ldi     cnt, USB_BUFSIZE    ;[34]
     4c6:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
     4c8:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
     4ca:	30 93 da 00 	sts	0x00DA, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
     4ce:	24 c0       	rjmp	.+72     	; 0x518 <sendAckAndReti>

000004d0 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
     4d0:	00 91 dd 00 	lds	r16, 0x00DD
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
     4d4:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
     4d6:	f4 f4       	brge	.+60     	; 0x514 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
     4d8:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
     4da:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
     4dc:	49 f4       	brne	.+18     	; 0x4f0 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
     4de:	30 91 a4 00 	lds	r19, 0x00A4
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
     4e2:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
     4e4:	1a c0       	rjmp	.+52     	; 0x51a <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
     4e6:	00 93 a4 00 	sts	0x00A4, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
     4ea:	c1 ec       	ldi	r28, 0xC1	; 193
    ldi     YH, hi8(usbTxBuf)   ;[44]
     4ec:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
     4ee:	19 c0       	rjmp	.+50     	; 0x522 <usbSendAndReti>

000004f0 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
     4f0:	30 91 cc 00 	lds	r19, 0x00CC
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
     4f4:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
     4f6:	11 c0       	rjmp	.+34     	; 0x51a <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
     4f8:	00 93 cc 00 	sts	0x00CC, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
     4fc:	cd ec       	ldi	r28, 0xCD	; 205
    ldi     YH, hi8(usbTxBuf1)  ;[47]
     4fe:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
     500:	10 c0       	rjmp	.+32     	; 0x522 <usbSendAndReti>

00000502 <bitstuff7>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuff7:
    eor     x1, x4          ;[4]
     502:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[5]
     504:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[6] C is zero (brcc)
     506:	00 c0       	rjmp	.+0      	; 0x508 <bitstuff7+0x6>
    rjmp    didStuff7       ;[8]
     508:	21 c0       	rjmp	.+66     	; 0x54c <didStuff7>

0000050a <bitstuffN>:

bitstuffN:
    eor     x1, x4          ;[5]
     50a:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
     50c:	10 e0       	ldi	r17, 0x00	; 0
    lpm                     ;[7] 3 cycle NOP, modifies r0
     50e:	c8 95       	lpm
    out     USBOUT, x1      ;[10] <-- out
     510:	08 bb       	out	0x18, r16	; 24
    rjmp    didStuffN       ;[0]
     512:	14 c0       	rjmp	.+40     	; 0x53c <didStuffN>

00000514 <sendNakAndReti>:

#define bitStatus   x3

sendNakAndReti:
    ldi     cnt, USBPID_NAK ;[-19]
     514:	3a e5       	ldi	r19, 0x5A	; 90
    rjmp    sendCntAndReti  ;[-18]
     516:	01 c0       	rjmp	.+2      	; 0x51a <sendCntAndReti>

00000518 <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
     518:	32 ed       	ldi	r19, 0xD2	; 210

0000051a <sendCntAndReti>:
sendCntAndReti:
    mov     r0, cnt         ;[-16]
     51a:	03 2e       	mov	r0, r19
    ldi     YL, 0           ;[-15] R0 address is 0
     51c:	c0 e0       	ldi	r28, 0x00	; 0
    ldi     YH, 0           ;[-14]
     51e:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
     520:	32 e0       	ldi	r19, 0x02	; 2

00000522 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte [range 2 ... 12]
;uses: x1...x4, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
     522:	17 b3       	in	r17, 0x17	; 23
    ori     x2, USBMASK     ;[-11]
     524:	15 60       	ori	r17, 0x05	; 5
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
     526:	c0 9a       	sbi	0x18, 0	; 24
    in      x1, USBOUT      ;[-8] port mirror for tx loop
     528:	08 b3       	in	r16, 0x18	; 24
    out     USBDDR, x2      ;[-7] <- acquire bus
     52a:	17 bb       	out	0x17, r17	; 23
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
     52c:	55 e0       	ldi	r21, 0x05	; 5
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
     52e:	20 e8       	ldi	r18, 0x80	; 128
    ldi     bitStatus, 0xff ;[-4] init bit loop counter, works for up to 12 bytes
     530:	4f ef       	ldi	r20, 0xFF	; 255

00000532 <bitloop>:
byteloop:
bitloop:
    sbrs    shift, 0        ;[8] [-3]
     532:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[9] [-2]
     534:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[10] [-1] <-- out
     536:	08 bb       	out	0x18, r16	; 24
    ror     shift           ;[0]
     538:	27 95       	ror	r18
    ror     x2              ;[1]
     53a:	17 95       	ror	r17

0000053c <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
     53c:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
     53e:	28 f7       	brcc	.-54     	; 0x50a <bitstuffN>
    nop                     ;[4]
     540:	00 00       	nop
    subi    bitStatus, 37   ;[5] 256 / 7 ~=~ 37
     542:	45 52       	subi	r20, 0x25	; 37
    brcc    bitloop         ;[6] when we leave the loop, bitStatus has almost the initial value
     544:	b0 f7       	brcc	.-20     	; 0x532 <bitloop>
    sbrs    shift, 0        ;[7]
     546:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
     548:	05 27       	eor	r16, r21
    ror     shift           ;[9]
     54a:	27 95       	ror	r18

0000054c <didStuff7>:
didStuff7:
    out     USBOUT, x1      ;[10] <-- out
     54c:	08 bb       	out	0x18, r16	; 24
    ror     x2              ;[0]
     54e:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[1]
     550:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff7       ;[2]
     552:	b8 f6       	brcc	.-82     	; 0x502 <bitstuff7>
    ld      shift, y+       ;[3]
     554:	29 91       	ld	r18, Y+
    dec     cnt             ;[5]
     556:	3a 95       	dec	r19
    brne    byteloop        ;[6]
     558:	61 f7       	brne	.-40     	; 0x532 <bitloop>
;make SE0:
    cbr     x1, USBMASK     ;[7] prepare SE0 [spec says EOP may be 21 to 25 cycles]
     55a:	0a 7f       	andi	r16, 0xFA	; 250
    lds     x2, usbNewDeviceAddr;[8]
     55c:	10 91 de 00 	lds	r17, 0x00DE
    lsl     x2              ;[10] we compare with left shifted address
     560:	11 0f       	add	r17, r17
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
     562:	08 bb       	out	0x18, r16	; 24
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    subi    YL, 2           ;[0] Only assign address on data packets, not ACK/NAK in r0
     564:	c2 50       	subi	r28, 0x02	; 2
    sbci    YH, 0           ;[1]
     566:	d0 40       	sbci	r29, 0x00	; 0
    breq    skipAddrAssign  ;[2]
     568:	11 f0       	breq	.+4      	; 0x56e <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
     56a:	10 93 d8 00 	sts	0x00D8, r17

0000056e <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[4] int0 occurred during TX -- clear pending flag
     56e:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)   ;[5]
     570:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE     ;[6]
     572:	01 60       	ori	r16, 0x01	; 1
    in      x2, USBDDR      ;[7]
     574:	17 b3       	in	r17, 0x17	; 23
    cbr     x2, USBMASK     ;[8] set both pins to input
     576:	1a 7f       	andi	r17, 0xFA	; 250
    mov     x3, x1          ;[9]
     578:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[10] configure no pullup on both pins
     57a:	4a 7f       	andi	r20, 0xFA	; 250
    ldi     x4, 4           ;[11]
     57c:	54 e0       	ldi	r21, 0x04	; 4

0000057e <se0Delay>:
se0Delay:
    dec     x4              ;[12] [15] [18] [21]
     57e:	5a 95       	dec	r21
    brne    se0Delay        ;[13] [16] [19] [22]
     580:	f1 f7       	brne	.-4      	; 0x57e <se0Delay>
    out     USBOUT, x1      ;[23] <-- out J (idle) -- end of SE0 (EOP signal)
     582:	08 bb       	out	0x18, r16	; 24
    out     USBDDR, x2      ;[24] <-- release bus now
     584:	17 bb       	out	0x17, r17	; 23
    out     USBOUT, x3      ;[25] <-- ensure no pull-up resistors are active
     586:	48 bb       	out	0x18, r20	; 24
    rjmp    doReturn
     588:	7f cf       	rjmp	.-258    	; 0x488 <doReturn>

0000058a <usbFunctionSetup>:
//-----------------------USB--------------------------//
//----------------------------------------------------//
usbMsgLen_t usbFunctionSetup(uint8_t data[8])
{
	// see HID1_11.pdf sect 7.2 and http://vusb.wikidot.com/driver-api
	usbRequest_t *rq = (void *)data;
     58a:	fc 01       	movw	r30, r24

	if ((rq->bmRequestType & USBRQ_TYPE_MASK) != USBRQ_TYPE_CLASS)
     58c:	80 81       	ld	r24, Z
     58e:	80 76       	andi	r24, 0x60	; 96
     590:	80 32       	cpi	r24, 0x20	; 32
     592:	09 f0       	breq	.+2      	; 0x596 <usbFunctionSetup+0xc>
     594:	3f c0       	rjmp	.+126    	; 0x614 <usbFunctionSetup+0x8a>
		return 0; // ignore request if it's not a class specific request

	// see HID1_11.pdf sect 7.2
	switch (rq->bRequest)
     596:	81 81       	ldd	r24, Z+1	; 0x01
     598:	83 30       	cpi	r24, 0x03	; 3
     59a:	a9 f0       	breq	.+42     	; 0x5c6 <usbFunctionSetup+0x3c>
     59c:	84 30       	cpi	r24, 0x04	; 4
     59e:	28 f4       	brcc	.+10     	; 0x5aa <usbFunctionSetup+0x20>
     5a0:	81 30       	cpi	r24, 0x01	; 1
     5a2:	f1 f0       	breq	.+60     	; 0x5e0 <usbFunctionSetup+0x56>
     5a4:	82 30       	cpi	r24, 0x02	; 2
     5a6:	b1 f5       	brne	.+108    	; 0x614 <usbFunctionSetup+0x8a>
     5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <usbFunctionSetup+0x2e>
     5aa:	8a 30       	cpi	r24, 0x0A	; 10
     5ac:	41 f0       	breq	.+16     	; 0x5be <usbFunctionSetup+0x34>
     5ae:	8b 30       	cpi	r24, 0x0B	; 11
     5b0:	91 f0       	breq	.+36     	; 0x5d6 <usbFunctionSetup+0x4c>
     5b2:	89 30       	cpi	r24, 0x09	; 9
     5b4:	79 f5       	brne	.+94     	; 0x614 <usbFunctionSetup+0x8a>
     5b6:	29 c0       	rjmp	.+82     	; 0x60a <usbFunctionSetup+0x80>
	{
		case USBRQ_HID_GET_IDLE:
			usbMsgPtr = &idle_rate; // send data starting from this byte
     5b8:	83 ea       	ldi	r24, 0xA3	; 163
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	06 c0       	rjmp	.+12     	; 0x5ca <usbFunctionSetup+0x40>
			return 1; // send 1 byte
		case USBRQ_HID_SET_IDLE:
			idle_rate = rq->wValue.bytes[1]; // read in idle rate
     5be:	83 81       	ldd	r24, Z+3	; 0x03
     5c0:	80 93 a3 00 	sts	0x00A3, r24
     5c4:	0b c0       	rjmp	.+22     	; 0x5dc <usbFunctionSetup+0x52>
			return 0; // send nothing
		case USBRQ_HID_GET_PROTOCOL:
			usbMsgPtr = &protocol_version; // send data starting from this byte
     5c6:	8c ea       	ldi	r24, 0xAC	; 172
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	90 93 dc 00 	sts	0x00DC, r25
     5ce:	80 93 db 00 	sts	0x00DB, r24
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	08 95       	ret
			return 1; // send 1 byte
		case USBRQ_HID_SET_PROTOCOL:
			protocol_version = rq->wValue.bytes[1];
     5d6:	83 81       	ldd	r24, Z+3	; 0x03
     5d8:	80 93 ac 00 	sts	0x00AC, r24
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	08 95       	ret
			return 0; // send nothing
		case USBRQ_HID_GET_REPORT:
			// check for report ID then send back report
			if (rq->wValue.bytes[0] == 1)
     5e0:	82 81       	ldd	r24, Z+2	; 0x02
     5e2:	81 30       	cpi	r24, 0x01	; 1
     5e4:	41 f4       	brne	.+16     	; 0x5f6 <usbFunctionSetup+0x6c>
			{
				usbMsgPtr = &keyboard_report;
     5e6:	8d ea       	ldi	r24, 0xAD	; 173
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	90 93 dc 00 	sts	0x00DC, r25
     5ee:	80 93 db 00 	sts	0x00DB, r24
     5f2:	86 e0       	ldi	r24, 0x06	; 6
     5f4:	08 95       	ret
				return sizeof(keyboard_report);
			}
			else if (rq->wValue.bytes[0] == 2)
     5f6:	82 30       	cpi	r24, 0x02	; 2
     5f8:	69 f4       	brne	.+26     	; 0x614 <usbFunctionSetup+0x8a>
			{
				usbMsgPtr = &mouse_report;
     5fa:	83 eb       	ldi	r24, 0xB3	; 179
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	90 93 dc 00 	sts	0x00DC, r25
     602:	80 93 db 00 	sts	0x00DB, r24
     606:	85 e0       	ldi	r24, 0x05	; 5
     608:	08 95       	ret
			else
			{
				return 0; // no such report, send nothing
			}
		case USBRQ_HID_SET_REPORT: // no "output" or "feature" implemented, so ignore
		if (rq->wValue.bytes[0] == 1){
     60a:	82 81       	ldd	r24, Z+2	; 0x02
     60c:	81 30       	cpi	r24, 0x01	; 1
     60e:	11 f4       	brne	.+4      	; 0x614 <usbFunctionSetup+0x8a>
     610:	8f ef       	ldi	r24, 0xFF	; 255
     612:	08 95       	ret
     614:	80 e0       	ldi	r24, 0x00	; 0
			return 0; // send nothing
			}
		default: // do not understand data, ignore
			return 0; // send nothing
	}
}
     616:	08 95       	ret

00000618 <usbFunctionWrite>:
int blink_count = 0; // keep track of how many times caps lock have toggled

usbMsgLen_t usbFunctionWrite(uint8_t * data, uchar len)
{	 		

	if (data[1] != LED_state)
     618:	fc 01       	movw	r30, r24
     61a:	91 81       	ldd	r25, Z+1	; 0x01
     61c:	80 91 ab 00 	lds	r24, 0x00AB
     620:	98 17       	cp	r25, r24
     622:	91 f0       	breq	.+36     	; 0x648 <usbFunctionWrite+0x30>
	{
		// increment count when LED has toggled
		
		LED_state = data[1];
     624:	90 93 ab 00 	sts	0x00AB, r25
		
		
		if (bit_is_set(LED_state, 1))
     628:	80 91 ab 00 	lds	r24, 0x00AB
     62c:	81 ff       	sbrs	r24, 1
     62e:	0b c0       	rjmp	.+22     	; 0x646 <usbFunctionWrite+0x2e>
		{
			sbi(PORTB, YELLOW_LED);
     630:	c1 9a       	sbi	0x18, 1	; 24
			blink_count++;
     632:	80 91 a6 00 	lds	r24, 0x00A6
     636:	90 91 a7 00 	lds	r25, 0x00A7
     63a:	01 96       	adiw	r24, 0x01	; 1
     63c:	90 93 a7 00 	sts	0x00A7, r25
     640:	80 93 a6 00 	sts	0x00A6, r24
     644:	01 c0       	rjmp	.+2      	; 0x648 <usbFunctionWrite+0x30>
		}
		else
		{
			cbi(PORTB, YELLOW_LED);
     646:	c1 98       	cbi	0x18, 1	; 24
		}
	}
	return 1;             // return 1 if we have all data
}
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	08 95       	ret

0000064c <usbFunctionRead>:


usbMsgLen_t usbFunctionRead(uint8_t * data, uchar len)
{	 		
	return 1;             // return 1 if we have all data
}
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	08 95       	ret

00000650 <inputPoll>:
//----------------------------------------------------//
int clockstate;

void inputPoll()
{
	if (clockstate != clock)
     650:	86 b3       	in	r24, 0x16	; 22
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	34 e0       	ldi	r19, 0x04	; 4
     656:	96 95       	lsr	r25
     658:	87 95       	ror	r24
     65a:	3a 95       	dec	r19
     65c:	e1 f7       	brne	.-8      	; 0x656 <inputPoll+0x6>
     65e:	41 e0       	ldi	r20, 0x01	; 1
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	84 27       	eor	r24, r20
     664:	95 27       	eor	r25, r21
     666:	81 70       	andi	r24, 0x01	; 1
     668:	90 70       	andi	r25, 0x00	; 0
     66a:	20 91 bd 00 	lds	r18, 0x00BD
     66e:	30 91 be 00 	lds	r19, 0x00BE
     672:	28 17       	cp	r18, r24
     674:	39 07       	cpc	r19, r25
     676:	e9 f0       	breq	.+58     	; 0x6b2 <inputPoll+0x62>
	{
		clockstate = clock;
     678:	86 b3       	in	r24, 0x16	; 22
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	24 e0       	ldi	r18, 0x04	; 4
     67e:	96 95       	lsr	r25
     680:	87 95       	ror	r24
     682:	2a 95       	dec	r18
     684:	e1 f7       	brne	.-8      	; 0x67e <inputPoll+0x2e>
     686:	84 27       	eor	r24, r20
     688:	95 27       	eor	r25, r21
     68a:	81 70       	andi	r24, 0x01	; 1
     68c:	90 70       	andi	r25, 0x00	; 0
     68e:	90 93 be 00 	sts	0x00BE, r25
     692:	80 93 bd 00 	sts	0x00BD, r24
		if (clock){
     696:	b4 99       	sbic	0x16, 4	; 22
     698:	0b c0       	rjmp	.+22     	; 0x6b0 <inputPoll+0x60>
			sbi(PORTB, YELLOW_LED);
     69a:	c1 9a       	sbi	0x18, 1	; 24
			blink_count++;
     69c:	80 91 a6 00 	lds	r24, 0x00A6
     6a0:	90 91 a7 00 	lds	r25, 0x00A7
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	90 93 a7 00 	sts	0x00A7, r25
     6aa:	80 93 a6 00 	sts	0x00A6, r24
     6ae:	08 95       	ret
		}
		else
		{
			cbi(PORTB, YELLOW_LED);
     6b0:	c1 98       	cbi	0x18, 1	; 24
     6b2:	08 95       	ret

000006b4 <usbSendHidReport>:
    eeprom_write_byte(0, OSCCAL);   /* store the calibrated value in EEPROM */
}

// this function is used to guarantee that the data is sent to the computer once
void usbSendHidReport(uchar * data, uchar len)
{
     6b4:	1f 93       	push	r17
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	ec 01       	movw	r28, r24
     6bc:	16 2f       	mov	r17, r22
	while(1)
	{
		usbPoll();
     6be:	c1 d3       	rcall	.+1922   	; 0xe42 <usbPoll>
		if (usbInterruptIsReady())
     6c0:	80 91 cc 00 	lds	r24, 0x00CC
     6c4:	84 ff       	sbrs	r24, 4
     6c6:	fb cf       	rjmp	.-10     	; 0x6be <usbSendHidReport+0xa>
		{
			usbSetInterrupt(data, len);
     6c8:	ce 01       	movw	r24, r28
     6ca:	61 2f       	mov	r22, r17
     6cc:	99 d3       	rcall	.+1842   	; 0xe00 <usbSetInterrupt>
			break;
		}
	}
}
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	08 95       	ret

000006d6 <mouse_report_once>:
//----------------------------------------------------//


void mouse_report_once()
{
	usbPoll();
     6d6:	b5 d3       	rcall	.+1898   	; 0xe42 <usbPoll>
  	usbSendHidReport(&mouse_report, sizeof(mouse_report));
     6d8:	83 eb       	ldi	r24, 0xB3	; 179
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	65 e0       	ldi	r22, 0x05	; 5
     6de:	ea df       	rcall	.-44     	; 0x6b4 <usbSendHidReport>
}
     6e0:	08 95       	ret

000006e2 <mouse_move>:

void mouse_move(int8_t x,int8_t y,uint8_t speed ){
     6e2:	ef 92       	push	r14
     6e4:	ff 92       	push	r15
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	e6 2e       	mov	r14, r22
     6f0:	f4 2e       	mov	r15, r20
	int i;
  
	if (x>0){
     6f2:	18 16       	cp	r1, r24
     6f4:	7c f4       	brge	.+30     	; 0x714 <mouse_move+0x32>
     6f6:	c0 e0       	ldi	r28, 0x00	; 0
     6f8:	d0 e0       	ldi	r29, 0x00	; 0
    for(i=0;i<x;i++){  /* 300 ms disconnect */
     6fa:	08 2f       	mov	r16, r24
     6fc:	11 27       	eor	r17, r17
     6fe:	07 fd       	sbrc	r16, 7
     700:	10 95       	com	r17
     702:	04 c0       	rjmp	.+8      	; 0x70c <mouse_move+0x2a>
        mouse_report.x=speed;
     704:	f0 92 b5 00 	sts	0x00B5, r15
        mouse_report_once();
     708:	e6 df       	rcall	.-52     	; 0x6d6 <mouse_report_once>

void mouse_move(int8_t x,int8_t y,uint8_t speed ){
	int i;
  
	if (x>0){
    for(i=0;i<x;i++){  /* 300 ms disconnect */
     70a:	21 96       	adiw	r28, 0x01	; 1
     70c:	c0 17       	cp	r28, r16
     70e:	d1 07       	cpc	r29, r17
     710:	cc f3       	brlt	.-14     	; 0x704 <mouse_move+0x22>
     712:	0d c0       	rjmp	.+26     	; 0x72e <mouse_move+0x4c>
        mouse_report_once();
    }
   }
   else
   {
      for(i=x;i<0;i++){  /* 300 ms disconnect */
     714:	c8 2f       	mov	r28, r24
     716:	dd 27       	eor	r29, r29
     718:	c7 fd       	sbrc	r28, 7
     71a:	d0 95       	com	r29
        mouse_report.x=(-1*speed);
     71c:	14 2f       	mov	r17, r20
     71e:	11 95       	neg	r17
     720:	04 c0       	rjmp	.+8      	; 0x72a <mouse_move+0x48>
     722:	10 93 b5 00 	sts	0x00B5, r17
        mouse_report_once();
     726:	d7 df       	rcall	.-82     	; 0x6d6 <mouse_report_once>
        mouse_report_once();
    }
   }
   else
   {
      for(i=x;i<0;i++){  /* 300 ms disconnect */
     728:	21 96       	adiw	r28, 0x01	; 1
     72a:	20 97       	sbiw	r28, 0x00	; 0
     72c:	d1 f7       	brne	.-12     	; 0x722 <mouse_move+0x40>
        mouse_report.x=(-1*speed);
        mouse_report_once();
      }
   }
   if (y>0){
     72e:	1e 14       	cp	r1, r14
     730:	7c f4       	brge	.+30     	; 0x750 <mouse_move+0x6e>
     732:	c0 e0       	ldi	r28, 0x00	; 0
     734:	d0 e0       	ldi	r29, 0x00	; 0
    for(i=0;i<y;i++){  /* 300 ms disconnect */
     736:	0e 2d       	mov	r16, r14
     738:	11 27       	eor	r17, r17
     73a:	07 fd       	sbrc	r16, 7
     73c:	10 95       	com	r17
     73e:	04 c0       	rjmp	.+8      	; 0x748 <mouse_move+0x66>
        mouse_report.y=speed;
     740:	f0 92 b6 00 	sts	0x00B6, r15
        mouse_report_once();
     744:	c8 df       	rcall	.-112    	; 0x6d6 <mouse_report_once>
        mouse_report.x=(-1*speed);
        mouse_report_once();
      }
   }
   if (y>0){
    for(i=0;i<y;i++){  /* 300 ms disconnect */
     746:	21 96       	adiw	r28, 0x01	; 1
     748:	c0 17       	cp	r28, r16
     74a:	d1 07       	cpc	r29, r17
     74c:	cc f3       	brlt	.-14     	; 0x740 <mouse_move+0x5e>
     74e:	0d c0       	rjmp	.+26     	; 0x76a <mouse_move+0x88>
        mouse_report_once();
    }
   }
   else
   {
      for(i=y;i<0;i++){  /* 300 ms disconnect */
     750:	ce 2d       	mov	r28, r14
     752:	dd 27       	eor	r29, r29
     754:	c7 fd       	sbrc	r28, 7
     756:	d0 95       	com	r29
        mouse_report.y=(-1*speed);
     758:	1f 2d       	mov	r17, r15
     75a:	11 95       	neg	r17
     75c:	04 c0       	rjmp	.+8      	; 0x766 <mouse_move+0x84>
     75e:	10 93 b6 00 	sts	0x00B6, r17
        mouse_report_once();
     762:	b9 df       	rcall	.-142    	; 0x6d6 <mouse_report_once>
        mouse_report_once();
    }
   }
   else
   {
      for(i=y;i<0;i++){  /* 300 ms disconnect */
     764:	21 96       	adiw	r28, 0x01	; 1
     766:	20 97       	sbiw	r28, 0x00	; 0
     768:	d1 f7       	brne	.-12     	; 0x75e <mouse_move+0x7c>
        mouse_report_once();
      }
   }
   
	
	mouse_report_reset();
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	80 93 b3 00 	sts	0x00B3, r24
     770:	10 92 b4 00 	sts	0x00B4, r1
     774:	10 92 b5 00 	sts	0x00B5, r1
     778:	10 92 b6 00 	sts	0x00B6, r1
     77c:	10 92 b7 00 	sts	0x00B7, r1
	mouse_report_once();
     780:	aa df       	rcall	.-172    	; 0x6d6 <mouse_report_once>
}
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	ff 90       	pop	r15
     78c:	ef 90       	pop	r14
     78e:	08 95       	ret

00000790 <send_report_once>:
//----------------------------------------------------//
//----------------------------------------------------//

void send_report_once()
{
  usbSendHidReport(&keyboard_report, sizeof(keyboard_report));
     790:	8d ea       	ldi	r24, 0xAD	; 173
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	66 e0       	ldi	r22, 0x06	; 6
     796:	8e df       	rcall	.-228    	; 0x6b4 <usbSendHidReport>
}
     798:	08 95       	ret

0000079a <addDigit>:

static void addDigit(uchar key,uchar mod)
{
     79a:	1f 93       	push	r17
	keyboard_report.report_id=1;
     79c:	11 e0       	ldi	r17, 0x01	; 1
     79e:	10 93 ad 00 	sts	0x00AD, r17
    keyboard_report.keycode[0] =  key;
     7a2:	80 93 b0 00 	sts	0x00B0, r24
	keyboard_report.modifier = mod;
     7a6:	60 93 ae 00 	sts	0x00AE, r22
	send_report_once();
     7aa:	f2 df       	rcall	.-28     	; 0x790 <send_report_once>
	keyboard_report_reset(); // release keys
     7ac:	10 93 ad 00 	sts	0x00AD, r17
     7b0:	10 92 ae 00 	sts	0x00AE, r1
     7b4:	10 92 af 00 	sts	0x00AF, r1
     7b8:	10 92 b0 00 	sts	0x00B0, r1
     7bc:	10 92 b1 00 	sts	0x00B1, r1
     7c0:	10 92 b2 00 	sts	0x00B2, r1
	send_report_once();
     7c4:	e5 df       	rcall	.-54     	; 0x790 <send_report_once>
}
     7c6:	1f 91       	pop	r17
     7c8:	08 95       	ret

000007ca <main>:
{
	ASCII_to_keycode(ascii);
}
static FILE mystdout = FDEV_SETUP_STREAM(type_out_char, NULL, _FDEV_SETUP_WRITE); // setup writing stream
int main()
{
     7ca:	3f 92       	push	r3
     7cc:	4f 92       	push	r4
     7ce:	5f 92       	push	r5
     7d0:	6f 92       	push	r6
     7d2:	7f 92       	push	r7
     7d4:	8f 92       	push	r8
     7d6:	9f 92       	push	r9
     7d8:	af 92       	push	r10
     7da:	bf 92       	push	r11
     7dc:	cf 92       	push	r12
     7de:	df 92       	push	r13
     7e0:	ef 92       	push	r14
     7e2:	ff 92       	push	r15
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
int i;
	wdt_disable(); // no watchdog, just because I'm lazy
     7ec:	88 e1       	ldi	r24, 0x18	; 24
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	81 bd       	out	0x21, r24	; 33
     7f4:	11 bc       	out	0x21, r1	; 33
     7f6:	0f be       	out	0x3f, r0	; 63
	stdout = &mystdout; // set default stream
     7f8:	85 e9       	ldi	r24, 0x95	; 149
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	90 93 fa 00 	sts	0x00FA, r25
     800:	80 93 f9 00 	sts	0x00F9, r24
	
	DDRB |= (1 << WHITE_LED) | (0 << 3)| (0 << 4);   //0 = input, 1 = output,WHITE_LED is output PB3 is input, PB4 is input 
     804:	b9 9a       	sbi	0x17, 1	; 23
	PORTB |= 1<<DDB3 | 1<<DDB4;
     806:	88 b3       	in	r24, 0x18	; 24
     808:	88 61       	ori	r24, 0x18	; 24
     80a:	88 bb       	out	0x18, r24	; 24
	
		
	ADCSRA = UTIL_BIN8(1000, 0111); 					// enable ADC, not free running, interrupt disable, rate = 1/128
     80c:	87 e8       	ldi	r24, 0x87	; 135
     80e:	86 b9       	out	0x06, r24	; 6
	//+-----------------------------------------------+
	

	ADMUX = UTIL_BIN8(1000, 0011);						//Internal 1.1V Voltage Reference, Right adjust the result, Single Ended Input ADC3 (PB3) 
     810:	83 e8       	ldi	r24, 0x83	; 131
     812:	87 b9       	out	0x07, r24	; 7
	//+-----------------------------------------------+

	TCCR1 = UTIL_BIN8(0000, 1011);           // select clock: 16.5M/1k -> overflow rate = 16.5M/256k = 62.94 Hz 
     814:	8b e0       	ldi	r24, 0x0B	; 11
     816:	80 bf       	out	0x30, r24	; 48
	
	sbi(PORTB, WHITE_LED);
     818:	c1 9a       	sbi	0x18, 1	; 24
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     81e:	23 eb       	ldi	r18, 0xB3	; 179
     820:	31 ef       	ldi	r19, 0xF1	; 241
     822:	f9 01       	movw	r30, r18
     824:	31 97       	sbiw	r30, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <main+0x5a>
    for(i=0;i<20;i++){  /* 300 ms disconnect */
     828:	01 96       	adiw	r24, 0x01	; 1
     82a:	84 31       	cpi	r24, 0x14	; 20
     82c:	91 05       	cpc	r25, r1
     82e:	c9 f7       	brne	.-14     	; 0x822 <main+0x58>
        _delay_ms(15);
    }
	cbi(PORTB, WHITE_LED);
     830:	c1 98       	cbi	0x18, 1	; 24
	
	sbi(PORTB, YELLOW_LED);
     832:	c1 9a       	sbi	0x18, 1	; 24
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	23 eb       	ldi	r18, 0xB3	; 179
     83a:	31 ef       	ldi	r19, 0xF1	; 241
     83c:	f9 01       	movw	r30, r18
     83e:	31 97       	sbiw	r30, 0x01	; 1
     840:	f1 f7       	brne	.-4      	; 0x83e <main+0x74>
    for(i=0;i<20;i++){  /* 300 ms disconnect */
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	84 31       	cpi	r24, 0x14	; 20
     846:	91 05       	cpc	r25, r1
     848:	c9 f7       	brne	.-14     	; 0x83c <main+0x72>
        _delay_ms(15);
    }
	cbi(PORTB, YELLOW_LED);
     84a:	c1 98       	cbi	0x18, 1	; 24
	
  usbDeviceDisconnect(); // enforce USB re-enumeration, do this while interrupts are disabled!
     84c:	b8 9a       	sbi	0x17, 0	; 23
     84e:	84 ec       	ldi	r24, 0xC4	; 196
     850:	99 e0       	ldi	r25, 0x09	; 9
     852:	2c e9       	ldi	r18, 0x9C	; 156
     854:	31 e0       	ldi	r19, 0x01	; 1
     856:	f9 01       	movw	r30, r18
     858:	31 97       	sbiw	r30, 0x01	; 1
     85a:	f1 f7       	brne	.-4      	; 0x858 <main+0x8e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     85c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     85e:	d9 f7       	brne	.-10     	; 0x856 <main+0x8c>
	_delay_ms(250);
  usbDeviceConnect();
     860:	b8 98       	cbi	0x17, 0	; 23
  
  bitbag_mode = stop_con; // disable bitbang
     862:	84 e0       	ldi	r24, 0x04	; 4
     864:	80 93 bb 00 	sts	0x00BB, r24
  
  usbInit(); // start v-usb
     868:	be d2       	rcall	.+1404   	; 0xde6 <usbInit>
  sei(); // enable interrupts	
     86a:	78 94       	sei
	for(;;){
		// set the report IDs manually
		keyboard_report.report_id = 1;
     86c:	11 e0       	ldi	r17, 0x01	; 1
		mouse_report.report_id = 2;
     86e:	b2 e0       	ldi	r27, 0x02	; 2
     870:	3b 2e       	mov	r3, r27
		
		usbPoll();
		if (bitbag_mode != stop_con){
			bitbagPoll();
			if (bitbag_mode == byte_flag){
				printf ("Bitbang recived = %d \n",bitbag_data);
     872:	a1 e7       	ldi	r26, 0x71	; 113
     874:	6a 2e       	mov	r6, r26
     876:	a0 e0       	ldi	r26, 0x00	; 0
     878:	7a 2e       	mov	r7, r26
	static uchar timerCnt;
	static int8_t bitnum;
	
	
	if(TIFR & (1 << TOV1)){	//This flag is triggered at 60 hz. 
		TIFR = (1 << TOV1); /* clear overflow */
     87a:	f4 e0       	ldi	r31, 0x04	; 4
     87c:	5f 2e       	mov	r5, r31
				bitnum = -1;
				printf("start,");			
			}
			else if (timerCnt >8 && timerCnt <= 10 && bitbag_mode == start_con && bitnum >=8)	//if timer counter is in the stop range and we have recived a start message,
			{																					// and at least 8 bits messages
				bitbag_mode = byte_flag;														//set the byte flag
     87e:	e6 e0       	ldi	r30, 0x06	; 6
     880:	4e 2e       	mov	r4, r30
				printf(",Byte");
     882:	7b e6       	ldi	r23, 0x6B	; 107
     884:	87 2e       	mov	r8, r23
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	97 2e       	mov	r9, r23
				}																	
			}
			else if (timerCnt >6 && timerCnt <= 8 && bitbag_mode == enabled_con)				//if timer counter is in the start range and we have cleard any byte flags.
			{
				bitbag_mode = start_con;														//set the start contution
				bitnum = -1;
     88a:	0f ef       	ldi	r16, 0xFF	; 255
				printf("start,");			
     88c:	64 e6       	ldi	r22, 0x64	; 100
     88e:	a6 2e       	mov	r10, r22
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	b6 2e       	mov	r11, r22
																						
			}
			else if (timerCnt >3 && timerCnt <= 6 && bitbag_mode == start_con)					//if timer counter is in the 1 range and we have recived a start message
			{	
				if(++bitnum <= 8){																//get ready for bit
					sbi(bitbag_data,bitnum);													//set the curent bit
     894:	c1 e0       	ldi	r28, 0x01	; 1
     896:	d0 e0       	ldi	r29, 0x00	; 0
		
		if(clock)					// if the clockbit is pulled down we start counting.
		{
			if(++timerCnt >= 11){  // if no dection is seen in 11 cycels we reset for next message
				timerCnt = 0;
				printf("ov,");
     898:	50 e6       	ldi	r21, 0x60	; 96
     89a:	c5 2e       	mov	r12, r21
     89c:	50 e0       	ldi	r21, 0x00	; 0
     89e:	d5 2e       	mov	r13, r21
static void adcPoll()
{
	if (adcmodepool==1){
    	if(adcPending && !(ADCSRA & (1 << ADSC))){
			adcPending = 0;
			printf ("ADC = %d \n",ADC);
     8a0:	48 e8       	ldi	r20, 0x88	; 136
     8a2:	e4 2e       	mov	r14, r20
     8a4:	40 e0       	ldi	r20, 0x00	; 0
     8a6:	f4 2e       	mov	r15, r20
  
  usbInit(); // start v-usb
  sei(); // enable interrupts	
	for(;;){
		// set the report IDs manually
		keyboard_report.report_id = 1;
     8a8:	10 93 ad 00 	sts	0x00AD, r17
		mouse_report.report_id = 2;
     8ac:	30 92 b3 00 	sts	0x00B3, r3
		if(blink_count == 1){
     8b0:	80 91 a6 00 	lds	r24, 0x00A6
     8b4:	90 91 a7 00 	lds	r25, 0x00A7
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	09 f0       	breq	.+2      	; 0x8be <main+0xf4>
     8bc:	75 c0       	rjmp	.+234    	; 0x9a8 <main+0x1de>
			blink_count = 0;
     8be:	10 92 a7 00 	sts	0x00A7, r1
     8c2:	10 92 a6 00 	sts	0x00A6, r1
//----------------------------------------------------//
int poolcout;
int bootrun = 1;
static void Poll(void)
{
	sbi(PORTB, WHITE_LED);
     8c6:	c1 9a       	sbi	0x18, 1	; 24
	
	if (bootrun){
     8c8:	80 91 93 00 	lds	r24, 0x0093
     8cc:	90 91 94 00 	lds	r25, 0x0094
     8d0:	20 91 bf 00 	lds	r18, 0x00BF
     8d4:	30 91 c0 00 	lds	r19, 0x00C0
     8d8:	89 2b       	or	r24, r25
     8da:	09 f4       	brne	.+2      	; 0x8de <main+0x114>
     8dc:	4e c0       	rjmp	.+156    	; 0x97a <main+0x1b0>
		
		switch (poolcout++)
     8de:	2f 5f       	subi	r18, 0xFF	; 255
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	30 93 c0 00 	sts	0x00C0, r19
     8e6:	20 93 bf 00 	sts	0x00BF, r18
     8ea:	f9 01       	movw	r30, r18
     8ec:	33 97       	sbiw	r30, 0x03	; 3
     8ee:	e8 30       	cpi	r30, 0x08	; 8
     8f0:	f1 05       	cpc	r31, r1
     8f2:	08 f0       	brcs	.+2      	; 0x8f6 <main+0x12c>
     8f4:	58 c0       	rjmp	.+176    	; 0x9a6 <main+0x1dc>
     8f6:	e1 5f       	subi	r30, 0xF1	; 241
     8f8:	ff 4f       	sbci	r31, 0xFF	; 255
     8fa:	09 94       	ijmp
	      {
	         case 2:
				addDigit(0,0);
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	4c df       	rcall	.-360    	; 0x79a <addDigit>
				//addDigit(21,MOD_GUI_RIGHT);
				addDigit(0,0);
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	49 df       	rcall	.-366    	; 0x79a <addDigit>
     908:	4e c0       	rjmp	.+156    	; 0x9a6 <main+0x1dc>
				break;
			case 3:
				puts_P(PSTR("notepad.exe"));
     90a:	88 eb       	ldi	r24, 0xB8	; 184
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	14 c0       	rjmp	.+40     	; 0x938 <main+0x16e>
				break;
			case 4:
				puts_P(PSTR("+--------------------+"));
     910:	81 ea       	ldi	r24, 0xA1	; 161
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	e4 d3       	rcall	.+1992   	; 0x10de <puts_P>
				puts_P(PSTR("| USB Testing Device |"));
     916:	8a e8       	ldi	r24, 0x8A	; 138
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	e1 d3       	rcall	.+1986   	; 0x10de <puts_P>
				puts_P(PSTR("|--------------------|"));
     91c:	83 e7       	ldi	r24, 0x73	; 115
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	de d3       	rcall	.+1980   	; 0x10de <puts_P>
	      		puts_P(PSTR("|  (1) USB Keyboad   |"));
     922:	8c e5       	ldi	r24, 0x5C	; 92
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	db d3       	rcall	.+1974   	; 0x10de <puts_P>
	      		puts_P(PSTR("|--------------------|"));
     928:	85 e4       	ldi	r24, 0x45	; 69
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	d8 d3       	rcall	.+1968   	; 0x10de <puts_P>
	      		puts_P(PSTR("|  (2) USB Mouse     |"));
     92e:	8e e2       	ldi	r24, 0x2E	; 46
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	d5 d3       	rcall	.+1962   	; 0x10de <puts_P>
	      		puts_P(PSTR("+--------------------+"));
     934:	87 e1       	ldi	r24, 0x17	; 23
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	d2 d3       	rcall	.+1956   	; 0x10de <puts_P>
     93a:	35 c0       	rjmp	.+106    	; 0x9a6 <main+0x1dc>
				break;
			case 5:
				puts_P(PSTR("Mouse move x=50 y=0 speed 10"));
     93c:	8a ef       	ldi	r24, 0xFA	; 250
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	ce d3       	rcall	.+1948   	; 0x10de <puts_P>
				mouse_move(50,0,10);
     942:	82 e3       	ldi	r24, 0x32	; 50
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	4a e0       	ldi	r20, 0x0A	; 10
     948:	06 c0       	rjmp	.+12     	; 0x956 <main+0x18c>
				break;
			case 6:
				puts_P(PSTR("Mouse move x=-50 y=20 speed 5"));
     94a:	8c ed       	ldi	r24, 0xDC	; 220
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	c7 d3       	rcall	.+1934   	; 0x10de <puts_P>
				mouse_move(-50,20,5);
     950:	8e ec       	ldi	r24, 0xCE	; 206
     952:	64 e1       	ldi	r22, 0x14	; 20
     954:	45 e0       	ldi	r20, 0x05	; 5
     956:	c5 de       	rcall	.-630    	; 0x6e2 <mouse_move>
     958:	26 c0       	rjmp	.+76     	; 0x9a6 <main+0x1dc>
				break;
			case 7:
				//addDigit(76,20); //ctrl+alt+delt	
				puts_P(PSTR("ADC Meater Mode on"));
     95a:	89 ec       	ldi	r24, 0xC9	; 201
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	bf d3       	rcall	.+1918   	; 0x10de <puts_P>
     960:	19 c0       	rjmp	.+50     	; 0x994 <main+0x1ca>
				adcmodepool=1;
				break;
			case 8:
				puts_P(PSTR("ADC Meater Mode off"));
     962:	85 eb       	ldi	r24, 0xB5	; 181
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	bb d3       	rcall	.+1910   	; 0x10de <puts_P>
				adcmodepool=0;
     968:	10 92 b9 00 	sts	0x00B9, r1
     96c:	1c c0       	rjmp	.+56     	; 0x9a6 <main+0x1dc>
				break;
			case 9:
				puts_P(PSTR("BitBang Mode On"));
     96e:	85 ea       	ldi	r24, 0xA5	; 165
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	b5 d3       	rcall	.+1898   	; 0x10de <puts_P>
				bitbag_mode = enabled_con; //enable bitbang
     974:	10 92 bb 00 	sts	0x00BB, r1
     978:	16 c0       	rjmp	.+44     	; 0x9a6 <main+0x1dc>
				break;
	      }
	}
	else
	{
	      	switch (poolcout++)
     97a:	2f 5f       	subi	r18, 0xFF	; 255
     97c:	3f 4f       	sbci	r19, 0xFF	; 255
     97e:	30 93 c0 00 	sts	0x00C0, r19
     982:	20 93 bf 00 	sts	0x00BF, r18
     986:	21 50       	subi	r18, 0x01	; 1
     988:	30 40       	sbci	r19, 0x00	; 0
     98a:	21 f0       	breq	.+8      	; 0x994 <main+0x1ca>
     98c:	21 30       	cpi	r18, 0x01	; 1
     98e:	31 05       	cpc	r19, r1
     990:	51 f4       	brne	.+20     	; 0x9a6 <main+0x1dc>
     992:	03 c0       	rjmp	.+6      	; 0x99a <main+0x1d0>
	      	{
	      		
	      	case 0:
				//addDigit(76,20); //ctrl+alt+delt	
				adcmodepool =1;
     994:	10 93 b9 00 	sts	0x00B9, r17
     998:	06 c0       	rjmp	.+12     	; 0x9a6 <main+0x1dc>
				break;
			case 1:
				adcmodepool=0;
     99a:	10 92 b9 00 	sts	0x00B9, r1
				poolcout=0;
     99e:	10 92 c0 00 	sts	0x00C0, r1
     9a2:	10 92 bf 00 	sts	0x00BF, r1
				break;
	      }
	}
	

	cbi(PORTB, WHITE_LED);
     9a6:	c1 98       	cbi	0x18, 1	; 24
		if(blink_count == 1){
			blink_count = 0;
			Poll();
		}
		
		inputPoll();
     9a8:	53 de       	rcall	.-858    	; 0x650 <inputPoll>
		
		usbPoll();
     9aa:	4b d2       	rcall	.+1174   	; 0xe42 <usbPoll>
		if (bitbag_mode != stop_con){
     9ac:	20 91 bb 00 	lds	r18, 0x00BB
     9b0:	24 30       	cpi	r18, 0x04	; 4
     9b2:	09 f4       	brne	.+2      	; 0x9b6 <main+0x1ec>
     9b4:	9a c0       	rjmp	.+308    	; 0xaea <main+0x320>
	
	static uchar timerCnt;
	static int8_t bitnum;
	
	
	if(TIFR & (1 << TOV1)){	//This flag is triggered at 60 hz. 
     9b6:	08 b6       	in	r0, 0x38	; 56
     9b8:	02 fe       	sbrs	r0, 2
     9ba:	7c c0       	rjmp	.+248    	; 0xab4 <main+0x2ea>
		TIFR = (1 << TOV1); /* clear overflow */
     9bc:	58 be       	out	0x38, r5	; 56
     9be:	90 91 a9 00 	lds	r25, 0x00A9
		
		if(clock)					// if the clockbit is pulled down we start counting.
     9c2:	b4 99       	sbic	0x16, 4	; 22
     9c4:	14 c0       	rjmp	.+40     	; 0x9ee <main+0x224>
		{
			if(++timerCnt >= 11){  // if no dection is seen in 11 cycels we reset for next message
     9c6:	89 2f       	mov	r24, r25
     9c8:	8f 5f       	subi	r24, 0xFF	; 255
     9ca:	80 93 a9 00 	sts	0x00A9, r24
     9ce:	8b 30       	cpi	r24, 0x0B	; 11
     9d0:	08 f4       	brcc	.+2      	; 0x9d4 <main+0x20a>
     9d2:	70 c0       	rjmp	.+224    	; 0xab4 <main+0x2ea>
				timerCnt = 0;
     9d4:	10 92 a9 00 	sts	0x00A9, r1
				printf("ov,");
     9d8:	00 d0       	rcall	.+0      	; 0x9da <main+0x210>
     9da:	ad b7       	in	r26, 0x3d	; 61
     9dc:	be b7       	in	r27, 0x3e	; 62
     9de:	12 96       	adiw	r26, 0x02	; 2
     9e0:	dc 92       	st	X, r13
     9e2:	ce 92       	st	-X, r12
     9e4:	11 97       	sbiw	r26, 0x01	; 1
     9e6:	63 d3       	rcall	.+1734   	; 0x10ae <printf>
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	63 c0       	rjmp	.+198    	; 0xab4 <main+0x2ea>
			}   
		}
		else if(timerCnt > 0) 																	// if the clockbit is let up we see how lon it has been.
     9ee:	99 23       	and	r25, r25
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <main+0x22a>
     9f2:	60 c0       	rjmp	.+192    	; 0xab4 <main+0x2ea>
		{  		
			if (timerCnt <= 3 && bitbag_mode == start_con)  									//if timer counter is in the 0 range and we have recived a start message
     9f4:	94 30       	cpi	r25, 0x04	; 4
     9f6:	d0 f4       	brcc	.+52     	; 0xa2c <main+0x262>
     9f8:	25 30       	cpi	r18, 0x05	; 5
     9fa:	c1 f4       	brne	.+48     	; 0xa2c <main+0x262>
			{
				if(++bitnum <= 8){																//get ready for bit
     9fc:	80 91 a8 00 	lds	r24, 0x00A8
     a00:	8f 5f       	subi	r24, 0xFF	; 255
     a02:	80 93 a8 00 	sts	0x00A8, r24
     a06:	89 30       	cpi	r24, 0x09	; 9
     a08:	0c f0       	brlt	.+2      	; 0xa0c <main+0x242>
     a0a:	52 c0       	rjmp	.+164    	; 0xab0 <main+0x2e6>
					cbi(bitbag_data,bitnum);													//clear the curent bit
     a0c:	fe 01       	movw	r30, r28
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <main+0x24a>
     a10:	ee 0f       	add	r30, r30
     a12:	ff 1f       	adc	r31, r31
     a14:	8a 95       	dec	r24
     a16:	e2 f7       	brpl	.-8      	; 0xa10 <main+0x246>
     a18:	cf 01       	movw	r24, r30
     a1a:	80 95       	com	r24
     a1c:	20 91 ba 00 	lds	r18, 0x00BA
     a20:	28 23       	and	r18, r24
     a22:	20 93 ba 00 	sts	0x00BA, r18
					printf("0");
     a26:	80 e3       	ldi	r24, 0x30	; 48
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	1a c0       	rjmp	.+52     	; 0xa60 <main+0x296>
				}														
																						
			}
			else if (timerCnt >3 && timerCnt <= 6 && bitbag_mode == start_con)					//if timer counter is in the 1 range and we have recived a start message
     a2c:	89 2f       	mov	r24, r25
     a2e:	84 50       	subi	r24, 0x04	; 4
     a30:	83 30       	cpi	r24, 0x03	; 3
     a32:	c0 f4       	brcc	.+48     	; 0xa64 <main+0x29a>
     a34:	25 30       	cpi	r18, 0x05	; 5
     a36:	b1 f4       	brne	.+44     	; 0xa64 <main+0x29a>
			{	
				if(++bitnum <= 8){																//get ready for bit
     a38:	80 91 a8 00 	lds	r24, 0x00A8
     a3c:	8f 5f       	subi	r24, 0xFF	; 255
     a3e:	80 93 a8 00 	sts	0x00A8, r24
     a42:	89 30       	cpi	r24, 0x09	; 9
     a44:	ac f5       	brge	.+106    	; 0xab0 <main+0x2e6>
					sbi(bitbag_data,bitnum);													//set the curent bit
     a46:	9e 01       	movw	r18, r28
     a48:	02 c0       	rjmp	.+4      	; 0xa4e <main+0x284>
     a4a:	22 0f       	add	r18, r18
     a4c:	33 1f       	adc	r19, r19
     a4e:	8a 95       	dec	r24
     a50:	e2 f7       	brpl	.-8      	; 0xa4a <main+0x280>
     a52:	80 91 ba 00 	lds	r24, 0x00BA
     a56:	82 2b       	or	r24, r18
     a58:	80 93 ba 00 	sts	0x00BA, r24
					printf("1");
     a5c:	81 e3       	ldi	r24, 0x31	; 49
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	38 d3       	rcall	.+1648   	; 0x10d2 <putchar>
     a62:	26 c0       	rjmp	.+76     	; 0xab0 <main+0x2e6>
				}																	
			}
			else if (timerCnt >6 && timerCnt <= 8 && bitbag_mode == enabled_con)				//if timer counter is in the start range and we have cleard any byte flags.
     a64:	89 2f       	mov	r24, r25
     a66:	87 50       	subi	r24, 0x07	; 7
     a68:	82 30       	cpi	r24, 0x02	; 2
     a6a:	78 f4       	brcc	.+30     	; 0xa8a <main+0x2c0>
     a6c:	22 23       	and	r18, r18
     a6e:	69 f4       	brne	.+26     	; 0xa8a <main+0x2c0>
			{
				bitbag_mode = start_con;														//set the start contution
     a70:	85 e0       	ldi	r24, 0x05	; 5
     a72:	80 93 bb 00 	sts	0x00BB, r24
				bitnum = -1;
     a76:	00 93 a8 00 	sts	0x00A8, r16
				printf("start,");			
     a7a:	00 d0       	rcall	.+0      	; 0xa7c <main+0x2b2>
     a7c:	ad b7       	in	r26, 0x3d	; 61
     a7e:	be b7       	in	r27, 0x3e	; 62
     a80:	12 96       	adiw	r26, 0x02	; 2
     a82:	bc 92       	st	X, r11
     a84:	ae 92       	st	-X, r10
     a86:	11 97       	sbiw	r26, 0x01	; 1
     a88:	10 c0       	rjmp	.+32     	; 0xaaa <main+0x2e0>
			}
			else if (timerCnt >8 && timerCnt <= 10 && bitbag_mode == start_con && bitnum >=8)	//if timer counter is in the stop range and we have recived a start message,
     a8a:	99 50       	subi	r25, 0x09	; 9
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	80 f4       	brcc	.+32     	; 0xab0 <main+0x2e6>
     a90:	25 30       	cpi	r18, 0x05	; 5
     a92:	71 f4       	brne	.+28     	; 0xab0 <main+0x2e6>
     a94:	80 91 a8 00 	lds	r24, 0x00A8
     a98:	88 30       	cpi	r24, 0x08	; 8
     a9a:	54 f0       	brlt	.+20     	; 0xab0 <main+0x2e6>
			{																					// and at least 8 bits messages
				bitbag_mode = byte_flag;														//set the byte flag
     a9c:	40 92 bb 00 	sts	0x00BB, r4
				printf(",Byte");
     aa0:	00 d0       	rcall	.+0      	; 0xaa2 <main+0x2d8>
     aa2:	ed b7       	in	r30, 0x3d	; 61
     aa4:	fe b7       	in	r31, 0x3e	; 62
     aa6:	92 82       	std	Z+2, r9	; 0x02
     aa8:	81 82       	std	Z+1, r8	; 0x01
     aaa:	01 d3       	rcall	.+1538   	; 0x10ae <printf>
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
			}
			timerCnt = 0;																		//get ready for next message
     ab0:	10 92 a9 00 	sts	0x00A9, r1
		inputPoll();
		
		usbPoll();
		if (bitbag_mode != stop_con){
			bitbagPoll();
			if (bitbag_mode == byte_flag){
     ab4:	80 91 bb 00 	lds	r24, 0x00BB
     ab8:	86 30       	cpi	r24, 0x06	; 6
     aba:	39 f5       	brne	.+78     	; 0xb0a <main+0x340>
				printf ("Bitbang recived = %d \n",bitbag_data);
     abc:	00 d0       	rcall	.+0      	; 0xabe <main+0x2f4>
     abe:	00 d0       	rcall	.+0      	; 0xac0 <main+0x2f6>
     ac0:	ed b7       	in	r30, 0x3d	; 61
     ac2:	fe b7       	in	r31, 0x3e	; 62
     ac4:	31 96       	adiw	r30, 0x01	; 1
     ac6:	ad b7       	in	r26, 0x3d	; 61
     ac8:	be b7       	in	r27, 0x3e	; 62
     aca:	12 96       	adiw	r26, 0x02	; 2
     acc:	7c 92       	st	X, r7
     ace:	6e 92       	st	-X, r6
     ad0:	11 97       	sbiw	r26, 0x01	; 1
     ad2:	80 91 ba 00 	lds	r24, 0x00BA
     ad6:	82 83       	std	Z+2, r24	; 0x02
     ad8:	13 82       	std	Z+3, r1	; 0x03
     ada:	e9 d2       	rcall	.+1490   	; 0x10ae <printf>
				bitbag_mode=enabled_con;
     adc:	10 92 bb 00 	sts	0x00BB, r1
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	0f 90       	pop	r0
     ae8:	10 c0       	rjmp	.+32     	; 0xb0a <main+0x340>

static void adc_timer_Poll(void)
{
static uchar timerCnt;

    if(TIFR & (1 << TOV1)){	//This flag is triggered at 60 hz.
     aea:	08 b6       	in	r0, 0x38	; 56
     aec:	02 fe       	sbrs	r0, 2
     aee:	0d c0       	rjmp	.+26     	; 0xb0a <main+0x340>
        TIFR = (1 << TOV1); /* clear overflow */
     af0:	28 bf       	out	0x38, r18	; 56
		if(++timerCnt >= 31){		 /* ~ 0.5 second interval */
     af2:	80 91 aa 00 	lds	r24, 0x00AA
     af6:	8f 5f       	subi	r24, 0xFF	; 255
     af8:	80 93 aa 00 	sts	0x00AA, r24
     afc:	8f 31       	cpi	r24, 0x1F	; 31
     afe:	28 f0       	brcs	.+10     	; 0xb0a <main+0x340>
            timerCnt = 0;
     b00:	10 92 aa 00 	sts	0x00AA, r1
			adcPending = 1;
     b04:	10 93 b8 00 	sts	0x00B8, r17
			ADCSRA |= (1 << ADSC);  /* start next conversion */
     b08:	36 9a       	sbi	0x06, 6	; 6
		else
		{
			adc_timer_Poll();
		}
		
		usbPoll();
     b0a:	9b d1       	rcall	.+822    	; 0xe42 <usbPoll>
static uchar    adcPending;
static uint8_t    adcmodepool;

static void adcPoll()
{
	if (adcmodepool==1){
     b0c:	80 91 b9 00 	lds	r24, 0x00B9
     b10:	81 30       	cpi	r24, 0x01	; 1
     b12:	09 f0       	breq	.+2      	; 0xb16 <main+0x34c>
     b14:	c9 ce       	rjmp	.-622    	; 0x8a8 <main+0xde>
    	if(adcPending && !(ADCSRA & (1 << ADSC))){
     b16:	80 91 b8 00 	lds	r24, 0x00B8
     b1a:	88 23       	and	r24, r24
     b1c:	09 f4       	brne	.+2      	; 0xb20 <main+0x356>
     b1e:	c4 ce       	rjmp	.-632    	; 0x8a8 <main+0xde>
     b20:	36 99       	sbic	0x06, 6	; 6
     b22:	c2 ce       	rjmp	.-636    	; 0x8a8 <main+0xde>
			adcPending = 0;
     b24:	10 92 b8 00 	sts	0x00B8, r1
			printf ("ADC = %d \n",ADC);
     b28:	84 b1       	in	r24, 0x04	; 4
     b2a:	95 b1       	in	r25, 0x05	; 5
     b2c:	00 d0       	rcall	.+0      	; 0xb2e <main+0x364>
     b2e:	00 d0       	rcall	.+0      	; 0xb30 <main+0x366>
     b30:	ed b7       	in	r30, 0x3d	; 61
     b32:	fe b7       	in	r31, 0x3e	; 62
     b34:	f2 82       	std	Z+2, r15	; 0x02
     b36:	e1 82       	std	Z+1, r14	; 0x01
     b38:	94 83       	std	Z+4, r25	; 0x04
     b3a:	83 83       	std	Z+3, r24	; 0x03
     b3c:	b8 d2       	rcall	.+1392   	; 0x10ae <printf>
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	b0 ce       	rjmp	.-672    	; 0x8a8 <main+0xde>

00000b48 <ASCII_to_keycode>:
	send_report_once();	
}	

// translates ASCII to appropriate keyboard report, taking into consideration the status of caps lock
void ASCII_to_keycode(uint8_t ascii)
{
     b48:	ef 92       	push	r14
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	98 2f       	mov	r25, r24
	keyboard_report.keycode[0] = 0x00;
	keyboard_report.modifier = 0x00;
     b56:	10 92 ae 00 	sts	0x00AE, r1
	
	// see scancode.doc appendix C
	
	if (ascii >= 'A' && ascii <= 'Z')
     b5a:	81 54       	subi	r24, 0x41	; 65
     b5c:	8a 31       	cpi	r24, 0x1A	; 26
     b5e:	40 f4       	brcc	.+16     	; 0xb70 <ASCII_to_keycode+0x28>
	{
		keyboard_report.keycode[0] = 4 + ascii - 'A'; // set letter
     b60:	9d 53       	subi	r25, 0x3D	; 61
     b62:	90 93 b0 00 	sts	0x00B0, r25
		if (bit_is_set(LED_state, 1)) // if caps is on
     b66:	80 91 ab 00 	lds	r24, 0x00AB
     b6a:	81 fd       	sbrc	r24, 1
     b6c:	24 c1       	rjmp	.+584    	; 0xdb6 <ASCII_to_keycode+0x26e>
     b6e:	0b c0       	rjmp	.+22     	; 0xb86 <ASCII_to_keycode+0x3e>
		else
		{
			keyboard_report.modifier = _BV(1); // hold shift // hold shift
		}
	}
	else if (ascii >= 'a' && ascii <= 'z')
     b70:	89 2f       	mov	r24, r25
     b72:	81 56       	subi	r24, 0x61	; 97
     b74:	8a 31       	cpi	r24, 0x1A	; 26
     b76:	70 f4       	brcc	.+28     	; 0xb94 <ASCII_to_keycode+0x4c>
	{
		keyboard_report.keycode[0] = 4 + ascii - 'a'; // set letter
     b78:	9d 55       	subi	r25, 0x5D	; 93
     b7a:	90 93 b0 00 	sts	0x00B0, r25
		if (bit_is_set(LED_state, 1)) // if caps is on
     b7e:	80 91 ab 00 	lds	r24, 0x00AB
     b82:	81 ff       	sbrs	r24, 1
     b84:	04 c0       	rjmp	.+8      	; 0xb8e <ASCII_to_keycode+0x46>
		{
			keyboard_report.modifier = _BV(1); // hold shift // hold shift
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	80 93 ae 00 	sts	0x00AE, r24
     b8c:	14 c1       	rjmp	.+552    	; 0xdb6 <ASCII_to_keycode+0x26e>
		}
		else
		{
			keyboard_report.modifier = 0x00; // no shift
     b8e:	10 92 ae 00 	sts	0x00AE, r1
     b92:	11 c1       	rjmp	.+546    	; 0xdb6 <ASCII_to_keycode+0x26e>
		}
	}
	else if (ascii >= '0' && ascii <= '9')
     b94:	89 2f       	mov	r24, r25
     b96:	80 53       	subi	r24, 0x30	; 48
     b98:	8a 30       	cpi	r24, 0x0A	; 10
     b9a:	48 f4       	brcc	.+18     	; 0xbae <ASCII_to_keycode+0x66>
	{
		keyboard_report.modifier = 0x00;
     b9c:	10 92 ae 00 	sts	0x00AE, r1
		if (ascii == '0')
     ba0:	90 33       	cpi	r25, 0x30	; 48
     ba2:	09 f4       	brne	.+2      	; 0xba6 <ASCII_to_keycode+0x5e>
     ba4:	aa c0       	rjmp	.+340    	; 0xcfa <ASCII_to_keycode+0x1b2>
		{
			keyboard_report.keycode[0] = 0x27;
		}
		else
		{
			keyboard_report.keycode[0] = 30 + ascii - '1'; 
     ba6:	93 51       	subi	r25, 0x13	; 19
     ba8:	90 93 b0 00 	sts	0x00B0, r25
     bac:	04 c1       	rjmp	.+520    	; 0xdb6 <ASCII_to_keycode+0x26e>
		}
	}
	else
	{
		switch (ascii) // convert ascii to keycode according to documentation
     bae:	9a 33       	cpi	r25, 0x3A	; 58
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <ASCII_to_keycode+0x6c>
     bb2:	c3 c0       	rjmp	.+390    	; 0xd3a <ASCII_to_keycode+0x1f2>
     bb4:	9b 33       	cpi	r25, 0x3B	; 59
     bb6:	d0 f5       	brcc	.+116    	; 0xc2c <ASCII_to_keycode+0xe4>
     bb8:	97 32       	cpi	r25, 0x27	; 39
     bba:	09 f4       	brne	.+2      	; 0xbbe <ASCII_to_keycode+0x76>
     bbc:	c6 c0       	rjmp	.+396    	; 0xd4a <ASCII_to_keycode+0x202>
     bbe:	98 32       	cpi	r25, 0x28	; 40
     bc0:	e0 f4       	brcc	.+56     	; 0xbfa <ASCII_to_keycode+0xb2>
     bc2:	93 32       	cpi	r25, 0x23	; 35
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <ASCII_to_keycode+0x80>
     bc6:	73 c0       	rjmp	.+230    	; 0xcae <ASCII_to_keycode+0x166>
     bc8:	94 32       	cpi	r25, 0x24	; 36
     bca:	80 f4       	brcc	.+32     	; 0xbec <ASCII_to_keycode+0xa4>
     bcc:	91 32       	cpi	r25, 0x21	; 33
     bce:	09 f4       	brne	.+2      	; 0xbd2 <ASCII_to_keycode+0x8a>
     bd0:	62 c0       	rjmp	.+196    	; 0xc96 <ASCII_to_keycode+0x14e>
     bd2:	92 32       	cpi	r25, 0x22	; 34
     bd4:	08 f0       	brcs	.+2      	; 0xbd8 <ASCII_to_keycode+0x90>
     bd6:	b6 c0       	rjmp	.+364    	; 0xd44 <ASCII_to_keycode+0x1fc>
     bd8:	90 32       	cpi	r25, 0x20	; 32
     bda:	09 f4       	brne	.+2      	; 0xbde <ASCII_to_keycode+0x96>
     bdc:	c7 c0       	rjmp	.+398    	; 0xd6c <ASCII_to_keycode+0x224>
     bde:	99 30       	cpi	r25, 0x09	; 9
     be0:	09 f4       	brne	.+2      	; 0xbe4 <ASCII_to_keycode+0x9c>
     be2:	c6 c0       	rjmp	.+396    	; 0xd70 <ASCII_to_keycode+0x228>
     be4:	9a 30       	cpi	r25, 0x0A	; 10
     be6:	09 f0       	breq	.+2      	; 0xbea <ASCII_to_keycode+0xa2>
     be8:	c7 c0       	rjmp	.+398    	; 0xd78 <ASCII_to_keycode+0x230>
     bea:	c4 c0       	rjmp	.+392    	; 0xd74 <ASCII_to_keycode+0x22c>
     bec:	95 32       	cpi	r25, 0x25	; 37
     bee:	09 f4       	brne	.+2      	; 0xbf2 <ASCII_to_keycode+0xaa>
     bf0:	68 c0       	rjmp	.+208    	; 0xcc2 <ASCII_to_keycode+0x17a>
     bf2:	96 32       	cpi	r25, 0x26	; 38
     bf4:	08 f0       	brcs	.+2      	; 0xbf8 <ASCII_to_keycode+0xb0>
     bf6:	6f c0       	rjmp	.+222    	; 0xcd6 <ASCII_to_keycode+0x18e>
     bf8:	5f c0       	rjmp	.+190    	; 0xcb8 <ASCII_to_keycode+0x170>
     bfa:	9b 32       	cpi	r25, 0x2B	; 43
     bfc:	09 f4       	brne	.+2      	; 0xc00 <ASCII_to_keycode+0xb8>
     bfe:	89 c0       	rjmp	.+274    	; 0xd12 <ASCII_to_keycode+0x1ca>
     c00:	9c 32       	cpi	r25, 0x2C	; 44
     c02:	38 f4       	brcc	.+14     	; 0xc12 <ASCII_to_keycode+0xca>
     c04:	99 32       	cpi	r25, 0x29	; 41
     c06:	09 f4       	brne	.+2      	; 0xc0a <ASCII_to_keycode+0xc2>
     c08:	75 c0       	rjmp	.+234    	; 0xcf4 <ASCII_to_keycode+0x1ac>
     c0a:	9a 32       	cpi	r25, 0x2A	; 42
     c0c:	08 f0       	brcs	.+2      	; 0xc10 <ASCII_to_keycode+0xc8>
     c0e:	68 c0       	rjmp	.+208    	; 0xce0 <ASCII_to_keycode+0x198>
     c10:	6c c0       	rjmp	.+216    	; 0xcea <ASCII_to_keycode+0x1a2>
     c12:	9d 32       	cpi	r25, 0x2D	; 45
     c14:	09 f4       	brne	.+2      	; 0xc18 <ASCII_to_keycode+0xd0>
     c16:	7b c0       	rjmp	.+246    	; 0xd0e <ASCII_to_keycode+0x1c6>
     c18:	9d 32       	cpi	r25, 0x2D	; 45
     c1a:	08 f4       	brcc	.+2      	; 0xc1e <ASCII_to_keycode+0xd6>
     c1c:	9b c0       	rjmp	.+310    	; 0xd54 <ASCII_to_keycode+0x20c>
     c1e:	9e 32       	cpi	r25, 0x2E	; 46
     c20:	09 f4       	brne	.+2      	; 0xc24 <ASCII_to_keycode+0xdc>
     c22:	9d c0       	rjmp	.+314    	; 0xd5e <ASCII_to_keycode+0x216>
     c24:	9f 32       	cpi	r25, 0x2F	; 47
     c26:	09 f0       	breq	.+2      	; 0xc2a <ASCII_to_keycode+0xe2>
     c28:	a7 c0       	rjmp	.+334    	; 0xd78 <ASCII_to_keycode+0x230>
     c2a:	9e c0       	rjmp	.+316    	; 0xd68 <ASCII_to_keycode+0x220>
     c2c:	9c 35       	cpi	r25, 0x5C	; 92
     c2e:	09 f4       	brne	.+2      	; 0xc32 <ASCII_to_keycode+0xea>
     c30:	82 c0       	rjmp	.+260    	; 0xd36 <ASCII_to_keycode+0x1ee>
     c32:	9d 35       	cpi	r25, 0x5D	; 93
     c34:	a8 f4       	brcc	.+42     	; 0xc60 <ASCII_to_keycode+0x118>
     c36:	9e 33       	cpi	r25, 0x3E	; 62
     c38:	09 f4       	brne	.+2      	; 0xc3c <ASCII_to_keycode+0xf4>
     c3a:	8e c0       	rjmp	.+284    	; 0xd58 <ASCII_to_keycode+0x210>
     c3c:	9f 33       	cpi	r25, 0x3F	; 63
     c3e:	38 f4       	brcc	.+14     	; 0xc4e <ASCII_to_keycode+0x106>
     c40:	9c 33       	cpi	r25, 0x3C	; 60
     c42:	09 f4       	brne	.+2      	; 0xc46 <ASCII_to_keycode+0xfe>
     c44:	84 c0       	rjmp	.+264    	; 0xd4e <ASCII_to_keycode+0x206>
     c46:	9d 33       	cpi	r25, 0x3D	; 61
     c48:	08 f0       	brcs	.+2      	; 0xc4c <ASCII_to_keycode+0x104>
     c4a:	66 c0       	rjmp	.+204    	; 0xd18 <ASCII_to_keycode+0x1d0>
     c4c:	79 c0       	rjmp	.+242    	; 0xd40 <ASCII_to_keycode+0x1f8>
     c4e:	90 34       	cpi	r25, 0x40	; 64
     c50:	49 f1       	breq	.+82     	; 0xca4 <ASCII_to_keycode+0x15c>
     c52:	90 34       	cpi	r25, 0x40	; 64
     c54:	08 f4       	brcc	.+2      	; 0xc58 <ASCII_to_keycode+0x110>
     c56:	85 c0       	rjmp	.+266    	; 0xd62 <ASCII_to_keycode+0x21a>
     c58:	9b 35       	cpi	r25, 0x5B	; 91
     c5a:	09 f0       	breq	.+2      	; 0xc5e <ASCII_to_keycode+0x116>
     c5c:	8d c0       	rjmp	.+282    	; 0xd78 <ASCII_to_keycode+0x230>
     c5e:	61 c0       	rjmp	.+194    	; 0xd22 <ASCII_to_keycode+0x1da>
     c60:	90 36       	cpi	r25, 0x60	; 96
     c62:	09 f4       	brne	.+2      	; 0xc66 <ASCII_to_keycode+0x11e>
     c64:	4f c0       	rjmp	.+158    	; 0xd04 <ASCII_to_keycode+0x1bc>
     c66:	91 36       	cpi	r25, 0x61	; 97
     c68:	30 f4       	brcc	.+12     	; 0xc76 <ASCII_to_keycode+0x12e>
     c6a:	9e 35       	cpi	r25, 0x5E	; 94
     c6c:	79 f1       	breq	.+94     	; 0xccc <ASCII_to_keycode+0x184>
     c6e:	9f 35       	cpi	r25, 0x5F	; 95
     c70:	08 f0       	brcs	.+2      	; 0xc74 <ASCII_to_keycode+0x12c>
     c72:	4a c0       	rjmp	.+148    	; 0xd08 <ASCII_to_keycode+0x1c0>
     c74:	5b c0       	rjmp	.+182    	; 0xd2c <ASCII_to_keycode+0x1e4>
     c76:	9c 37       	cpi	r25, 0x7C	; 124
     c78:	09 f4       	brne	.+2      	; 0xc7c <ASCII_to_keycode+0x134>
     c7a:	5a c0       	rjmp	.+180    	; 0xd30 <ASCII_to_keycode+0x1e8>
     c7c:	9d 37       	cpi	r25, 0x7D	; 125
     c7e:	20 f4       	brcc	.+8      	; 0xc88 <ASCII_to_keycode+0x140>
     c80:	9b 37       	cpi	r25, 0x7B	; 123
     c82:	09 f0       	breq	.+2      	; 0xc86 <ASCII_to_keycode+0x13e>
     c84:	79 c0       	rjmp	.+242    	; 0xd78 <ASCII_to_keycode+0x230>
     c86:	4a c0       	rjmp	.+148    	; 0xd1c <ASCII_to_keycode+0x1d4>
     c88:	9d 37       	cpi	r25, 0x7D	; 125
     c8a:	09 f4       	brne	.+2      	; 0xc8e <ASCII_to_keycode+0x146>
     c8c:	4c c0       	rjmp	.+152    	; 0xd26 <ASCII_to_keycode+0x1de>
     c8e:	9e 37       	cpi	r25, 0x7E	; 126
     c90:	09 f0       	breq	.+2      	; 0xc94 <ASCII_to_keycode+0x14c>
     c92:	72 c0       	rjmp	.+228    	; 0xd78 <ASCII_to_keycode+0x230>
     c94:	34 c0       	rjmp	.+104    	; 0xcfe <ASCII_to_keycode+0x1b6>
		{
			case '!':
				keyboard_report.modifier = _BV(1); // hold shift
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	80 93 ae 00 	sts	0x00AE, r24
				keyboard_report.keycode[0] = 29 + 1;
     c9c:	8e e1       	ldi	r24, 0x1E	; 30
     c9e:	80 93 b0 00 	sts	0x00B0, r24
     ca2:	89 c0       	rjmp	.+274    	; 0xdb6 <ASCII_to_keycode+0x26e>
				break;
			case '@':
				keyboard_report.modifier = _BV(1); // hold shift
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	80 93 ae 00 	sts	0x00AE, r24
				keyboard_report.keycode[0] = 29 + 2;
     caa:	8f e1       	ldi	r24, 0x1F	; 31
     cac:	f8 cf       	rjmp	.-16     	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case '#':
				keyboard_report.modifier = _BV(1); // hold shift
     cae:	82 e0       	ldi	r24, 0x02	; 2
     cb0:	80 93 ae 00 	sts	0x00AE, r24
				keyboard_report.keycode[0] = 29 + 3;
     cb4:	80 e2       	ldi	r24, 0x20	; 32
     cb6:	f3 cf       	rjmp	.-26     	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case '$':
				keyboard_report.modifier = _BV(1); // hold shift
     cb8:	82 e0       	ldi	r24, 0x02	; 2
     cba:	80 93 ae 00 	sts	0x00AE, r24
				keyboard_report.keycode[0] = 29 + 4;
     cbe:	81 e2       	ldi	r24, 0x21	; 33
     cc0:	ee cf       	rjmp	.-36     	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case '%':
				keyboard_report.modifier = _BV(1); // hold shift
     cc2:	82 e0       	ldi	r24, 0x02	; 2
     cc4:	80 93 ae 00 	sts	0x00AE, r24
				keyboard_report.keycode[0] = 29 + 5;
     cc8:	82 e2       	ldi	r24, 0x22	; 34
     cca:	e9 cf       	rjmp	.-46     	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case '^':
				keyboard_report.modifier = _BV(1); // hold shift
     ccc:	82 e0       	ldi	r24, 0x02	; 2
     cce:	80 93 ae 00 	sts	0x00AE, r24
				keyboard_report.keycode[0] = 29 + 6;
     cd2:	83 e2       	ldi	r24, 0x23	; 35
     cd4:	e4 cf       	rjmp	.-56     	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case '&':
				keyboard_report.modifier = _BV(1); // hold shift
     cd6:	82 e0       	ldi	r24, 0x02	; 2
     cd8:	80 93 ae 00 	sts	0x00AE, r24
				keyboard_report.keycode[0] = 29 + 7;
     cdc:	84 e2       	ldi	r24, 0x24	; 36
     cde:	df cf       	rjmp	.-66     	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case '*':
				keyboard_report.modifier = _BV(1); // hold shift
     ce0:	82 e0       	ldi	r24, 0x02	; 2
     ce2:	80 93 ae 00 	sts	0x00AE, r24
				keyboard_report.keycode[0] = 29 + 8;
     ce6:	85 e2       	ldi	r24, 0x25	; 37
     ce8:	da cf       	rjmp	.-76     	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case '(':
				keyboard_report.modifier = _BV(1); // hold shift
     cea:	82 e0       	ldi	r24, 0x02	; 2
     cec:	80 93 ae 00 	sts	0x00AE, r24
				keyboard_report.keycode[0] = 29 + 9;
     cf0:	86 e2       	ldi	r24, 0x26	; 38
     cf2:	d5 cf       	rjmp	.-86     	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case ')':
				keyboard_report.modifier = _BV(1); // hold shift
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	80 93 ae 00 	sts	0x00AE, r24
				keyboard_report.keycode[0] = 0x27;
     cfa:	87 e2       	ldi	r24, 0x27	; 39
     cfc:	d0 cf       	rjmp	.-96     	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case '~':
				keyboard_report.modifier = _BV(1); // hold shift
     cfe:	82 e0       	ldi	r24, 0x02	; 2
     d00:	80 93 ae 00 	sts	0x00AE, r24
				// fall through
			case '`':
				keyboard_report.keycode[0] = 0x35;
     d04:	85 e3       	ldi	r24, 0x35	; 53
     d06:	cb cf       	rjmp	.-106    	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case '_':
				keyboard_report.modifier = _BV(1); // hold shift
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	80 93 ae 00 	sts	0x00AE, r24
				// fall through
			case '-':
				keyboard_report.keycode[0] = 0x2D;
     d0e:	8d e2       	ldi	r24, 0x2D	; 45
     d10:	c6 cf       	rjmp	.-116    	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case '+':
				keyboard_report.modifier = _BV(1); // hold shift
     d12:	82 e0       	ldi	r24, 0x02	; 2
     d14:	80 93 ae 00 	sts	0x00AE, r24
				// fall through
			case '=':
				keyboard_report.keycode[0] = 0x2E;
     d18:	8e e2       	ldi	r24, 0x2E	; 46
     d1a:	c1 cf       	rjmp	.-126    	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case '{':
				keyboard_report.modifier = _BV(1); // hold shift
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	80 93 ae 00 	sts	0x00AE, r24
				// fall through
			case '[':
				keyboard_report.keycode[0] = 0x2F;
     d22:	8f e2       	ldi	r24, 0x2F	; 47
     d24:	bc cf       	rjmp	.-136    	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case '}':
				keyboard_report.modifier = _BV(1); // hold shift
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	80 93 ae 00 	sts	0x00AE, r24
				// fall through
			case ']':
				keyboard_report.keycode[0] = 0x30;
     d2c:	80 e3       	ldi	r24, 0x30	; 48
     d2e:	b7 cf       	rjmp	.-146    	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case '|':
				keyboard_report.modifier = _BV(1); // hold shift
     d30:	82 e0       	ldi	r24, 0x02	; 2
     d32:	80 93 ae 00 	sts	0x00AE, r24
				// fall through
			case '\\':
				keyboard_report.keycode[0] = 0x31;
     d36:	81 e3       	ldi	r24, 0x31	; 49
     d38:	b2 cf       	rjmp	.-156    	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case ':':
				keyboard_report.modifier = _BV(1); // hold shift
     d3a:	82 e0       	ldi	r24, 0x02	; 2
     d3c:	80 93 ae 00 	sts	0x00AE, r24
				// fall through
			case ';':
				keyboard_report.keycode[0] = 0x33;
     d40:	83 e3       	ldi	r24, 0x33	; 51
     d42:	ad cf       	rjmp	.-166    	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case '"':
				keyboard_report.modifier = _BV(1); // hold shift
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	80 93 ae 00 	sts	0x00AE, r24
				// fall through
			case '\'':
				keyboard_report.keycode[0] = 0x34;
     d4a:	84 e3       	ldi	r24, 0x34	; 52
     d4c:	a8 cf       	rjmp	.-176    	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case '<':
				keyboard_report.modifier = _BV(1); // hold shift
     d4e:	82 e0       	ldi	r24, 0x02	; 2
     d50:	80 93 ae 00 	sts	0x00AE, r24
				// fall through
			case ',':
				keyboard_report.keycode[0] = 0x36;
     d54:	86 e3       	ldi	r24, 0x36	; 54
     d56:	a3 cf       	rjmp	.-186    	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case '>':
				keyboard_report.modifier = _BV(1); // hold shift
     d58:	82 e0       	ldi	r24, 0x02	; 2
     d5a:	80 93 ae 00 	sts	0x00AE, r24
				// fall through
			case '.':
				keyboard_report.keycode[0] = 0x37;
     d5e:	87 e3       	ldi	r24, 0x37	; 55
     d60:	9e cf       	rjmp	.-196    	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case '?':
				keyboard_report.modifier = _BV(1); // hold shift
     d62:	82 e0       	ldi	r24, 0x02	; 2
     d64:	80 93 ae 00 	sts	0x00AE, r24
				// fall through
			case '/':
				keyboard_report.keycode[0] = 0x38;
     d68:	88 e3       	ldi	r24, 0x38	; 56
     d6a:	99 cf       	rjmp	.-206    	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case ' ':
				keyboard_report.keycode[0] = 0x2C;
     d6c:	8c e2       	ldi	r24, 0x2C	; 44
     d6e:	97 cf       	rjmp	.-210    	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case '\t':
				keyboard_report.keycode[0] = 0x2B;
     d70:	8b e2       	ldi	r24, 0x2B	; 43
     d72:	95 cf       	rjmp	.-214    	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			case '\n':
				keyboard_report.keycode[0] = 0x28;
     d74:	88 e2       	ldi	r24, 0x28	; 40
     d76:	93 cf       	rjmp	.-218    	; 0xc9e <ASCII_to_keycode+0x156>
				break;
			default:
				alt_input(ascii);
     d78:	09 2f       	mov	r16, r25
     d7a:	10 e0       	ldi	r17, 0x00	; 0
     	if(digit == 0){
     		keyboard_report.keycode[0] = 98;
			keyboard_report.modifier = (1<<6);
        }else{
			keyboard_report.keycode[0] = 88 + digit;
			keyboard_report.modifier = (1<<6);
     d7c:	90 e4       	ldi	r25, 0x40	; 64
     d7e:	f9 2e       	mov	r15, r25
	uchar   digit;
	do{
    	digit = code % 10;
    	code /= 10;
     	if(digit == 0){
     		keyboard_report.keycode[0] = 98;
     d80:	82 e6       	ldi	r24, 0x62	; 98
     d82:	e8 2e       	mov	r14, r24
}

static void alt_input(int code){
	uchar   digit;
	do{
    	digit = code % 10;
     d84:	c8 01       	movw	r24, r16
     d86:	6a e0       	ldi	r22, 0x0A	; 10
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	65 d4       	rcall	.+2250   	; 0x1656 <__divmodhi4>
     d8c:	28 2f       	mov	r18, r24
    	code /= 10;
     d8e:	c8 01       	movw	r24, r16
     d90:	6a e0       	ldi	r22, 0x0A	; 10
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	60 d4       	rcall	.+2240   	; 0x1656 <__divmodhi4>
     d96:	eb 01       	movw	r28, r22
     d98:	8b 01       	movw	r16, r22
     	if(digit == 0){
     d9a:	22 23       	and	r18, r18
     d9c:	19 f4       	brne	.+6      	; 0xda4 <ASCII_to_keycode+0x25c>
     		keyboard_report.keycode[0] = 98;
     d9e:	e0 92 b0 00 	sts	0x00B0, r14
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <ASCII_to_keycode+0x262>
			keyboard_report.modifier = (1<<6);
        }else{
			keyboard_report.keycode[0] = 88 + digit;
     da4:	28 5a       	subi	r18, 0xA8	; 168
     da6:	20 93 b0 00 	sts	0x00B0, r18
			keyboard_report.modifier = (1<<6);
     daa:	f0 92 ae 00 	sts	0x00AE, r15
        }
        send_report_once();
     dae:	f0 dc       	rcall	.-1568   	; 0x790 <send_report_once>
    }while(code != 0);
     db0:	cd 2b       	or	r28, r29
     db2:	41 f7       	brne	.-48     	; 0xd84 <ASCII_to_keycode+0x23c>
     db4:	01 c0       	rjmp	.+2      	; 0xdb8 <ASCII_to_keycode+0x270>
			default:
				alt_input(ascii);
				return;
		}
	}
	send_report_once();
     db6:	ec dc       	rcall	.-1576   	; 0x790 <send_report_once>
	keyboard_report_reset(); // release keys
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	80 93 ad 00 	sts	0x00AD, r24
     dbe:	10 92 ae 00 	sts	0x00AE, r1
     dc2:	10 92 af 00 	sts	0x00AF, r1
     dc6:	10 92 b0 00 	sts	0x00B0, r1
     dca:	10 92 b1 00 	sts	0x00B1, r1
     dce:	10 92 b2 00 	sts	0x00B2, r1
	send_report_once();
     dd2:	de dc       	rcall	.-1604   	; 0x790 <send_report_once>
}
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	ff 90       	pop	r15
     dde:	ef 90       	pop	r14
     de0:	08 95       	ret

00000de2 <type_out_char>:
}

// stdio's stream will use this funct to type out characters in a string
void type_out_char(uint8_t ascii, FILE *stream)
{
	ASCII_to_keycode(ascii);
     de2:	b2 de       	rcall	.-668    	; 0xb48 <ASCII_to_keycode>
}
     de4:	08 95       	ret

00000de6 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
     de6:	85 b7       	in	r24, 0x35	; 53
     de8:	82 60       	ori	r24, 0x02	; 2
     dea:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
     dec:	8b b7       	in	r24, 0x3b	; 59
     dee:	80 64       	ori	r24, 0x40	; 64
     df0:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     df2:	8b e4       	ldi	r24, 0x4B	; 75
     df4:	80 93 cd 00 	sts	0x00CD, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
     df8:	8a e5       	ldi	r24, 0x5A	; 90
     dfa:	80 93 cc 00 	sts	0x00CC, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
     dfe:	08 95       	ret

00000e00 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
     e00:	1f 93       	push	r17
     e02:	dc 01       	movw	r26, r24
     e04:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
     e06:	80 91 cc 00 	lds	r24, 0x00CC
     e0a:	84 ff       	sbrs	r24, 4
     e0c:	07 c0       	rjmp	.+14     	; 0xe1c <usbSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
     e0e:	80 91 cd 00 	lds	r24, 0x00CD
     e12:	98 e8       	ldi	r25, 0x88	; 136
     e14:	89 27       	eor	r24, r25
     e16:	80 93 cd 00 	sts	0x00CD, r24
     e1a:	03 c0       	rjmp	.+6      	; 0xe22 <usbSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
     e1c:	8a e5       	ldi	r24, 0x5A	; 90
     e1e:	80 93 cc 00 	sts	0x00CC, r24
     e22:	91 2f       	mov	r25, r17
     e24:	ee ec       	ldi	r30, 0xCE	; 206
     e26:	f0 e0       	ldi	r31, 0x00	; 0
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
     e28:	8d 91       	ld	r24, X+
     e2a:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
     e2c:	91 50       	subi	r25, 0x01	; 1
     e2e:	e1 f7       	brne	.-8      	; 0xe28 <usbSetInterrupt+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
     e30:	8e ec       	ldi	r24, 0xCE	; 206
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	61 2f       	mov	r22, r17
     e36:	34 da       	rcall	.-2968   	; 0x2a0 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
     e38:	1c 5f       	subi	r17, 0xFC	; 252
     e3a:	10 93 cc 00 	sts	0x00CC, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
     e3e:	1f 91       	pop	r17
     e40:	08 95       	ret

00000e42 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
     e48:	60 91 dd 00 	lds	r22, 0x00DD
     e4c:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
     e4e:	67 fd       	sbrc	r22, 7
     e50:	c2 c0       	rjmp	.+388    	; 0xfd6 <usbPoll+0x194>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
     e52:	80 91 da 00 	lds	r24, 0x00DA
     e56:	cc e0       	ldi	r28, 0x0C	; 12
     e58:	d0 e0       	ldi	r29, 0x00	; 0
     e5a:	c8 1b       	sub	r28, r24
     e5c:	d1 09       	sbc	r29, r1
     e5e:	cf 51       	subi	r28, 0x1F	; 31
     e60:	df 4f       	sbci	r29, 0xFF	; 255
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
     e62:	80 91 d9 00 	lds	r24, 0x00D9
     e66:	8d 32       	cpi	r24, 0x2D	; 45
     e68:	09 f0       	breq	.+2      	; 0xe6c <usbPoll+0x2a>
     e6a:	a3 c0       	rjmp	.+326    	; 0xfb2 <usbPoll+0x170>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
     e6c:	68 30       	cpi	r22, 0x08	; 8
     e6e:	09 f0       	breq	.+2      	; 0xe72 <usbPoll+0x30>
     e70:	b0 c0       	rjmp	.+352    	; 0xfd2 <usbPoll+0x190>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
     e72:	83 ec       	ldi	r24, 0xC3	; 195
     e74:	80 93 c1 00 	sts	0x00C1, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
     e78:	8a e5       	ldi	r24, 0x5A	; 90
     e7a:	80 93 a4 00 	sts	0x00A4, r24
        usbMsgFlags = 0;
     e7e:	10 92 bc 00 	sts	0x00BC, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
     e82:	88 81       	ld	r24, Y
     e84:	80 76       	andi	r24, 0x60	; 96
     e86:	39 f0       	breq	.+14     	; 0xe96 <usbPoll+0x54>
            replyLen = usbFunctionSetup(data);
     e88:	ce 01       	movw	r24, r28
     e8a:	7f db       	rcall	.-2306   	; 0x58a <usbFunctionSetup>
     e8c:	28 2f       	mov	r18, r24
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
     e8e:	8f 3f       	cpi	r24, 0xFF	; 255
     e90:	09 f4       	brne	.+2      	; 0xe94 <usbPoll+0x52>
     e92:	7e c0       	rjmp	.+252    	; 0xf90 <usbPoll+0x14e>
     e94:	84 c0       	rjmp	.+264    	; 0xf9e <usbPoll+0x15c>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
     e96:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
     e98:	10 92 ca 00 	sts	0x00CA, r1
    SWITCH_START(rq->bRequest)
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
     e9e:	88 23       	and	r24, r24
     ea0:	21 f4       	brne	.+8      	; 0xeaa <usbPoll+0x68>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
     ea2:	10 92 cb 00 	sts	0x00CB, r1
     ea6:	22 e0       	ldi	r18, 0x02	; 2
     ea8:	6c c0       	rjmp	.+216    	; 0xf82 <usbPoll+0x140>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
     eaa:	85 30       	cpi	r24, 0x05	; 5
     eac:	19 f4       	brne	.+6      	; 0xeb4 <usbPoll+0x72>
        usbNewDeviceAddr = value;
     eae:	90 93 de 00 	sts	0x00DE, r25
     eb2:	66 c0       	rjmp	.+204    	; 0xf80 <usbPoll+0x13e>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
     eb4:	86 30       	cpi	r24, 0x06	; 6
     eb6:	09 f0       	breq	.+2      	; 0xeba <usbPoll+0x78>
     eb8:	4f c0       	rjmp	.+158    	; 0xf58 <usbPoll+0x116>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	41 f4       	brne	.+16     	; 0xed0 <usbPoll+0x8e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
     ec0:	8a e0       	ldi	r24, 0x0A	; 10
     ec2:	92 e0       	ldi	r25, 0x02	; 2
     ec4:	90 93 dc 00 	sts	0x00DC, r25
     ec8:	80 93 db 00 	sts	0x00DB, r24
     ecc:	22 e1       	ldi	r18, 0x12	; 18
     ece:	40 c0       	rjmp	.+128    	; 0xf50 <usbPoll+0x10e>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
     ed0:	82 30       	cpi	r24, 0x02	; 2
     ed2:	41 f4       	brne	.+16     	; 0xee4 <usbPoll+0xa2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
     ed4:	8c e1       	ldi	r24, 0x1C	; 28
     ed6:	92 e0       	ldi	r25, 0x02	; 2
     ed8:	90 93 dc 00 	sts	0x00DC, r25
     edc:	80 93 db 00 	sts	0x00DB, r24
     ee0:	22 e2       	ldi	r18, 0x22	; 34
     ee2:	36 c0       	rjmp	.+108    	; 0xf50 <usbPoll+0x10e>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
     ee4:	83 30       	cpi	r24, 0x03	; 3
     ee6:	f9 f4       	brne	.+62     	; 0xf26 <usbPoll+0xe4>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
     eea:	88 23       	and	r24, r24
     eec:	41 f4       	brne	.+16     	; 0xefe <usbPoll+0xbc>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
     eee:	84 ec       	ldi	r24, 0xC4	; 196
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	90 93 dc 00 	sts	0x00DC, r25
     ef6:	80 93 db 00 	sts	0x00DB, r24
     efa:	24 e0       	ldi	r18, 0x04	; 4
     efc:	29 c0       	rjmp	.+82     	; 0xf50 <usbPoll+0x10e>
        SWITCH_CASE(1)
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	41 f4       	brne	.+16     	; 0xf12 <usbPoll+0xd0>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     f02:	88 ec       	ldi	r24, 0xC8	; 200
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	90 93 dc 00 	sts	0x00DC, r25
     f0a:	80 93 db 00 	sts	0x00DB, r24
     f0e:	2c e1       	ldi	r18, 0x1C	; 28
     f10:	1f c0       	rjmp	.+62     	; 0xf50 <usbPoll+0x10e>
        SWITCH_CASE(2)
     f12:	82 30       	cpi	r24, 0x02	; 2
     f14:	e1 f4       	brne	.+56     	; 0xf4e <usbPoll+0x10c>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
     f16:	84 ee       	ldi	r24, 0xE4	; 228
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	90 93 dc 00 	sts	0x00DC, r25
     f1e:	80 93 db 00 	sts	0x00DB, r24
     f22:	26 e2       	ldi	r18, 0x26	; 38
     f24:	15 c0       	rjmp	.+42     	; 0xf50 <usbPoll+0x10e>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
     f26:	81 32       	cpi	r24, 0x21	; 33
     f28:	41 f4       	brne	.+16     	; 0xf3a <usbPoll+0xf8>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
     f2a:	8e e2       	ldi	r24, 0x2E	; 46
     f2c:	92 e0       	ldi	r25, 0x02	; 2
     f2e:	90 93 dc 00 	sts	0x00DC, r25
     f32:	80 93 db 00 	sts	0x00DB, r24
     f36:	29 e0       	ldi	r18, 0x09	; 9
     f38:	0b c0       	rjmp	.+22     	; 0xf50 <usbPoll+0x10e>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
     f3a:	82 32       	cpi	r24, 0x22	; 34
     f3c:	41 f4       	brne	.+16     	; 0xf4e <usbPoll+0x10c>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
     f3e:	8e e2       	ldi	r24, 0x2E	; 46
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	90 93 dc 00 	sts	0x00DC, r25
     f46:	80 93 db 00 	sts	0x00DB, r24
     f4a:	27 e7       	ldi	r18, 0x77	; 119
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <usbPoll+0x10e>
     f4e:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
     f50:	80 e4       	ldi	r24, 0x40	; 64
     f52:	80 93 bc 00 	sts	0x00BC, r24
     f56:	23 c0       	rjmp	.+70     	; 0xf9e <usbPoll+0x15c>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
     f58:	88 30       	cpi	r24, 0x08	; 8
     f5a:	21 f4       	brne	.+8      	; 0xf64 <usbPoll+0x122>
     f5c:	21 e0       	ldi	r18, 0x01	; 1
     f5e:	80 ee       	ldi	r24, 0xE0	; 224
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	11 c0       	rjmp	.+34     	; 0xf86 <usbPoll+0x144>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
     f64:	89 30       	cpi	r24, 0x09	; 9
     f66:	19 f4       	brne	.+6      	; 0xf6e <usbPoll+0x12c>
        usbConfiguration = value;
     f68:	90 93 e0 00 	sts	0x00E0, r25
     f6c:	09 c0       	rjmp	.+18     	; 0xf80 <usbPoll+0x13e>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
     f6e:	8a 30       	cpi	r24, 0x0A	; 10
     f70:	11 f4       	brne	.+4      	; 0xf76 <usbPoll+0x134>
     f72:	21 e0       	ldi	r18, 0x01	; 1
     f74:	06 c0       	rjmp	.+12     	; 0xf82 <usbPoll+0x140>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
     f76:	8b 30       	cpi	r24, 0x0B	; 11
     f78:	19 f4       	brne	.+6      	; 0xf80 <usbPoll+0x13e>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     f7a:	8b e4       	ldi	r24, 0x4B	; 75
     f7c:	80 93 cd 00 	sts	0x00CD, r24
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	8a ec       	ldi	r24, 0xCA	; 202
     f84:	90 e0       	ldi	r25, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
     f86:	90 93 dc 00 	sts	0x00DC, r25
     f8a:	80 93 db 00 	sts	0x00DB, r24
     f8e:	07 c0       	rjmp	.+14     	; 0xf9e <usbPoll+0x15c>
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
     f90:	88 81       	ld	r24, Y
     f92:	87 fd       	sbrc	r24, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
     f94:	2e 81       	ldd	r18, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
     f96:	80 e8       	ldi	r24, 0x80	; 128
     f98:	80 93 bc 00 	sts	0x00BC, r24
     f9c:	06 c0       	rjmp	.+12     	; 0xfaa <usbPoll+0x168>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
     f9e:	8f 81       	ldd	r24, Y+7	; 0x07
     fa0:	88 23       	and	r24, r24
     fa2:	19 f4       	brne	.+6      	; 0xfaa <usbPoll+0x168>
     fa4:	8e 81       	ldd	r24, Y+6	; 0x06
     fa6:	82 17       	cp	r24, r18
     fa8:	08 f0       	brcs	.+2      	; 0xfac <usbPoll+0x16a>
     faa:	82 2f       	mov	r24, r18
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
     fac:	80 93 a5 00 	sts	0x00A5, r24
     fb0:	10 c0       	rjmp	.+32     	; 0xfd2 <usbPoll+0x190>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     fb2:	80 91 bc 00 	lds	r24, 0x00BC
     fb6:	87 ff       	sbrs	r24, 7
     fb8:	0c c0       	rjmp	.+24     	; 0xfd2 <usbPoll+0x190>
            uchar rval = usbFunctionWrite(data, len);
     fba:	ce 01       	movw	r24, r28
     fbc:	2d db       	rcall	.-2470   	; 0x618 <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
     fbe:	8f 3f       	cpi	r24, 0xFF	; 255
     fc0:	21 f4       	brne	.+8      	; 0xfca <usbPoll+0x188>
                usbTxLen = USBPID_STALL;
     fc2:	8e e1       	ldi	r24, 0x1E	; 30
     fc4:	80 93 a4 00 	sts	0x00A4, r24
     fc8:	04 c0       	rjmp	.+8      	; 0xfd2 <usbPoll+0x190>
            }else if(rval != 0){    /* This was the final package */
     fca:	88 23       	and	r24, r24
     fcc:	11 f0       	breq	.+4      	; 0xfd2 <usbPoll+0x190>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
     fce:	10 92 a5 00 	sts	0x00A5, r1
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
     fd2:	10 92 dd 00 	sts	0x00DD, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
     fd6:	80 91 a4 00 	lds	r24, 0x00A4
     fda:	84 ff       	sbrs	r24, 4
     fdc:	58 c0       	rjmp	.+176    	; 0x108e <usbPoll+0x24c>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
     fde:	80 91 a5 00 	lds	r24, 0x00A5
     fe2:	8f 3f       	cpi	r24, 0xFF	; 255
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <usbPoll+0x1a6>
     fe6:	53 c0       	rjmp	.+166    	; 0x108e <usbPoll+0x24c>
     fe8:	18 2f       	mov	r17, r24
     fea:	89 30       	cpi	r24, 0x09	; 9
     fec:	08 f0       	brcs	.+2      	; 0xff0 <usbPoll+0x1ae>
     fee:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
     ff0:	81 1b       	sub	r24, r17
     ff2:	80 93 a5 00 	sts	0x00A5, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
     ff6:	80 91 c1 00 	lds	r24, 0x00C1
     ffa:	98 e8       	ldi	r25, 0x88	; 136
     ffc:	89 27       	eor	r24, r25
     ffe:	80 93 c1 00 	sts	0x00C1, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
    1002:	11 23       	and	r17, r17
    1004:	91 f1       	breq	.+100    	; 0x106a <usbPoll+0x228>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
    1006:	80 91 bc 00 	lds	r24, 0x00BC
    100a:	87 ff       	sbrs	r24, 7
    100c:	08 c0       	rjmp	.+16     	; 0x101e <usbPoll+0x1dc>
            len = usbFunctionRead(data, len);
    100e:	82 ec       	ldi	r24, 0xC2	; 194
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	61 2f       	mov	r22, r17
    1014:	1b db       	rcall	.-2506   	; 0x64c <usbFunctionRead>
    1016:	18 2f       	mov	r17, r24
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
    1018:	89 30       	cpi	r24, 0x09	; 9
    101a:	98 f5       	brcc	.+102    	; 0x1082 <usbPoll+0x240>
    101c:	26 c0       	rjmp	.+76     	; 0x106a <usbPoll+0x228>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
    101e:	20 91 db 00 	lds	r18, 0x00DB
    1022:	30 91 dc 00 	lds	r19, 0x00DC
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
    1026:	86 ff       	sbrs	r24, 6
    1028:	0d c0       	rjmp	.+26     	; 0x1044 <usbPoll+0x202>
    102a:	a2 ec       	ldi	r26, 0xC2	; 194
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
    1032:	f9 01       	movw	r30, r18
    1034:	e8 0f       	add	r30, r24
    1036:	f9 1f       	adc	r31, r25
    1038:	e4 91       	lpm	r30, Z+
                    *data++ = c;
    103a:	ed 93       	st	X+, r30
    103c:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
    103e:	18 17       	cp	r17, r24
    1040:	c1 f7       	brne	.-16     	; 0x1032 <usbPoll+0x1f0>
    1042:	08 c0       	rjmp	.+16     	; 0x1054 <usbPoll+0x212>
    1044:	91 2f       	mov	r25, r17
    1046:	d9 01       	movw	r26, r18
    1048:	e2 ec       	ldi	r30, 0xC2	; 194
    104a:	f0 e0       	ldi	r31, 0x00	; 0
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
    104c:	8d 91       	ld	r24, X+
    104e:	81 93       	st	Z+, r24
                }while(--i);
    1050:	91 50       	subi	r25, 0x01	; 1
    1052:	e1 f7       	brne	.-8      	; 0x104c <usbPoll+0x20a>
    1054:	11 50       	subi	r17, 0x01	; 1
    1056:	81 2f       	mov	r24, r17
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	1f 5f       	subi	r17, 0xFF	; 255
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	82 0f       	add	r24, r18
    1060:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
    1062:	90 93 dc 00 	sts	0x00DC, r25
    1066:	80 93 db 00 	sts	0x00DB, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
    106a:	82 ec       	ldi	r24, 0xC2	; 194
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	61 2f       	mov	r22, r17
    1070:	17 d9       	rcall	.-3538   	; 0x2a0 <usbCrc16Append>
        len += 4;           /* length including sync byte */
    1072:	61 2f       	mov	r22, r17
    1074:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
    1076:	6c 30       	cpi	r22, 0x0C	; 12
    1078:	41 f0       	breq	.+16     	; 0x108a <usbPoll+0x248>
            usbMsgLen = USB_NO_MSG;
    107a:	8f ef       	ldi	r24, 0xFF	; 255
    107c:	80 93 a5 00 	sts	0x00A5, r24
    1080:	04 c0       	rjmp	.+8      	; 0x108a <usbPoll+0x248>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    1082:	8f ef       	ldi	r24, 0xFF	; 255
    1084:	80 93 a5 00 	sts	0x00A5, r24
    1088:	6e e1       	ldi	r22, 0x1E	; 30
    }
    usbTxLen = len;
    108a:	60 93 a4 00 	sts	0x00A4, r22
    108e:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
    1090:	86 b3       	in	r24, 0x16	; 22
        if(usbLineStatus != 0)  /* SE0 has ended */
    1092:	85 70       	andi	r24, 0x05	; 5
    1094:	31 f4       	brne	.+12     	; 0x10a2 <usbPoll+0x260>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
    1096:	91 50       	subi	r25, 0x01	; 1
    1098:	d9 f7       	brne	.-10     	; 0x1090 <usbPoll+0x24e>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
    109a:	10 92 de 00 	sts	0x00DE, r1
    usbDeviceAddr = 0;
    109e:	10 92 d8 00 	sts	0x00D8, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	08 95       	ret

000010aa <exit>:
    10aa:	f8 94       	cli
    10ac:	32 c3       	rjmp	.+1636   	; 0x1712 <_exit>

000010ae <printf>:
    10ae:	a0 e0       	ldi	r26, 0x00	; 0
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	ec e5       	ldi	r30, 0x5C	; 92
    10b4:	f8 e0       	ldi	r31, 0x08	; 8
    10b6:	f2 c2       	rjmp	.+1508   	; 0x169c <__prologue_saves__+0x20>
    10b8:	fe 01       	movw	r30, r28
    10ba:	35 96       	adiw	r30, 0x05	; 5
    10bc:	61 91       	ld	r22, Z+
    10be:	71 91       	ld	r23, Z+
    10c0:	80 91 f9 00 	lds	r24, 0x00F9
    10c4:	90 91 fa 00 	lds	r25, 0x00FA
    10c8:	af 01       	movw	r20, r30
    10ca:	3e d0       	rcall	.+124    	; 0x1148 <vfprintf>
    10cc:	20 96       	adiw	r28, 0x00	; 0
    10ce:	e2 e0       	ldi	r30, 0x02	; 2
    10d0:	01 c3       	rjmp	.+1538   	; 0x16d4 <__epilogue_restores__+0x20>

000010d2 <putchar>:
    10d2:	60 91 f9 00 	lds	r22, 0x00F9
    10d6:	70 91 fa 00 	lds	r23, 0x00FA
    10da:	1f d2       	rcall	.+1086   	; 0x151a <fputc>
    10dc:	08 95       	ret

000010de <puts_P>:
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	ec 01       	movw	r28, r24
    10e8:	e0 91 f9 00 	lds	r30, 0x00F9
    10ec:	f0 91 fa 00 	lds	r31, 0x00FA
    10f0:	83 81       	ldd	r24, Z+3	; 0x03
    10f2:	81 ff       	sbrs	r24, 1
    10f4:	21 c0       	rjmp	.+66     	; 0x1138 <puts_P+0x5a>
    10f6:	00 e0       	ldi	r16, 0x00	; 0
    10f8:	10 e0       	ldi	r17, 0x00	; 0
    10fa:	0e c0       	rjmp	.+28     	; 0x1118 <puts_P+0x3a>
    10fc:	e0 91 f9 00 	lds	r30, 0x00F9
    1100:	f0 91 fa 00 	lds	r31, 0x00FA
    1104:	20 85       	ldd	r18, Z+8	; 0x08
    1106:	31 85       	ldd	r19, Z+9	; 0x09
    1108:	bf 01       	movw	r22, r30
    110a:	f9 01       	movw	r30, r18
    110c:	09 95       	icall
    110e:	89 2b       	or	r24, r25
    1110:	11 f0       	breq	.+4      	; 0x1116 <puts_P+0x38>
    1112:	0f ef       	ldi	r16, 0xFF	; 255
    1114:	1f ef       	ldi	r17, 0xFF	; 255
    1116:	21 96       	adiw	r28, 0x01	; 1
    1118:	fe 01       	movw	r30, r28
    111a:	84 91       	lpm	r24, Z+
    111c:	88 23       	and	r24, r24
    111e:	71 f7       	brne	.-36     	; 0x10fc <puts_P+0x1e>
    1120:	e0 91 f9 00 	lds	r30, 0x00F9
    1124:	f0 91 fa 00 	lds	r31, 0x00FA
    1128:	20 85       	ldd	r18, Z+8	; 0x08
    112a:	31 85       	ldd	r19, Z+9	; 0x09
    112c:	8a e0       	ldi	r24, 0x0A	; 10
    112e:	bf 01       	movw	r22, r30
    1130:	f9 01       	movw	r30, r18
    1132:	09 95       	icall
    1134:	89 2b       	or	r24, r25
    1136:	11 f0       	breq	.+4      	; 0x113c <puts_P+0x5e>
    1138:	0f ef       	ldi	r16, 0xFF	; 255
    113a:	1f ef       	ldi	r17, 0xFF	; 255
    113c:	c8 01       	movw	r24, r16
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	08 95       	ret

00001148 <vfprintf>:
    1148:	ab e0       	ldi	r26, 0x0B	; 11
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e9 ea       	ldi	r30, 0xA9	; 169
    114e:	f8 e0       	ldi	r31, 0x08	; 8
    1150:	95 c2       	rjmp	.+1322   	; 0x167c <__prologue_saves__>
    1152:	4c 01       	movw	r8, r24
    1154:	2b 01       	movw	r4, r22
    1156:	5a 01       	movw	r10, r20
    1158:	fc 01       	movw	r30, r24
    115a:	17 82       	std	Z+7, r1	; 0x07
    115c:	16 82       	std	Z+6, r1	; 0x06
    115e:	83 81       	ldd	r24, Z+3	; 0x03
    1160:	81 fd       	sbrc	r24, 1
    1162:	03 c0       	rjmp	.+6      	; 0x116a <vfprintf+0x22>
    1164:	6f ef       	ldi	r22, 0xFF	; 255
    1166:	7f ef       	ldi	r23, 0xFF	; 255
    1168:	be c1       	rjmp	.+892    	; 0x14e6 <vfprintf+0x39e>
    116a:	1e 01       	movw	r2, r28
    116c:	08 94       	sec
    116e:	21 1c       	adc	r2, r1
    1170:	31 1c       	adc	r3, r1
    1172:	9f e3       	ldi	r25, 0x3F	; 63
    1174:	69 2e       	mov	r6, r25
    1176:	f4 01       	movw	r30, r8
    1178:	33 81       	ldd	r19, Z+3	; 0x03
    117a:	f2 01       	movw	r30, r4
    117c:	33 fd       	sbrc	r19, 3
    117e:	85 91       	lpm	r24, Z+
    1180:	33 ff       	sbrs	r19, 3
    1182:	81 91       	ld	r24, Z+
    1184:	2f 01       	movw	r4, r30
    1186:	88 23       	and	r24, r24
    1188:	09 f4       	brne	.+2      	; 0x118c <vfprintf+0x44>
    118a:	aa c1       	rjmp	.+852    	; 0x14e0 <vfprintf+0x398>
    118c:	85 32       	cpi	r24, 0x25	; 37
    118e:	39 f4       	brne	.+14     	; 0x119e <vfprintf+0x56>
    1190:	33 fd       	sbrc	r19, 3
    1192:	85 91       	lpm	r24, Z+
    1194:	33 ff       	sbrs	r19, 3
    1196:	81 91       	ld	r24, Z+
    1198:	2f 01       	movw	r4, r30
    119a:	85 32       	cpi	r24, 0x25	; 37
    119c:	21 f4       	brne	.+8      	; 0x11a6 <vfprintf+0x5e>
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	b4 01       	movw	r22, r8
    11a2:	bb d1       	rcall	.+886    	; 0x151a <fputc>
    11a4:	e8 cf       	rjmp	.-48     	; 0x1176 <vfprintf+0x2e>
    11a6:	98 2f       	mov	r25, r24
    11a8:	ff 24       	eor	r15, r15
    11aa:	ee 24       	eor	r14, r14
    11ac:	77 24       	eor	r7, r7
    11ae:	ff e1       	ldi	r31, 0x1F	; 31
    11b0:	ff 15       	cp	r31, r15
    11b2:	d0 f0       	brcs	.+52     	; 0x11e8 <vfprintf+0xa0>
    11b4:	9b 32       	cpi	r25, 0x2B	; 43
    11b6:	69 f0       	breq	.+26     	; 0x11d2 <vfprintf+0x8a>
    11b8:	9c 32       	cpi	r25, 0x2C	; 44
    11ba:	28 f4       	brcc	.+10     	; 0x11c6 <vfprintf+0x7e>
    11bc:	90 32       	cpi	r25, 0x20	; 32
    11be:	59 f0       	breq	.+22     	; 0x11d6 <vfprintf+0x8e>
    11c0:	93 32       	cpi	r25, 0x23	; 35
    11c2:	91 f4       	brne	.+36     	; 0x11e8 <vfprintf+0xa0>
    11c4:	0e c0       	rjmp	.+28     	; 0x11e2 <vfprintf+0x9a>
    11c6:	9d 32       	cpi	r25, 0x2D	; 45
    11c8:	49 f0       	breq	.+18     	; 0x11dc <vfprintf+0x94>
    11ca:	90 33       	cpi	r25, 0x30	; 48
    11cc:	69 f4       	brne	.+26     	; 0x11e8 <vfprintf+0xa0>
    11ce:	41 e0       	ldi	r20, 0x01	; 1
    11d0:	2a c0       	rjmp	.+84     	; 0x1226 <vfprintf+0xde>
    11d2:	52 e0       	ldi	r21, 0x02	; 2
    11d4:	f5 2a       	or	r15, r21
    11d6:	84 e0       	ldi	r24, 0x04	; 4
    11d8:	f8 2a       	or	r15, r24
    11da:	2e c0       	rjmp	.+92     	; 0x1238 <vfprintf+0xf0>
    11dc:	98 e0       	ldi	r25, 0x08	; 8
    11de:	f9 2a       	or	r15, r25
    11e0:	2b c0       	rjmp	.+86     	; 0x1238 <vfprintf+0xf0>
    11e2:	e0 e1       	ldi	r30, 0x10	; 16
    11e4:	fe 2a       	or	r15, r30
    11e6:	28 c0       	rjmp	.+80     	; 0x1238 <vfprintf+0xf0>
    11e8:	f7 fc       	sbrc	r15, 7
    11ea:	2f c0       	rjmp	.+94     	; 0x124a <vfprintf+0x102>
    11ec:	29 2f       	mov	r18, r25
    11ee:	20 53       	subi	r18, 0x30	; 48
    11f0:	2a 30       	cpi	r18, 0x0A	; 10
    11f2:	a0 f4       	brcc	.+40     	; 0x121c <vfprintf+0xd4>
    11f4:	f6 fe       	sbrs	r15, 6
    11f6:	08 c0       	rjmp	.+16     	; 0x1208 <vfprintf+0xc0>
    11f8:	87 2d       	mov	r24, r7
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	6a e0       	ldi	r22, 0x0A	; 10
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	18 d2       	rcall	.+1072   	; 0x1632 <__mulhi3>
    1202:	78 2e       	mov	r7, r24
    1204:	72 0e       	add	r7, r18
    1206:	18 c0       	rjmp	.+48     	; 0x1238 <vfprintf+0xf0>
    1208:	8e 2d       	mov	r24, r14
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	6a e0       	ldi	r22, 0x0A	; 10
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	10 d2       	rcall	.+1056   	; 0x1632 <__mulhi3>
    1212:	e8 2e       	mov	r14, r24
    1214:	e2 0e       	add	r14, r18
    1216:	f0 e2       	ldi	r31, 0x20	; 32
    1218:	ff 2a       	or	r15, r31
    121a:	0e c0       	rjmp	.+28     	; 0x1238 <vfprintf+0xf0>
    121c:	9e 32       	cpi	r25, 0x2E	; 46
    121e:	29 f4       	brne	.+10     	; 0x122a <vfprintf+0xe2>
    1220:	f6 fc       	sbrc	r15, 6
    1222:	5e c1       	rjmp	.+700    	; 0x14e0 <vfprintf+0x398>
    1224:	40 e4       	ldi	r20, 0x40	; 64
    1226:	f4 2a       	or	r15, r20
    1228:	07 c0       	rjmp	.+14     	; 0x1238 <vfprintf+0xf0>
    122a:	9c 36       	cpi	r25, 0x6C	; 108
    122c:	19 f4       	brne	.+6      	; 0x1234 <vfprintf+0xec>
    122e:	50 e8       	ldi	r21, 0x80	; 128
    1230:	f5 2a       	or	r15, r21
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <vfprintf+0xf0>
    1234:	98 36       	cpi	r25, 0x68	; 104
    1236:	49 f4       	brne	.+18     	; 0x124a <vfprintf+0x102>
    1238:	f2 01       	movw	r30, r4
    123a:	33 fd       	sbrc	r19, 3
    123c:	95 91       	lpm	r25, Z+
    123e:	33 ff       	sbrs	r19, 3
    1240:	91 91       	ld	r25, Z+
    1242:	2f 01       	movw	r4, r30
    1244:	99 23       	and	r25, r25
    1246:	09 f0       	breq	.+2      	; 0x124a <vfprintf+0x102>
    1248:	b2 cf       	rjmp	.-156    	; 0x11ae <vfprintf+0x66>
    124a:	89 2f       	mov	r24, r25
    124c:	85 54       	subi	r24, 0x45	; 69
    124e:	83 30       	cpi	r24, 0x03	; 3
    1250:	18 f0       	brcs	.+6      	; 0x1258 <vfprintf+0x110>
    1252:	80 52       	subi	r24, 0x20	; 32
    1254:	83 30       	cpi	r24, 0x03	; 3
    1256:	30 f4       	brcc	.+12     	; 0x1264 <vfprintf+0x11c>
    1258:	44 e0       	ldi	r20, 0x04	; 4
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	a4 0e       	add	r10, r20
    125e:	b5 1e       	adc	r11, r21
    1260:	69 82       	std	Y+1, r6	; 0x01
    1262:	0f c0       	rjmp	.+30     	; 0x1282 <vfprintf+0x13a>
    1264:	93 36       	cpi	r25, 0x63	; 99
    1266:	31 f0       	breq	.+12     	; 0x1274 <vfprintf+0x12c>
    1268:	93 37       	cpi	r25, 0x73	; 115
    126a:	79 f0       	breq	.+30     	; 0x128a <vfprintf+0x142>
    126c:	93 35       	cpi	r25, 0x53	; 83
    126e:	09 f0       	breq	.+2      	; 0x1272 <vfprintf+0x12a>
    1270:	52 c0       	rjmp	.+164    	; 0x1316 <vfprintf+0x1ce>
    1272:	1f c0       	rjmp	.+62     	; 0x12b2 <vfprintf+0x16a>
    1274:	f5 01       	movw	r30, r10
    1276:	80 81       	ld	r24, Z
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	42 e0       	ldi	r20, 0x02	; 2
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	a4 0e       	add	r10, r20
    1280:	b5 1e       	adc	r11, r21
    1282:	61 01       	movw	r12, r2
    1284:	01 e0       	ldi	r16, 0x01	; 1
    1286:	10 e0       	ldi	r17, 0x00	; 0
    1288:	11 c0       	rjmp	.+34     	; 0x12ac <vfprintf+0x164>
    128a:	f5 01       	movw	r30, r10
    128c:	c0 80       	ld	r12, Z
    128e:	d1 80       	ldd	r13, Z+1	; 0x01
    1290:	f6 fc       	sbrc	r15, 6
    1292:	03 c0       	rjmp	.+6      	; 0x129a <vfprintf+0x152>
    1294:	6f ef       	ldi	r22, 0xFF	; 255
    1296:	7f ef       	ldi	r23, 0xFF	; 255
    1298:	02 c0       	rjmp	.+4      	; 0x129e <vfprintf+0x156>
    129a:	67 2d       	mov	r22, r7
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	42 e0       	ldi	r20, 0x02	; 2
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	a4 0e       	add	r10, r20
    12a4:	b5 1e       	adc	r11, r21
    12a6:	c6 01       	movw	r24, r12
    12a8:	2d d1       	rcall	.+602    	; 0x1504 <strnlen>
    12aa:	8c 01       	movw	r16, r24
    12ac:	5f e7       	ldi	r21, 0x7F	; 127
    12ae:	f5 22       	and	r15, r21
    12b0:	13 c0       	rjmp	.+38     	; 0x12d8 <vfprintf+0x190>
    12b2:	f5 01       	movw	r30, r10
    12b4:	c0 80       	ld	r12, Z
    12b6:	d1 80       	ldd	r13, Z+1	; 0x01
    12b8:	f6 fc       	sbrc	r15, 6
    12ba:	03 c0       	rjmp	.+6      	; 0x12c2 <vfprintf+0x17a>
    12bc:	6f ef       	ldi	r22, 0xFF	; 255
    12be:	7f ef       	ldi	r23, 0xFF	; 255
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <vfprintf+0x17e>
    12c2:	67 2d       	mov	r22, r7
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	42 e0       	ldi	r20, 0x02	; 2
    12c8:	50 e0       	ldi	r21, 0x00	; 0
    12ca:	a4 0e       	add	r10, r20
    12cc:	b5 1e       	adc	r11, r21
    12ce:	c6 01       	movw	r24, r12
    12d0:	0e d1       	rcall	.+540    	; 0x14ee <strnlen_P>
    12d2:	8c 01       	movw	r16, r24
    12d4:	50 e8       	ldi	r21, 0x80	; 128
    12d6:	f5 2a       	or	r15, r21
    12d8:	f3 fe       	sbrs	r15, 3
    12da:	06 c0       	rjmp	.+12     	; 0x12e8 <vfprintf+0x1a0>
    12dc:	18 c0       	rjmp	.+48     	; 0x130e <vfprintf+0x1c6>
    12de:	80 e2       	ldi	r24, 0x20	; 32
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	b4 01       	movw	r22, r8
    12e4:	1a d1       	rcall	.+564    	; 0x151a <fputc>
    12e6:	ea 94       	dec	r14
    12e8:	8e 2d       	mov	r24, r14
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	08 17       	cp	r16, r24
    12ee:	19 07       	cpc	r17, r25
    12f0:	b0 f3       	brcs	.-20     	; 0x12de <vfprintf+0x196>
    12f2:	0d c0       	rjmp	.+26     	; 0x130e <vfprintf+0x1c6>
    12f4:	f6 01       	movw	r30, r12
    12f6:	f7 fc       	sbrc	r15, 7
    12f8:	85 91       	lpm	r24, Z+
    12fa:	f7 fe       	sbrs	r15, 7
    12fc:	81 91       	ld	r24, Z+
    12fe:	6f 01       	movw	r12, r30
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	b4 01       	movw	r22, r8
    1304:	0a d1       	rcall	.+532    	; 0x151a <fputc>
    1306:	e1 10       	cpse	r14, r1
    1308:	ea 94       	dec	r14
    130a:	01 50       	subi	r16, 0x01	; 1
    130c:	10 40       	sbci	r17, 0x00	; 0
    130e:	01 15       	cp	r16, r1
    1310:	11 05       	cpc	r17, r1
    1312:	81 f7       	brne	.-32     	; 0x12f4 <vfprintf+0x1ac>
    1314:	e2 c0       	rjmp	.+452    	; 0x14da <vfprintf+0x392>
    1316:	94 36       	cpi	r25, 0x64	; 100
    1318:	11 f0       	breq	.+4      	; 0x131e <vfprintf+0x1d6>
    131a:	99 36       	cpi	r25, 0x69	; 105
    131c:	61 f5       	brne	.+88     	; 0x1376 <vfprintf+0x22e>
    131e:	f7 fe       	sbrs	r15, 7
    1320:	08 c0       	rjmp	.+16     	; 0x1332 <vfprintf+0x1ea>
    1322:	f5 01       	movw	r30, r10
    1324:	20 81       	ld	r18, Z
    1326:	31 81       	ldd	r19, Z+1	; 0x01
    1328:	42 81       	ldd	r20, Z+2	; 0x02
    132a:	53 81       	ldd	r21, Z+3	; 0x03
    132c:	84 e0       	ldi	r24, 0x04	; 4
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0a c0       	rjmp	.+20     	; 0x1346 <vfprintf+0x1fe>
    1332:	f5 01       	movw	r30, r10
    1334:	80 81       	ld	r24, Z
    1336:	91 81       	ldd	r25, Z+1	; 0x01
    1338:	9c 01       	movw	r18, r24
    133a:	44 27       	eor	r20, r20
    133c:	37 fd       	sbrc	r19, 7
    133e:	40 95       	com	r20
    1340:	54 2f       	mov	r21, r20
    1342:	82 e0       	ldi	r24, 0x02	; 2
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a8 0e       	add	r10, r24
    1348:	b9 1e       	adc	r11, r25
    134a:	9f e6       	ldi	r25, 0x6F	; 111
    134c:	f9 22       	and	r15, r25
    134e:	57 ff       	sbrs	r21, 7
    1350:	09 c0       	rjmp	.+18     	; 0x1364 <vfprintf+0x21c>
    1352:	50 95       	com	r21
    1354:	40 95       	com	r20
    1356:	30 95       	com	r19
    1358:	21 95       	neg	r18
    135a:	3f 4f       	sbci	r19, 0xFF	; 255
    135c:	4f 4f       	sbci	r20, 0xFF	; 255
    135e:	5f 4f       	sbci	r21, 0xFF	; 255
    1360:	e0 e8       	ldi	r30, 0x80	; 128
    1362:	fe 2a       	or	r15, r30
    1364:	ca 01       	movw	r24, r20
    1366:	b9 01       	movw	r22, r18
    1368:	a1 01       	movw	r20, r2
    136a:	2a e0       	ldi	r18, 0x0A	; 10
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	01 d1       	rcall	.+514    	; 0x1572 <__ultoa_invert>
    1370:	d8 2e       	mov	r13, r24
    1372:	d2 18       	sub	r13, r2
    1374:	3f c0       	rjmp	.+126    	; 0x13f4 <vfprintf+0x2ac>
    1376:	95 37       	cpi	r25, 0x75	; 117
    1378:	29 f4       	brne	.+10     	; 0x1384 <vfprintf+0x23c>
    137a:	1f 2d       	mov	r17, r15
    137c:	1f 7e       	andi	r17, 0xEF	; 239
    137e:	2a e0       	ldi	r18, 0x0A	; 10
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	1d c0       	rjmp	.+58     	; 0x13be <vfprintf+0x276>
    1384:	1f 2d       	mov	r17, r15
    1386:	19 7f       	andi	r17, 0xF9	; 249
    1388:	9f 36       	cpi	r25, 0x6F	; 111
    138a:	61 f0       	breq	.+24     	; 0x13a4 <vfprintf+0x25c>
    138c:	90 37       	cpi	r25, 0x70	; 112
    138e:	20 f4       	brcc	.+8      	; 0x1398 <vfprintf+0x250>
    1390:	98 35       	cpi	r25, 0x58	; 88
    1392:	09 f0       	breq	.+2      	; 0x1396 <vfprintf+0x24e>
    1394:	a5 c0       	rjmp	.+330    	; 0x14e0 <vfprintf+0x398>
    1396:	0f c0       	rjmp	.+30     	; 0x13b6 <vfprintf+0x26e>
    1398:	90 37       	cpi	r25, 0x70	; 112
    139a:	39 f0       	breq	.+14     	; 0x13aa <vfprintf+0x262>
    139c:	98 37       	cpi	r25, 0x78	; 120
    139e:	09 f0       	breq	.+2      	; 0x13a2 <vfprintf+0x25a>
    13a0:	9f c0       	rjmp	.+318    	; 0x14e0 <vfprintf+0x398>
    13a2:	04 c0       	rjmp	.+8      	; 0x13ac <vfprintf+0x264>
    13a4:	28 e0       	ldi	r18, 0x08	; 8
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	0a c0       	rjmp	.+20     	; 0x13be <vfprintf+0x276>
    13aa:	10 61       	ori	r17, 0x10	; 16
    13ac:	14 fd       	sbrc	r17, 4
    13ae:	14 60       	ori	r17, 0x04	; 4
    13b0:	20 e1       	ldi	r18, 0x10	; 16
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	04 c0       	rjmp	.+8      	; 0x13be <vfprintf+0x276>
    13b6:	14 fd       	sbrc	r17, 4
    13b8:	16 60       	ori	r17, 0x06	; 6
    13ba:	20 e1       	ldi	r18, 0x10	; 16
    13bc:	32 e0       	ldi	r19, 0x02	; 2
    13be:	17 ff       	sbrs	r17, 7
    13c0:	08 c0       	rjmp	.+16     	; 0x13d2 <vfprintf+0x28a>
    13c2:	f5 01       	movw	r30, r10
    13c4:	60 81       	ld	r22, Z
    13c6:	71 81       	ldd	r23, Z+1	; 0x01
    13c8:	82 81       	ldd	r24, Z+2	; 0x02
    13ca:	93 81       	ldd	r25, Z+3	; 0x03
    13cc:	44 e0       	ldi	r20, 0x04	; 4
    13ce:	50 e0       	ldi	r21, 0x00	; 0
    13d0:	08 c0       	rjmp	.+16     	; 0x13e2 <vfprintf+0x29a>
    13d2:	f5 01       	movw	r30, r10
    13d4:	80 81       	ld	r24, Z
    13d6:	91 81       	ldd	r25, Z+1	; 0x01
    13d8:	bc 01       	movw	r22, r24
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	42 e0       	ldi	r20, 0x02	; 2
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	a4 0e       	add	r10, r20
    13e4:	b5 1e       	adc	r11, r21
    13e6:	a1 01       	movw	r20, r2
    13e8:	c4 d0       	rcall	.+392    	; 0x1572 <__ultoa_invert>
    13ea:	d8 2e       	mov	r13, r24
    13ec:	d2 18       	sub	r13, r2
    13ee:	8f e7       	ldi	r24, 0x7F	; 127
    13f0:	f8 2e       	mov	r15, r24
    13f2:	f1 22       	and	r15, r17
    13f4:	f6 fe       	sbrs	r15, 6
    13f6:	0b c0       	rjmp	.+22     	; 0x140e <vfprintf+0x2c6>
    13f8:	5e ef       	ldi	r21, 0xFE	; 254
    13fa:	f5 22       	and	r15, r21
    13fc:	d7 14       	cp	r13, r7
    13fe:	38 f4       	brcc	.+14     	; 0x140e <vfprintf+0x2c6>
    1400:	f4 fe       	sbrs	r15, 4
    1402:	07 c0       	rjmp	.+14     	; 0x1412 <vfprintf+0x2ca>
    1404:	f2 fc       	sbrc	r15, 2
    1406:	05 c0       	rjmp	.+10     	; 0x1412 <vfprintf+0x2ca>
    1408:	8f ee       	ldi	r24, 0xEF	; 239
    140a:	f8 22       	and	r15, r24
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <vfprintf+0x2ca>
    140e:	1d 2d       	mov	r17, r13
    1410:	01 c0       	rjmp	.+2      	; 0x1414 <vfprintf+0x2cc>
    1412:	17 2d       	mov	r17, r7
    1414:	f4 fe       	sbrs	r15, 4
    1416:	0d c0       	rjmp	.+26     	; 0x1432 <vfprintf+0x2ea>
    1418:	fe 01       	movw	r30, r28
    141a:	ed 0d       	add	r30, r13
    141c:	f1 1d       	adc	r31, r1
    141e:	80 81       	ld	r24, Z
    1420:	80 33       	cpi	r24, 0x30	; 48
    1422:	19 f4       	brne	.+6      	; 0x142a <vfprintf+0x2e2>
    1424:	99 ee       	ldi	r25, 0xE9	; 233
    1426:	f9 22       	and	r15, r25
    1428:	08 c0       	rjmp	.+16     	; 0x143a <vfprintf+0x2f2>
    142a:	1f 5f       	subi	r17, 0xFF	; 255
    142c:	f2 fe       	sbrs	r15, 2
    142e:	05 c0       	rjmp	.+10     	; 0x143a <vfprintf+0x2f2>
    1430:	03 c0       	rjmp	.+6      	; 0x1438 <vfprintf+0x2f0>
    1432:	8f 2d       	mov	r24, r15
    1434:	86 78       	andi	r24, 0x86	; 134
    1436:	09 f0       	breq	.+2      	; 0x143a <vfprintf+0x2f2>
    1438:	1f 5f       	subi	r17, 0xFF	; 255
    143a:	0f 2d       	mov	r16, r15
    143c:	f3 fc       	sbrc	r15, 3
    143e:	13 c0       	rjmp	.+38     	; 0x1466 <vfprintf+0x31e>
    1440:	f0 fe       	sbrs	r15, 0
    1442:	0e c0       	rjmp	.+28     	; 0x1460 <vfprintf+0x318>
    1444:	1e 15       	cp	r17, r14
    1446:	10 f0       	brcs	.+4      	; 0x144c <vfprintf+0x304>
    1448:	7d 2c       	mov	r7, r13
    144a:	0a c0       	rjmp	.+20     	; 0x1460 <vfprintf+0x318>
    144c:	7d 2c       	mov	r7, r13
    144e:	7e 0c       	add	r7, r14
    1450:	71 1a       	sub	r7, r17
    1452:	1e 2d       	mov	r17, r14
    1454:	05 c0       	rjmp	.+10     	; 0x1460 <vfprintf+0x318>
    1456:	80 e2       	ldi	r24, 0x20	; 32
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	b4 01       	movw	r22, r8
    145c:	5e d0       	rcall	.+188    	; 0x151a <fputc>
    145e:	1f 5f       	subi	r17, 0xFF	; 255
    1460:	1e 15       	cp	r17, r14
    1462:	c8 f3       	brcs	.-14     	; 0x1456 <vfprintf+0x30e>
    1464:	04 c0       	rjmp	.+8      	; 0x146e <vfprintf+0x326>
    1466:	1e 15       	cp	r17, r14
    1468:	10 f4       	brcc	.+4      	; 0x146e <vfprintf+0x326>
    146a:	e1 1a       	sub	r14, r17
    146c:	01 c0       	rjmp	.+2      	; 0x1470 <vfprintf+0x328>
    146e:	ee 24       	eor	r14, r14
    1470:	04 ff       	sbrs	r16, 4
    1472:	0e c0       	rjmp	.+28     	; 0x1490 <vfprintf+0x348>
    1474:	80 e3       	ldi	r24, 0x30	; 48
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	b4 01       	movw	r22, r8
    147a:	4f d0       	rcall	.+158    	; 0x151a <fputc>
    147c:	02 ff       	sbrs	r16, 2
    147e:	1b c0       	rjmp	.+54     	; 0x14b6 <vfprintf+0x36e>
    1480:	01 fd       	sbrc	r16, 1
    1482:	03 c0       	rjmp	.+6      	; 0x148a <vfprintf+0x342>
    1484:	88 e7       	ldi	r24, 0x78	; 120
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e c0       	rjmp	.+28     	; 0x14a6 <vfprintf+0x35e>
    148a:	88 e5       	ldi	r24, 0x58	; 88
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	0b c0       	rjmp	.+22     	; 0x14a6 <vfprintf+0x35e>
    1490:	80 2f       	mov	r24, r16
    1492:	86 78       	andi	r24, 0x86	; 134
    1494:	81 f0       	breq	.+32     	; 0x14b6 <vfprintf+0x36e>
    1496:	01 ff       	sbrs	r16, 1
    1498:	02 c0       	rjmp	.+4      	; 0x149e <vfprintf+0x356>
    149a:	8b e2       	ldi	r24, 0x2B	; 43
    149c:	01 c0       	rjmp	.+2      	; 0x14a0 <vfprintf+0x358>
    149e:	80 e2       	ldi	r24, 0x20	; 32
    14a0:	f7 fc       	sbrc	r15, 7
    14a2:	8d e2       	ldi	r24, 0x2D	; 45
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	b4 01       	movw	r22, r8
    14a8:	38 d0       	rcall	.+112    	; 0x151a <fputc>
    14aa:	05 c0       	rjmp	.+10     	; 0x14b6 <vfprintf+0x36e>
    14ac:	80 e3       	ldi	r24, 0x30	; 48
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	b4 01       	movw	r22, r8
    14b2:	33 d0       	rcall	.+102    	; 0x151a <fputc>
    14b4:	7a 94       	dec	r7
    14b6:	d7 14       	cp	r13, r7
    14b8:	c8 f3       	brcs	.-14     	; 0x14ac <vfprintf+0x364>
    14ba:	da 94       	dec	r13
    14bc:	f1 01       	movw	r30, r2
    14be:	ed 0d       	add	r30, r13
    14c0:	f1 1d       	adc	r31, r1
    14c2:	80 81       	ld	r24, Z
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	b4 01       	movw	r22, r8
    14c8:	28 d0       	rcall	.+80     	; 0x151a <fputc>
    14ca:	dd 20       	and	r13, r13
    14cc:	b1 f7       	brne	.-20     	; 0x14ba <vfprintf+0x372>
    14ce:	05 c0       	rjmp	.+10     	; 0x14da <vfprintf+0x392>
    14d0:	80 e2       	ldi	r24, 0x20	; 32
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	b4 01       	movw	r22, r8
    14d6:	21 d0       	rcall	.+66     	; 0x151a <fputc>
    14d8:	ea 94       	dec	r14
    14da:	ee 20       	and	r14, r14
    14dc:	c9 f7       	brne	.-14     	; 0x14d0 <vfprintf+0x388>
    14de:	4b ce       	rjmp	.-874    	; 0x1176 <vfprintf+0x2e>
    14e0:	f4 01       	movw	r30, r8
    14e2:	66 81       	ldd	r22, Z+6	; 0x06
    14e4:	77 81       	ldd	r23, Z+7	; 0x07
    14e6:	cb 01       	movw	r24, r22
    14e8:	2b 96       	adiw	r28, 0x0b	; 11
    14ea:	e2 e1       	ldi	r30, 0x12	; 18
    14ec:	e3 c0       	rjmp	.+454    	; 0x16b4 <__epilogue_restores__>

000014ee <strnlen_P>:
    14ee:	fc 01       	movw	r30, r24
    14f0:	05 90       	lpm	r0, Z+
    14f2:	61 50       	subi	r22, 0x01	; 1
    14f4:	70 40       	sbci	r23, 0x00	; 0
    14f6:	01 10       	cpse	r0, r1
    14f8:	d8 f7       	brcc	.-10     	; 0x14f0 <strnlen_P+0x2>
    14fa:	80 95       	com	r24
    14fc:	90 95       	com	r25
    14fe:	8e 0f       	add	r24, r30
    1500:	9f 1f       	adc	r25, r31
    1502:	08 95       	ret

00001504 <strnlen>:
    1504:	fc 01       	movw	r30, r24
    1506:	61 50       	subi	r22, 0x01	; 1
    1508:	70 40       	sbci	r23, 0x00	; 0
    150a:	01 90       	ld	r0, Z+
    150c:	01 10       	cpse	r0, r1
    150e:	d8 f7       	brcc	.-10     	; 0x1506 <strnlen+0x2>
    1510:	80 95       	com	r24
    1512:	90 95       	com	r25
    1514:	8e 0f       	add	r24, r30
    1516:	9f 1f       	adc	r25, r31
    1518:	08 95       	ret

0000151a <fputc>:
    151a:	0f 93       	push	r16
    151c:	1f 93       	push	r17
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	8c 01       	movw	r16, r24
    1524:	eb 01       	movw	r28, r22
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	81 ff       	sbrs	r24, 1
    152a:	1b c0       	rjmp	.+54     	; 0x1562 <fputc+0x48>
    152c:	82 ff       	sbrs	r24, 2
    152e:	0d c0       	rjmp	.+26     	; 0x154a <fputc+0x30>
    1530:	2e 81       	ldd	r18, Y+6	; 0x06
    1532:	3f 81       	ldd	r19, Y+7	; 0x07
    1534:	8c 81       	ldd	r24, Y+4	; 0x04
    1536:	9d 81       	ldd	r25, Y+5	; 0x05
    1538:	28 17       	cp	r18, r24
    153a:	39 07       	cpc	r19, r25
    153c:	64 f4       	brge	.+24     	; 0x1556 <fputc+0x3c>
    153e:	e8 81       	ld	r30, Y
    1540:	f9 81       	ldd	r31, Y+1	; 0x01
    1542:	01 93       	st	Z+, r16
    1544:	f9 83       	std	Y+1, r31	; 0x01
    1546:	e8 83       	st	Y, r30
    1548:	06 c0       	rjmp	.+12     	; 0x1556 <fputc+0x3c>
    154a:	e8 85       	ldd	r30, Y+8	; 0x08
    154c:	f9 85       	ldd	r31, Y+9	; 0x09
    154e:	80 2f       	mov	r24, r16
    1550:	09 95       	icall
    1552:	89 2b       	or	r24, r25
    1554:	31 f4       	brne	.+12     	; 0x1562 <fputc+0x48>
    1556:	8e 81       	ldd	r24, Y+6	; 0x06
    1558:	9f 81       	ldd	r25, Y+7	; 0x07
    155a:	01 96       	adiw	r24, 0x01	; 1
    155c:	9f 83       	std	Y+7, r25	; 0x07
    155e:	8e 83       	std	Y+6, r24	; 0x06
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <fputc+0x4c>
    1562:	0f ef       	ldi	r16, 0xFF	; 255
    1564:	1f ef       	ldi	r17, 0xFF	; 255
    1566:	c8 01       	movw	r24, r16
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	08 95       	ret

00001572 <__ultoa_invert>:
    1572:	fa 01       	movw	r30, r20
    1574:	aa 27       	eor	r26, r26
    1576:	28 30       	cpi	r18, 0x08	; 8
    1578:	61 f1       	breq	.+88     	; 0x15d2 <__ultoa_invert+0x60>
    157a:	20 31       	cpi	r18, 0x10	; 16
    157c:	91 f1       	breq	.+100    	; 0x15e2 <__ultoa_invert+0x70>
    157e:	e8 94       	clt
    1580:	6f 93       	push	r22
    1582:	6e 7f       	andi	r22, 0xFE	; 254
    1584:	6e 5f       	subi	r22, 0xFE	; 254
    1586:	7f 4f       	sbci	r23, 0xFF	; 255
    1588:	8f 4f       	sbci	r24, 0xFF	; 255
    158a:	9f 4f       	sbci	r25, 0xFF	; 255
    158c:	af 4f       	sbci	r26, 0xFF	; 255
    158e:	b1 e0       	ldi	r27, 0x01	; 1
    1590:	40 d0       	rcall	.+128    	; 0x1612 <__ultoa_invert+0xa0>
    1592:	b4 e0       	ldi	r27, 0x04	; 4
    1594:	3e d0       	rcall	.+124    	; 0x1612 <__ultoa_invert+0xa0>
    1596:	67 0f       	add	r22, r23
    1598:	78 1f       	adc	r23, r24
    159a:	89 1f       	adc	r24, r25
    159c:	9a 1f       	adc	r25, r26
    159e:	a1 1d       	adc	r26, r1
    15a0:	68 0f       	add	r22, r24
    15a2:	79 1f       	adc	r23, r25
    15a4:	8a 1f       	adc	r24, r26
    15a6:	91 1d       	adc	r25, r1
    15a8:	a1 1d       	adc	r26, r1
    15aa:	6a 0f       	add	r22, r26
    15ac:	71 1d       	adc	r23, r1
    15ae:	81 1d       	adc	r24, r1
    15b0:	91 1d       	adc	r25, r1
    15b2:	a1 1d       	adc	r26, r1
    15b4:	22 d0       	rcall	.+68     	; 0x15fa <__ultoa_invert+0x88>
    15b6:	09 f4       	brne	.+2      	; 0x15ba <__ultoa_invert+0x48>
    15b8:	68 94       	set
    15ba:	3f 91       	pop	r19
    15bc:	06 2e       	mov	r0, r22
    15be:	00 0c       	add	r0, r0
    15c0:	30 19       	sub	r19, r0
    15c2:	00 0c       	add	r0, r0
    15c4:	00 0c       	add	r0, r0
    15c6:	30 19       	sub	r19, r0
    15c8:	30 5d       	subi	r19, 0xD0	; 208
    15ca:	31 93       	st	Z+, r19
    15cc:	ce f6       	brtc	.-78     	; 0x1580 <__ultoa_invert+0xe>
    15ce:	cf 01       	movw	r24, r30
    15d0:	08 95       	ret
    15d2:	46 2f       	mov	r20, r22
    15d4:	47 70       	andi	r20, 0x07	; 7
    15d6:	40 5d       	subi	r20, 0xD0	; 208
    15d8:	41 93       	st	Z+, r20
    15da:	b3 e0       	ldi	r27, 0x03	; 3
    15dc:	0f d0       	rcall	.+30     	; 0x15fc <__ultoa_invert+0x8a>
    15de:	c9 f7       	brne	.-14     	; 0x15d2 <__ultoa_invert+0x60>
    15e0:	f6 cf       	rjmp	.-20     	; 0x15ce <__ultoa_invert+0x5c>
    15e2:	46 2f       	mov	r20, r22
    15e4:	4f 70       	andi	r20, 0x0F	; 15
    15e6:	40 5d       	subi	r20, 0xD0	; 208
    15e8:	4a 33       	cpi	r20, 0x3A	; 58
    15ea:	18 f0       	brcs	.+6      	; 0x15f2 <__ultoa_invert+0x80>
    15ec:	49 5d       	subi	r20, 0xD9	; 217
    15ee:	31 fd       	sbrc	r19, 1
    15f0:	40 52       	subi	r20, 0x20	; 32
    15f2:	41 93       	st	Z+, r20
    15f4:	02 d0       	rcall	.+4      	; 0x15fa <__ultoa_invert+0x88>
    15f6:	a9 f7       	brne	.-22     	; 0x15e2 <__ultoa_invert+0x70>
    15f8:	ea cf       	rjmp	.-44     	; 0x15ce <__ultoa_invert+0x5c>
    15fa:	b4 e0       	ldi	r27, 0x04	; 4
    15fc:	a6 95       	lsr	r26
    15fe:	97 95       	ror	r25
    1600:	87 95       	ror	r24
    1602:	77 95       	ror	r23
    1604:	67 95       	ror	r22
    1606:	ba 95       	dec	r27
    1608:	c9 f7       	brne	.-14     	; 0x15fc <__ultoa_invert+0x8a>
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	61 05       	cpc	r22, r1
    160e:	71 05       	cpc	r23, r1
    1610:	08 95       	ret
    1612:	9b 01       	movw	r18, r22
    1614:	ac 01       	movw	r20, r24
    1616:	0a 2e       	mov	r0, r26
    1618:	06 94       	lsr	r0
    161a:	57 95       	ror	r21
    161c:	47 95       	ror	r20
    161e:	37 95       	ror	r19
    1620:	27 95       	ror	r18
    1622:	ba 95       	dec	r27
    1624:	c9 f7       	brne	.-14     	; 0x1618 <__ultoa_invert+0xa6>
    1626:	62 0f       	add	r22, r18
    1628:	73 1f       	adc	r23, r19
    162a:	84 1f       	adc	r24, r20
    162c:	95 1f       	adc	r25, r21
    162e:	a0 1d       	adc	r26, r0
    1630:	08 95       	ret

00001632 <__mulhi3>:
    1632:	55 27       	eor	r21, r21
    1634:	00 24       	eor	r0, r0

00001636 <__mulhi3_loop>:
    1636:	80 ff       	sbrs	r24, 0
    1638:	02 c0       	rjmp	.+4      	; 0x163e <__mulhi3_skip1>
    163a:	06 0e       	add	r0, r22
    163c:	57 1f       	adc	r21, r23

0000163e <__mulhi3_skip1>:
    163e:	66 0f       	add	r22, r22
    1640:	77 1f       	adc	r23, r23
    1642:	61 15       	cp	r22, r1
    1644:	71 05       	cpc	r23, r1
    1646:	21 f0       	breq	.+8      	; 0x1650 <__mulhi3_exit>
    1648:	96 95       	lsr	r25
    164a:	87 95       	ror	r24
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	99 f7       	brne	.-26     	; 0x1636 <__mulhi3_loop>

00001650 <__mulhi3_exit>:
    1650:	95 2f       	mov	r25, r21
    1652:	80 2d       	mov	r24, r0
    1654:	08 95       	ret

00001656 <__divmodhi4>:
    1656:	97 fb       	bst	r25, 7
    1658:	09 2e       	mov	r0, r25
    165a:	07 26       	eor	r0, r23
    165c:	0a d0       	rcall	.+20     	; 0x1672 <__divmodhi4_neg1>
    165e:	77 fd       	sbrc	r23, 7
    1660:	04 d0       	rcall	.+8      	; 0x166a <__divmodhi4_neg2>
    1662:	43 d0       	rcall	.+134    	; 0x16ea <__udivmodhi4>
    1664:	06 d0       	rcall	.+12     	; 0x1672 <__divmodhi4_neg1>
    1666:	00 20       	and	r0, r0
    1668:	1a f4       	brpl	.+6      	; 0x1670 <__divmodhi4_exit>

0000166a <__divmodhi4_neg2>:
    166a:	70 95       	com	r23
    166c:	61 95       	neg	r22
    166e:	7f 4f       	sbci	r23, 0xFF	; 255

00001670 <__divmodhi4_exit>:
    1670:	08 95       	ret

00001672 <__divmodhi4_neg1>:
    1672:	f6 f7       	brtc	.-4      	; 0x1670 <__divmodhi4_exit>
    1674:	90 95       	com	r25
    1676:	81 95       	neg	r24
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	08 95       	ret

0000167c <__prologue_saves__>:
    167c:	2f 92       	push	r2
    167e:	3f 92       	push	r3
    1680:	4f 92       	push	r4
    1682:	5f 92       	push	r5
    1684:	6f 92       	push	r6
    1686:	7f 92       	push	r7
    1688:	8f 92       	push	r8
    168a:	9f 92       	push	r9
    168c:	af 92       	push	r10
    168e:	bf 92       	push	r11
    1690:	cf 92       	push	r12
    1692:	df 92       	push	r13
    1694:	ef 92       	push	r14
    1696:	ff 92       	push	r15
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	ca 1b       	sub	r28, r26
    16a6:	db 0b       	sbc	r29, r27
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	09 94       	ijmp

000016b4 <__epilogue_restores__>:
    16b4:	2a 88       	ldd	r2, Y+18	; 0x12
    16b6:	39 88       	ldd	r3, Y+17	; 0x11
    16b8:	48 88       	ldd	r4, Y+16	; 0x10
    16ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    16bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    16be:	7d 84       	ldd	r7, Y+13	; 0x0d
    16c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    16c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    16c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    16c6:	b9 84       	ldd	r11, Y+9	; 0x09
    16c8:	c8 84       	ldd	r12, Y+8	; 0x08
    16ca:	df 80       	ldd	r13, Y+7	; 0x07
    16cc:	ee 80       	ldd	r14, Y+6	; 0x06
    16ce:	fd 80       	ldd	r15, Y+5	; 0x05
    16d0:	0c 81       	ldd	r16, Y+4	; 0x04
    16d2:	1b 81       	ldd	r17, Y+3	; 0x03
    16d4:	aa 81       	ldd	r26, Y+2	; 0x02
    16d6:	b9 81       	ldd	r27, Y+1	; 0x01
    16d8:	ce 0f       	add	r28, r30
    16da:	d1 1d       	adc	r29, r1
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	ed 01       	movw	r28, r26
    16e8:	08 95       	ret

000016ea <__udivmodhi4>:
    16ea:	aa 1b       	sub	r26, r26
    16ec:	bb 1b       	sub	r27, r27
    16ee:	51 e1       	ldi	r21, 0x11	; 17
    16f0:	07 c0       	rjmp	.+14     	; 0x1700 <__udivmodhi4_ep>

000016f2 <__udivmodhi4_loop>:
    16f2:	aa 1f       	adc	r26, r26
    16f4:	bb 1f       	adc	r27, r27
    16f6:	a6 17       	cp	r26, r22
    16f8:	b7 07       	cpc	r27, r23
    16fa:	10 f0       	brcs	.+4      	; 0x1700 <__udivmodhi4_ep>
    16fc:	a6 1b       	sub	r26, r22
    16fe:	b7 0b       	sbc	r27, r23

00001700 <__udivmodhi4_ep>:
    1700:	88 1f       	adc	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	5a 95       	dec	r21
    1706:	a9 f7       	brne	.-22     	; 0x16f2 <__udivmodhi4_loop>
    1708:	80 95       	com	r24
    170a:	90 95       	com	r25
    170c:	bc 01       	movw	r22, r24
    170e:	cd 01       	movw	r24, r26
    1710:	08 95       	ret

00001712 <_exit>:
    1712:	f8 94       	cli

00001714 <__stop_program>:
    1714:	ff cf       	rjmp	.-2      	; 0x1714 <__stop_program>
