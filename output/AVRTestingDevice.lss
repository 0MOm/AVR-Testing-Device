
output/AVRTestingDevice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000016d0  00001764  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000059  0080007e  0080007e  00001782  2**0
                  ALLOC
  3 .debug_aranges 000000d0  00000000  00000000  00001788  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002d7  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000148a  00000000  00000000  00001b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000622  00000000  00000000  00002fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000100e  00000000  00000000  000035db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  000045ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000697  00000000  00000000  0000470c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000706  00000000  00000000  00004da3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  000054a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}



void    usbEventResetReady(void)
{
       0:	27 c1       	rjmp	.+590    	; 0x250 <__ctors_end>
       2:	6e c1       	rjmp	.+732    	; 0x2e0 <__vector_1>
       4:	40 c1       	rjmp	.+640    	; 0x286 <__bad_interrupt>
       6:	3f c1       	rjmp	.+638    	; 0x286 <__bad_interrupt>
       8:	3e c1       	rjmp	.+636    	; 0x286 <__bad_interrupt>
       a:	3d c1       	rjmp	.+634    	; 0x286 <__bad_interrupt>
       c:	3c c1       	rjmp	.+632    	; 0x286 <__bad_interrupt>
       e:	3b c1       	rjmp	.+630    	; 0x286 <__bad_interrupt>
      10:	3a c1       	rjmp	.+628    	; 0x286 <__bad_interrupt>
      12:	39 c1       	rjmp	.+626    	; 0x286 <__bad_interrupt>
      14:	38 c1       	rjmp	.+624    	; 0x286 <__bad_interrupt>
      16:	37 c1       	rjmp	.+622    	; 0x286 <__bad_interrupt>
      18:	36 c1       	rjmp	.+620    	; 0x286 <__bad_interrupt>
      1a:	35 c1       	rjmp	.+618    	; 0x286 <__bad_interrupt>
      1c:	34 c1       	rjmp	.+616    	; 0x286 <__bad_interrupt>

0000001e <usbDescriptorHidReport>:
      1e:	05 01 09 06 a1 01 85 01 05 07 19 e0 29 e7 15 00     ............)...
      2e:	25 01 75 01 95 08 81 02 95 01 75 08 81 03 95 03     %.u.......u.....
      3e:	75 08 15 00 25 65 05 07 19 00 29 65 81 00 95 05     u...%e....)e....
      4e:	75 01 05 08 19 01 29 05 91 02 95 01 75 03 91 03     u.....).....u...
      5e:	c0 05 01 09 02 a1 01 09 01 a1 00 85 02 05 09 19     ................
      6e:	01 29 03 15 00 25 01 95 03 75 01 81 02 95 01 75     .)...%...u.....u
      7e:	05 81 03 05 01 09 30 09 31 09 38 15 81 25 7f 75     ......0.1.8..%.u
      8e:	08 95 03 81 06 c0 c0                                .......

00000095 <__c.2061>:
      95:	42 69 74 42 61 6e 67 20 4d 6f 64 65 20 4f 6e 00     BitBang Mode On.

000000a5 <__c.2058>:
      a5:	41 44 43 20 4d 65 61 74 65 72 20 4d 6f 64 65 20     ADC Meater Mode 
      b5:	6f 66 66 00                                         off.

000000b9 <__c.2055>:
      b9:	41 44 43 20 4d 65 61 74 65 72 20 4d 6f 64 65 20     ADC Meater Mode 
      c9:	6f 6e 00                                            on.

000000cc <__c.2052>:
      cc:	4d 6f 75 73 65 20 6d 6f 76 65 20 78 3d 2d 35 30     Mouse move x=-50
      dc:	20 79 3d 32 30 20 73 70 65 65 64 20 35 00            y=20 speed 5.

000000ea <__c.2049>:
      ea:	4d 6f 75 73 65 20 6d 6f 76 65 20 78 3d 35 30 20     Mouse move x=50 
      fa:	79 3d 30 20 73 70 65 65 64 20 31 30 00              y=0 speed 10.

00000107 <__c.2046>:
     107:	2b 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     +---------------
     117:	2d 2d 2d 2d 2d 2b 00                                -----+.

0000011e <__c.2044>:
     11e:	7c 20 4e 6f 77 20 57 69 74 68 20 61 20 42 72 61     | Now With a Bra
     12e:	69 6e 21 21 20 7c 00                                in!! |.

00000135 <__c.2042>:
     135:	2b 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     +---------------
     145:	2d 2d 2d 2d 2d 2b 00                                -----+.

0000014c <__c.2040>:
     14c:	7c 20 20 28 32 29 20 55 53 42 20 4d 6f 75 73 65     |  (2) USB Mouse
     15c:	20 20 20 20 20 7c 00                                     |.

00000163 <__c.2038>:
     163:	7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     |---------------
     173:	2d 2d 2d 2d 2d 7c 00                                -----|.

0000017a <__c.2036>:
     17a:	7c 20 20 28 31 29 20 55 53 42 20 4b 65 79 62 6f     |  (1) USB Keybo
     18a:	61 64 20 20 20 7c 00                                ad   |.

00000191 <__c.2034>:
     191:	7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     |---------------
     1a1:	2d 2d 2d 2d 2d 7c 00                                -----|.

000001a8 <__c.2032>:
     1a8:	7c 20 55 53 42 20 54 65 73 74 69 6e 67 20 44 65     | USB Testing De
     1b8:	76 69 63 65 20 7c 00                                vice |.

000001bf <__c.2030>:
     1bf:	2b 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     +---------------
     1cf:	2d 2d 2d 2d 2d 2b 00                                -----+.

000001d6 <usbDescriptorString0>:
     1d6:	04 03 09 04                                         ....

000001da <usbDescriptorStringVendor>:
     1da:	1c 03 77 00 77 00 77 00 2e 00 54 00 2d 00 34 00     ..w.w.w...T.-.4.
     1ea:	32 00 64 00 2e 00 63 00 6f 00 6d 00                 2.d...c.o.m.

000001f6 <usbDescriptorStringDevice>:
     1f6:	26 03 55 00 53 00 42 00 20 00 54 00 65 00 73 00     &.U.S.B. .T.e.s.
     206:	74 00 69 00 6e 00 67 00 20 00 44 00 65 00 76 00     t.i.n.g. .D.e.v.
     216:	69 00 63 00 65 00                                   i.c.e.

0000021c <usbDescriptorDevice>:
     21c:	12 01 10 01 00 00 00 08 4f 1b 02 00 00 01 01 02     ........O.......
     22c:	00 01                                               ..

0000022e <usbDescriptorConfiguration>:
     22e:	09 02 22 00 01 01 00 80 64 09 04 00 00 01 03 00     ..".....d.......
     23e:	00 00 09 21 01 01 00 01 22 77 00 07 05 81 03 08     ...!...."w......
     24e:	00 0a                                               ..

00000250 <__ctors_end>:
     250:	11 24       	eor	r1, r1
     252:	1f be       	out	0x3f, r1	; 63
     254:	cf e5       	ldi	r28, 0x5F	; 95
     256:	d2 e0       	ldi	r29, 0x02	; 2
     258:	de bf       	out	0x3e, r29	; 62
     25a:	cd bf       	out	0x3d, r28	; 61

0000025c <__do_copy_data>:
     25c:	10 e0       	ldi	r17, 0x00	; 0
     25e:	a0 e6       	ldi	r26, 0x60	; 96
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	e0 ed       	ldi	r30, 0xD0	; 208
     264:	f6 e1       	ldi	r31, 0x16	; 22
     266:	02 c0       	rjmp	.+4      	; 0x26c <.do_copy_data_start>

00000268 <.do_copy_data_loop>:
     268:	05 90       	lpm	r0, Z+
     26a:	0d 92       	st	X+, r0

0000026c <.do_copy_data_start>:
     26c:	ae 37       	cpi	r26, 0x7E	; 126
     26e:	b1 07       	cpc	r27, r17
     270:	d9 f7       	brne	.-10     	; 0x268 <.do_copy_data_loop>

00000272 <__do_clear_bss>:
     272:	10 e0       	ldi	r17, 0x00	; 0
     274:	ae e7       	ldi	r26, 0x7E	; 126
     276:	b0 e0       	ldi	r27, 0x00	; 0
     278:	01 c0       	rjmp	.+2      	; 0x27c <.do_clear_bss_start>

0000027a <.do_clear_bss_loop>:
     27a:	1d 92       	st	X+, r1

0000027c <.do_clear_bss_start>:
     27c:	a7 3d       	cpi	r26, 0xD7	; 215
     27e:	b1 07       	cpc	r27, r17
     280:	e1 f7       	brne	.-8      	; 0x27a <.do_clear_bss_loop>
     282:	f9 d3       	rcall	.+2034   	; 0xa76 <main>
     284:	f5 c6       	rjmp	.+3562   	; 0x1070 <exit>

00000286 <__bad_interrupt>:
     286:	bc ce       	rjmp	.-648    	; 0x0 <__vectors>

00000288 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     288:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     28a:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
     28c:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
     28e:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
     290:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
     292:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
     294:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
     296:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
     298:	09 c0       	rjmp	.+18     	; 0x2ac <usbCrcLoopEntry>

0000029a <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
     29a:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
     29c:	82 27       	eor	r24, r18

0000029e <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
     29e:	97 95       	ror	r25
    ror     resCrcL
     2a0:	87 95       	ror	r24
    brcs    usbCrcNoXor
     2a2:	10 f0       	brcs	.+4      	; 0x2a8 <usbCrcNoXor>
    eor     resCrcL, polyL
     2a4:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
     2a6:	95 27       	eor	r25, r21

000002a8 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
     2a8:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
     2aa:	c8 f3       	brcs	.-14     	; 0x29e <usbCrcBitLoop>

000002ac <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
     2ac:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
     2ae:	a8 f3       	brcs	.-22     	; 0x29a <usbCrcByteLoop>

000002b0 <usbCrcReady>:
usbCrcReady:
    ret
     2b0:	08 95       	ret

000002b2 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     2b2:	ea df       	rcall	.-44     	; 0x288 <usbCrc16>
    st      ptr+, resCrcL
     2b4:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     2b6:	9d 93       	st	X+, r25
    ret
     2b8:	08 95       	ret

000002ba <usbMeasureFrameLength>:

; extern unsigned usbMeasurePacketLength(void);
; returns time between two idle strobes in multiples of 7 CPU clocks
.global usbMeasureFrameLength
usbMeasureFrameLength:
    ldi     cntH, 6         ; wait ~ 10 ms for D- == 0
     2ba:	a6 e0       	ldi	r26, 0x06	; 6
    clr     cnt16L
     2bc:	88 27       	eor	r24, r24
    clr     cnt16H
     2be:	99 27       	eor	r25, r25

000002c0 <usbMFTime16>:
usbMFTime16:
    dec     cntH
     2c0:	aa 95       	dec	r26
    breq    usbMFTimeout
     2c2:	69 f0       	breq	.+26     	; 0x2de <usbMFTimeout>

000002c4 <usbMFWaitStrobe>:
usbMFWaitStrobe:            ; first wait for D- == 0 (idle strobe)
    sbiw    cnt16, 1        ;[0] [6]
     2c4:	01 97       	sbiw	r24, 0x01	; 1
    breq    usbMFTime16     ;[2]
     2c6:	e1 f3       	breq	.-8      	; 0x2c0 <usbMFTime16>
    sbic    USBIN, USBMINUS ;[3]
     2c8:	b0 99       	sbic	0x16, 0	; 22
    rjmp    usbMFWaitStrobe ;[4]
     2ca:	fc cf       	rjmp	.-8      	; 0x2c4 <usbMFWaitStrobe>

000002cc <usbMFWaitIdle>:
usbMFWaitIdle:              ; then wait until idle again
    sbis    USBIN, USBMINUS ;1 wait for D- == 1
     2cc:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    usbMFWaitIdle   ;2
     2ce:	fe cf       	rjmp	.-4      	; 0x2cc <usbMFWaitIdle>
    ldi     cnt16L, 1       ;1 represents cycles so far
     2d0:	81 e0       	ldi	r24, 0x01	; 1
    clr     cnt16H          ;1
     2d2:	99 27       	eor	r25, r25

000002d4 <usbMFWaitLoop>:
usbMFWaitLoop:
    in      cntH, USBIN     ;[0] [7]
     2d4:	a6 b3       	in	r26, 0x16	; 22
    adiw    cnt16, 1        ;[1]
     2d6:	01 96       	adiw	r24, 0x01	; 1
    breq    usbMFTimeout    ;[3]
     2d8:	11 f0       	breq	.+4      	; 0x2de <usbMFTimeout>
    andi    cntH, USBMASK   ;[4]
     2da:	a5 70       	andi	r26, 0x05	; 5
    brne    usbMFWaitLoop   ;[5]
     2dc:	d9 f7       	brne	.-10     	; 0x2d4 <usbMFWaitLoop>

000002de <usbMFTimeout>:
usbMFTimeout:
#if resL != cnt16L
    mov     resL, cnt16L
    mov     resH, cnt16H
#endif
    ret
     2de:	08 95       	ret

000002e0 <__vector_1>:
; when instruction starts


USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], r0, YH, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-23] push only what is necessary to sync with edge ASAP
     2e0:	cf 93       	push	r28
    in      YL, SREG            ;[-21]
     2e2:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-20]
     2e4:	cf 93       	push	r28

000002e6 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     2e6:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
     2e8:	b0 9b       	sbis	0x16, 0	; 22
    brne    waitForJ        ; just make sure we have ANY timeout
     2ea:	e9 f7       	brne	.-6      	; 0x2e6 <waitForJ>

000002ec <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
     2ec:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK              ;[-14]
     2ee:	0b c0       	rjmp	.+22     	; 0x306 <foundK>
    sbis    USBIN, USBMINUS
     2f0:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
     2f2:	09 c0       	rjmp	.+18     	; 0x306 <foundK>
    sbis    USBIN, USBMINUS
     2f4:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
     2f6:	07 c0       	rjmp	.+14     	; 0x306 <foundK>
    sbis    USBIN, USBMINUS
     2f8:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
     2fa:	05 c0       	rjmp	.+10     	; 0x306 <foundK>
    sbis    USBIN, USBMINUS
     2fc:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
     2fe:	03 c0       	rjmp	.+6      	; 0x306 <foundK>
    sbis    USBIN, USBMINUS
     300:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
     302:	01 c0       	rjmp	.+2      	; 0x306 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     304:	d5 c0       	rjmp	.+426    	; 0x4b0 <sofError>

00000306 <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    r0                  ;[-12]
     306:	0f 92       	push	r0
;   [---]                       ;[-11]
    push    YH                  ;[-10]
     308:	df 93       	push	r29
;   [---]                       ;[-9]
    lds     YL, usbInputBufOffset;[-8]
     30a:	c0 91 b4 00 	lds	r28, 0x00B4
;   [---]                       ;[-7]
    clr     YH                  ;[-6]
     30e:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-5] [rx loop init]
     310:	c5 54       	subi	r28, 0x45	; 69
    sbci    YH, hi8(-(usbRxBuf));[-4] [rx loop init]
     312:	df 4f       	sbci	r29, 0xFF	; 255
    mov     r0, x2              ;[-3] [rx loop init]
     314:	01 2e       	mov	r0, r17
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
     316:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    haveTwoBitsK        ;[-1]
     318:	03 c0       	rjmp	.+6      	; 0x320 <haveTwoBitsK>
    pop     YH                  ;[0] undo the pushes from before
     31a:	df 91       	pop	r29
    pop     r0                  ;[2]
     31c:	0f 90       	pop	r0
    rjmp    waitForK            ;[4] this was not the end of sync, retry
     31e:	e6 cf       	rjmp	.-52     	; 0x2ec <waitForK>

00000320 <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:               ;[1]
    push    shift           ;[1]
     320:	2f 93       	push	r18
    push    x1              ;[3]
     322:	0f 93       	push	r16
    push    x2              ;[5]
     324:	1f 93       	push	r17
    push    x3              ;[7]
     326:	4f 93       	push	r20
    ldi     shift, 0xff     ;[9] [rx loop init]
     328:	2f ef       	ldi	r18, 0xFF	; 255
    ori     x3, 0xff        ;[10] [rx loop init] == ser x3, clear zero flag
     32a:	4f 6f       	ori	r20, 0xFF	; 255

    in      x1, USBIN       ;[11] <-- sample bit 0
     32c:	06 b3       	in	r16, 0x16	; 22
    bst     x1, USBMINUS    ;[12]
     32e:	00 fb       	bst	r16, 0
    bld     shift, 0        ;[13]
     330:	20 f9       	bld	r18, 0
    push    x4              ;[14] == phase
     332:	5f 93       	push	r21
;   [---]                   ;[15]
    push    cnt             ;[16]
     334:	3f 93       	push	r19
;   [---]                   ;[17]
    ldi     phase, 0        ;[18] [rx loop init]
     336:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[19] [rx loop init]
     338:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[20]
     33a:	65 c0       	rjmp	.+202    	; 0x406 <rxbit1>

0000033c <continueWithBit5>:
bit 7: jump, fixup bitstuff
; 87 [+ 2] cycles
------------------------------------------------------------------
*/
continueWithBit5:
    in      x2, USBIN       ;[055] <-- bit 5
     33c:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[056]
     33e:	01 26       	eor	r0, r17
    or      phase, r0       ;[057]
     340:	50 29       	or	r21, r0
    sbrc    phase, USBMINUS ;[058]
     342:	50 fd       	sbrc	r21, 0
    lpm                     ;[059] optional nop3; modifies r0
     344:	c8 95       	lpm
    in      phase, USBIN    ;[060] <-- phase
     346:	56 b3       	in	r21, 0x16	; 22
    eor     x1, x2          ;[061]
     348:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[062]
     34a:	00 fb       	bst	r16, 0
    bld     shift, 5        ;[063]
     34c:	25 f9       	bld	r18, 5
    andi    shift, 0x3f     ;[064]
     34e:	2f 73       	andi	r18, 0x3F	; 63
    in      x1, USBIN       ;[065] <-- bit 6
     350:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff5        ;[066] *** unstuff escape
     352:	b1 f0       	breq	.+44     	; 0x380 <unstuff5>
    eor     phase, x1       ;[067]
     354:	50 27       	eor	r21, r16
    eor     x2, x1          ;[068]
     356:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[069]
     358:	10 fb       	bst	r17, 0
    bld     shift, 6        ;[070]
     35a:	26 f9       	bld	r18, 6

0000035c <didUnstuff6>:
didUnstuff6:                ;[   ]
    in      r0, USBIN       ;[071] <-- phase
     35c:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x02     ;[072]
     35e:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6        ;[073] *** unstuff escape
     360:	f0 f0       	brcs	.+60     	; 0x39e <unstuff6>

00000362 <didUnstuff5>:
didUnstuff5:                ;[   ]
    nop2                    ;[074]
     362:	00 c0       	rjmp	.+0      	; 0x364 <didUnstuff5+0x2>
;   [---]                   ;[075]
    in      x2, USBIN       ;[076] <-- bit 7
     364:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2          ;[077]
     366:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[078]
     368:	00 fb       	bst	r16, 0
    bld     shift, 7        ;[079]
     36a:	27 f9       	bld	r18, 7

0000036c <didUnstuff7>:
didUnstuff7:                ;[   ]
    eor     r0, x2          ;[080]
     36c:	01 26       	eor	r0, r17
    or      phase, r0       ;[081]
     36e:	50 29       	or	r21, r0
    in      r0, USBIN       ;[082] <-- phase
     370:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x04     ;[083]
     372:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop          ;[084]
     374:	e8 f5       	brcc	.+122    	; 0x3f0 <rxLoop>

00000376 <unstuff7>:
;   [---]                   ;[085]
unstuff7:                   ;[   ]
    andi    x3, ~0x80       ;[085]
     376:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80     ;[086]
     378:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN       ;[087] <-- sample stuffed bit 7
     37a:	16 b3       	in	r17, 0x16	; 22
    nop                     ;[088]
     37c:	00 00       	nop
    rjmp    didUnstuff7     ;[089]
     37e:	f6 cf       	rjmp	.-20     	; 0x36c <didUnstuff7>

00000380 <unstuff5>:
;   [---]                   ;[090]
                            ;[080]

unstuff5:                   ;[067]
    eor     phase, x1       ;[068]
     380:	50 27       	eor	r21, r16
    andi    x3, ~0x20       ;[069]
     382:	4f 7d       	andi	r20, 0xDF	; 223
    ori     shift, 0x20     ;[070]
     384:	20 62       	ori	r18, 0x20	; 32
    in      r0, USBIN       ;[071] <-- phase
     386:	06 b2       	in	r0, 0x16	; 22
    mov     x2, x1          ;[072]
     388:	10 2f       	mov	r17, r16
    nop                     ;[073]
     38a:	00 00       	nop
    nop2                    ;[074]
     38c:	00 c0       	rjmp	.+0      	; 0x38e <unstuff5+0xe>
;   [---]                   ;[075]
    in      x1, USBIN       ;[076] <-- bit 6
     38e:	06 b3       	in	r16, 0x16	; 22
    eor     r0, x1          ;[077]
     390:	00 26       	eor	r0, r16
    or      phase, r0       ;[078]
     392:	50 29       	or	r21, r0
    eor     x2, x1          ;[079]
     394:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[080]
     396:	10 fb       	bst	r17, 0
    bld     shift, 6        ;[081] no need to check bitstuffing, we just had one
     398:	26 f9       	bld	r18, 6
    in      r0, USBIN       ;[082] <-- phase
     39a:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff5     ;[083]
     39c:	e2 cf       	rjmp	.-60     	; 0x362 <didUnstuff5>

0000039e <unstuff6>:
;   [---]                   ;[084]
                            ;[074]

unstuff6:                   ;[074]
    andi    x3, ~0x40       ;[075]
     39e:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN       ;[076] <-- bit 6 again
     3a0:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x40     ;[077]
     3a2:	20 64       	ori	r18, 0x40	; 64
    nop2                    ;[078]
     3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <unstuff6+0x8>
;   [---]                   ;[079]
    rjmp    didUnstuff6     ;[080]
     3a6:	da cf       	rjmp	.-76     	; 0x35c <didUnstuff6>

000003a8 <unstuff0>:
;   [---]                   ;[081]
                            ;[071]

unstuff0:                   ;[013]
    eor     r0, x2          ;[014]
     3a8:	01 26       	eor	r0, r17
    or      phase, r0       ;[015]
     3aa:	50 29       	or	r21, r0
    andi    x2, USBMASK     ;[016] check for SE0
     3ac:	15 70       	andi	r17, 0x05	; 5
    in      r0, USBIN       ;[017] <-- phase
     3ae:	06 b2       	in	r0, 0x16	; 22
    breq    didUnstuff0     ;[018] direct jump to se0 would be too long
     3b0:	69 f1       	breq	.+90     	; 0x40c <didUnstuff0>
    andi    x3, ~0x01       ;[019]
     3b2:	4e 7f       	andi	r20, 0xFE	; 254
    ori     shift, 0x01     ;[020]
     3b4:	21 60       	ori	r18, 0x01	; 1
    mov     x1, x2          ;[021] mov existing sample
     3b6:	01 2f       	mov	r16, r17
    in      x2, USBIN       ;[022] <-- bit 1 again
     3b8:	16 b3       	in	r17, 0x16	; 22
    rjmp    didUnstuff0     ;[023]
     3ba:	28 c0       	rjmp	.+80     	; 0x40c <didUnstuff0>

000003bc <unstuff1>:
;   [---]                   ;[024]
                            ;[014]

unstuff1:                   ;[024]
    eor     r0, x1          ;[025]
     3bc:	00 26       	eor	r0, r16
    or      phase, r0       ;[026]
     3be:	50 29       	or	r21, r0
    andi    x3, ~0x02       ;[027]
     3c0:	4d 7f       	andi	r20, 0xFD	; 253
    in      r0, USBIN       ;[028] <-- phase
     3c2:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x02     ;[029]
     3c4:	22 60       	ori	r18, 0x02	; 2
    mov     x2, x1          ;[030]
     3c6:	10 2f       	mov	r17, r16
    rjmp    didUnstuff1     ;[031]
     3c8:	29 c0       	rjmp	.+82     	; 0x41c <didUnstuff1>

000003ca <unstuff2>:
;   [---]                   ;[032]
                            ;[022]

unstuff2:                   ;[035]
    eor     r0, x2          ;[036]
     3ca:	01 26       	eor	r0, r17
    or      phase, r0       ;[037]
     3cc:	50 29       	or	r21, r0
    andi    x3, ~0x04       ;[038]
     3ce:	4b 7f       	andi	r20, 0xFB	; 251
    in      r0, USBIN       ;[039] <-- phase
     3d0:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x04     ;[040]
     3d2:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2          ;[041]
     3d4:	01 2f       	mov	r16, r17
    rjmp    didUnstuff2     ;[042]
     3d6:	2d c0       	rjmp	.+90     	; 0x432 <didUnstuff2>

000003d8 <unstuff3>:
;   [---]                   ;[043]
                            ;[033]

unstuff3:                   ;[043]
    in      x2, USBIN       ;[044] <-- bit 3 again
     3d8:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[045]
     3da:	01 26       	eor	r0, r17
    or      phase, r0       ;[046]
     3dc:	50 29       	or	r21, r0
    andi    x3, ~0x08       ;[047]
     3de:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08     ;[048]
     3e0:	28 60       	ori	r18, 0x08	; 8
    nop                     ;[049]
     3e2:	00 00       	nop
    in      r0, USBIN       ;[050] <-- phase
     3e4:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff3     ;[051]
     3e6:	2e c0       	rjmp	.+92     	; 0x444 <didUnstuff3>

000003e8 <unstuff4>:
;   [---]                   ;[052]
                            ;[042]

unstuff4:                   ;[053]
    andi    x3, ~0x10       ;[054]
     3e8:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN       ;[055] <-- bit 4 again
     3ea:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x10     ;[056]
     3ec:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4     ;[057]
     3ee:	30 c0       	rjmp	.+96     	; 0x450 <didUnstuff4>

000003f0 <rxLoop>:
;   [---]                   ;[058]
                            ;[048]

rxLoop:                     ;[085]
    eor     x3, shift       ;[086] reconstruct: x3 is 0 at bit locations we changed, 1 at others
     3f0:	42 27       	eor	r20, r18
    in      x1, USBIN       ;[000] <-- bit 0
     3f2:	06 b3       	in	r16, 0x16	; 22
    st      y+, x3          ;[001]
     3f4:	49 93       	st	Y+, r20
;   [---]                   ;[002]
    eor     r0, x1          ;[003]
     3f6:	00 26       	eor	r0, r16
    or      phase, r0       ;[004]
     3f8:	50 29       	or	r21, r0
    eor     x2, x1          ;[005]
     3fa:	10 27       	eor	r17, r16
    in      r0, USBIN       ;[006] <-- phase
     3fc:	06 b2       	in	r0, 0x16	; 22
    ser     x3              ;[007]
     3fe:	4f ef       	ldi	r20, 0xFF	; 255
    bst     x2, USBMINUS    ;[008]
     400:	10 fb       	bst	r17, 0
    bld     shift, 0        ;[009]
     402:	20 f9       	bld	r18, 0
    andi    shift, 0xf9     ;[010]
     404:	29 7f       	andi	r18, 0xF9	; 249

00000406 <rxbit1>:
rxbit1:                     ;[   ]
    in      x2, USBIN       ;[011] <-- bit 1
     406:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff0        ;[012] *** unstuff escape
     408:	79 f2       	breq	.-98     	; 0x3a8 <unstuff0>
    andi    x2, USBMASK     ;[013] SE0 check for bit 1
     40a:	15 70       	andi	r17, 0x05	; 5

0000040c <didUnstuff0>:
didUnstuff0:                ;[   ] Z only set if we detected SE0 in bitstuff
    breq    se0             ;[014]
     40c:	59 f1       	breq	.+86     	; 0x464 <se0>
    eor     r0, x2          ;[015]
     40e:	01 26       	eor	r0, r17
    or      phase, r0       ;[016]
     410:	50 29       	or	r21, r0
    in      r0, USBIN       ;[017] <-- phase
     412:	06 b2       	in	r0, 0x16	; 22
    eor     x1, x2          ;[018]
     414:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[019]
     416:	00 fb       	bst	r16, 0
    bld     shift, 1        ;[020]
     418:	21 f9       	bld	r18, 1
    andi    shift, 0xf3     ;[021]
     41a:	23 7f       	andi	r18, 0xF3	; 243

0000041c <didUnstuff1>:
didUnstuff1:                ;[   ]
    in      x1, USBIN       ;[022] <-- bit 2
     41c:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff1        ;[023] *** unstuff escape
     41e:	71 f2       	breq	.-100    	; 0x3bc <unstuff1>
    eor     r0, x1          ;[024]
     420:	00 26       	eor	r0, r16
    or      phase, r0       ;[025]
     422:	50 29       	or	r21, r0
    subi    cnt, 1          ;[026] overflow check
     424:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow        ;[027]
     426:	d0 f0       	brcs	.+52     	; 0x45c <overflow>
    in      r0, USBIN       ;[028] <-- phase
     428:	06 b2       	in	r0, 0x16	; 22
    eor     x2, x1          ;[029]
     42a:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[030]
     42c:	10 fb       	bst	r17, 0
    bld     shift, 2        ;[031]
     42e:	22 f9       	bld	r18, 2
    andi    shift, 0xe7     ;[032]
     430:	27 7e       	andi	r18, 0xE7	; 231

00000432 <didUnstuff2>:
didUnstuff2:                ;[   ]
    in      x2, USBIN       ;[033] <-- bit 3
     432:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff2        ;[034] *** unstuff escape
     434:	51 f2       	breq	.-108    	; 0x3ca <unstuff2>
    eor     r0, x2          ;[035]
     436:	01 26       	eor	r0, r17
    or      phase, r0       ;[036]
     438:	50 29       	or	r21, r0
    eor     x1, x2          ;[037]
     43a:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[038]
     43c:	00 fb       	bst	r16, 0
    in      r0, USBIN       ;[039] <-- phase
     43e:	06 b2       	in	r0, 0x16	; 22
    bld     shift, 3        ;[040]
     440:	23 f9       	bld	r18, 3
    andi    shift, 0xcf     ;[041]
     442:	2f 7c       	andi	r18, 0xCF	; 207

00000444 <didUnstuff3>:
didUnstuff3:                ;[   ]
    breq    unstuff3        ;[042] *** unstuff escape
     444:	49 f2       	breq	.-110    	; 0x3d8 <unstuff3>
    nop                     ;[043]
     446:	00 00       	nop
    in      x1, USBIN       ;[044] <-- bit 4
     448:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1          ;[045]
     44a:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[046]
     44c:	10 fb       	bst	r17, 0
    bld     shift, 4        ;[047]
     44e:	24 f9       	bld	r18, 4

00000450 <didUnstuff4>:
didUnstuff4:                ;[   ]
    eor     r0, x1          ;[048]
     450:	00 26       	eor	r0, r16
    or      phase, r0       ;[049]
     452:	50 29       	or	r21, r0
    in      r0, USBIN       ;[050] <-- phase
     454:	06 b2       	in	r0, 0x16	; 22
    andi    shift, 0x9f     ;[051]
     456:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4        ;[052] *** unstuff escape
     458:	39 f2       	breq	.-114    	; 0x3e8 <unstuff4>
    rjmp    continueWithBit5;[053]
     45a:	70 cf       	rjmp	.-288    	; 0x33c <continueWithBit5>

0000045c <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
     45c:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
     45e:	1a bf       	out	0x3a, r17	; 58

00000460 <ignorePacket>:
ignorePacket:
    clr     token
     460:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
     462:	19 c0       	rjmp	.+50     	; 0x496 <handleSetupOrOut>

00000464 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
     464:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
     466:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
     468:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
     46a:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
     46c:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
     46e:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
     470:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
     472:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
     474:	09 f1       	breq	.+66     	; 0x4b8 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
     476:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
     478:	f9 f0       	breq	.+62     	; 0x4b8 <handleData>
    lds     shift, usbDeviceAddr;[17]
     47a:	20 91 b2 00 	lds	r18, 0x00B2
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
     47e:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
     480:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
     482:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
     484:	ed cf       	rjmp	.-38     	; 0x460 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
     486:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
     488:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
     48a:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
     48c:	51 f1       	breq	.+84     	; 0x4e2 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
     48e:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
     490:	11 f0       	breq	.+4      	; 0x496 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
     492:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
     494:	29 f7       	brne	.-54     	; 0x460 <ignorePacket>

00000496 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
     496:	00 93 b9 00 	sts	0x00B9, r16

0000049a <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
     49a:	3f 91       	pop	r19
     49c:	5f 91       	pop	r21
     49e:	4f 91       	pop	r20
     4a0:	1f 91       	pop	r17
     4a2:	0f 91       	pop	r16
     4a4:	2f 91       	pop	r18
     4a6:	df 91       	pop	r29
     4a8:	0f 90       	pop	r0
    USB_LOAD_PENDING(YL)        ;[49]
     4aa:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
     4ac:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
     4ae:	1b cf       	rjmp	.-458    	; 0x2e6 <waitForJ>

000004b0 <sofError>:
sofError:
    POP_RETI                    ;macro call
     4b0:	cf 91       	pop	r28
     4b2:	cf bf       	out	0x3f, r28	; 63
     4b4:	cf 91       	pop	r28
    reti
     4b6:	18 95       	reti

000004b8 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
     4b8:	20 91 b9 00 	lds	r18, 0x00B9
    tst     shift               ;[20]
     4bc:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
     4be:	69 f3       	breq	.-38     	; 0x49a <doReturn>
    lds     x2, usbRxLen        ;[22]
     4c0:	10 91 b7 00 	lds	r17, 0x00B7
    tst     x2                  ;[24]
     4c4:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
     4c6:	79 f5       	brne	.+94     	; 0x526 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
     4c8:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
     4ca:	7a f1       	brmi	.+94     	; 0x52a <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
     4cc:	30 93 b7 00 	sts	0x00B7, r19
    sts     usbRxToken, shift   ;[30]
     4d0:	20 93 b3 00 	sts	0x00B3, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
     4d4:	10 91 b4 00 	lds	r17, 0x00B4
    ldi     cnt, USB_BUFSIZE    ;[34]
     4d8:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
     4da:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
     4dc:	30 93 b4 00 	sts	0x00B4, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
     4e0:	24 c0       	rjmp	.+72     	; 0x52a <sendAckAndReti>

000004e2 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
     4e2:	00 91 b7 00 	lds	r16, 0x00B7
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
     4e6:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
     4e8:	f4 f4       	brge	.+60     	; 0x526 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
     4ea:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
     4ec:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
     4ee:	49 f4       	brne	.+18     	; 0x502 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
     4f0:	30 91 7c 00 	lds	r19, 0x007C
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
     4f4:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
     4f6:	1a c0       	rjmp	.+52     	; 0x52c <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
     4f8:	00 93 7c 00 	sts	0x007C, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
     4fc:	cb e9       	ldi	r28, 0x9B	; 155
    ldi     YH, hi8(usbTxBuf)   ;[44]
     4fe:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
     500:	19 c0       	rjmp	.+50     	; 0x534 <usbSendAndReti>

00000502 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
     502:	30 91 a6 00 	lds	r19, 0x00A6
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
     506:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
     508:	11 c0       	rjmp	.+34     	; 0x52c <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
     50a:	00 93 a6 00 	sts	0x00A6, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
     50e:	c7 ea       	ldi	r28, 0xA7	; 167
    ldi     YH, hi8(usbTxBuf1)  ;[47]
     510:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
     512:	10 c0       	rjmp	.+32     	; 0x534 <usbSendAndReti>

00000514 <bitstuff7>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuff7:
    eor     x1, x4          ;[4]
     514:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[5]
     516:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[6] C is zero (brcc)
     518:	00 c0       	rjmp	.+0      	; 0x51a <bitstuff7+0x6>
    rjmp    didStuff7       ;[8]
     51a:	21 c0       	rjmp	.+66     	; 0x55e <didStuff7>

0000051c <bitstuffN>:

bitstuffN:
    eor     x1, x4          ;[5]
     51c:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
     51e:	10 e0       	ldi	r17, 0x00	; 0
    lpm                     ;[7] 3 cycle NOP, modifies r0
     520:	c8 95       	lpm
    out     USBOUT, x1      ;[10] <-- out
     522:	08 bb       	out	0x18, r16	; 24
    rjmp    didStuffN       ;[0]
     524:	14 c0       	rjmp	.+40     	; 0x54e <didStuffN>

00000526 <sendNakAndReti>:

#define bitStatus   x3

sendNakAndReti:
    ldi     cnt, USBPID_NAK ;[-19]
     526:	3a e5       	ldi	r19, 0x5A	; 90
    rjmp    sendCntAndReti  ;[-18]
     528:	01 c0       	rjmp	.+2      	; 0x52c <sendCntAndReti>

0000052a <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
     52a:	32 ed       	ldi	r19, 0xD2	; 210

0000052c <sendCntAndReti>:
sendCntAndReti:
    mov     r0, cnt         ;[-16]
     52c:	03 2e       	mov	r0, r19
    ldi     YL, 0           ;[-15] R0 address is 0
     52e:	c0 e0       	ldi	r28, 0x00	; 0
    ldi     YH, 0           ;[-14]
     530:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
     532:	32 e0       	ldi	r19, 0x02	; 2

00000534 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte [range 2 ... 12]
;uses: x1...x4, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
     534:	17 b3       	in	r17, 0x17	; 23
    ori     x2, USBMASK     ;[-11]
     536:	15 60       	ori	r17, 0x05	; 5
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
     538:	c0 9a       	sbi	0x18, 0	; 24
    in      x1, USBOUT      ;[-8] port mirror for tx loop
     53a:	08 b3       	in	r16, 0x18	; 24
    out     USBDDR, x2      ;[-7] <- acquire bus
     53c:	17 bb       	out	0x17, r17	; 23
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
     53e:	55 e0       	ldi	r21, 0x05	; 5
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
     540:	20 e8       	ldi	r18, 0x80	; 128
    ldi     bitStatus, 0xff ;[-4] init bit loop counter, works for up to 12 bytes
     542:	4f ef       	ldi	r20, 0xFF	; 255

00000544 <bitloop>:
byteloop:
bitloop:
    sbrs    shift, 0        ;[8] [-3]
     544:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[9] [-2]
     546:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[10] [-1] <-- out
     548:	08 bb       	out	0x18, r16	; 24
    ror     shift           ;[0]
     54a:	27 95       	ror	r18
    ror     x2              ;[1]
     54c:	17 95       	ror	r17

0000054e <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
     54e:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
     550:	28 f7       	brcc	.-54     	; 0x51c <bitstuffN>
    nop                     ;[4]
     552:	00 00       	nop
    subi    bitStatus, 37   ;[5] 256 / 7 ~=~ 37
     554:	45 52       	subi	r20, 0x25	; 37
    brcc    bitloop         ;[6] when we leave the loop, bitStatus has almost the initial value
     556:	b0 f7       	brcc	.-20     	; 0x544 <bitloop>
    sbrs    shift, 0        ;[7]
     558:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
     55a:	05 27       	eor	r16, r21
    ror     shift           ;[9]
     55c:	27 95       	ror	r18

0000055e <didStuff7>:
didStuff7:
    out     USBOUT, x1      ;[10] <-- out
     55e:	08 bb       	out	0x18, r16	; 24
    ror     x2              ;[0]
     560:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[1]
     562:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff7       ;[2]
     564:	b8 f6       	brcc	.-82     	; 0x514 <bitstuff7>
    ld      shift, y+       ;[3]
     566:	29 91       	ld	r18, Y+
    dec     cnt             ;[5]
     568:	3a 95       	dec	r19
    brne    byteloop        ;[6]
     56a:	61 f7       	brne	.-40     	; 0x544 <bitloop>
;make SE0:
    cbr     x1, USBMASK     ;[7] prepare SE0 [spec says EOP may be 21 to 25 cycles]
     56c:	0a 7f       	andi	r16, 0xFA	; 250
    lds     x2, usbNewDeviceAddr;[8]
     56e:	10 91 b8 00 	lds	r17, 0x00B8
    lsl     x2              ;[10] we compare with left shifted address
     572:	11 0f       	add	r17, r17
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
     574:	08 bb       	out	0x18, r16	; 24
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    subi    YL, 2           ;[0] Only assign address on data packets, not ACK/NAK in r0
     576:	c2 50       	subi	r28, 0x02	; 2
    sbci    YH, 0           ;[1]
     578:	d0 40       	sbci	r29, 0x00	; 0
    breq    skipAddrAssign  ;[2]
     57a:	11 f0       	breq	.+4      	; 0x580 <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
     57c:	10 93 b2 00 	sts	0x00B2, r17

00000580 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[4] int0 occurred during TX -- clear pending flag
     580:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)   ;[5]
     582:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE     ;[6]
     584:	01 60       	ori	r16, 0x01	; 1
    in      x2, USBDDR      ;[7]
     586:	17 b3       	in	r17, 0x17	; 23
    cbr     x2, USBMASK     ;[8] set both pins to input
     588:	1a 7f       	andi	r17, 0xFA	; 250
    mov     x3, x1          ;[9]
     58a:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[10] configure no pullup on both pins
     58c:	4a 7f       	andi	r20, 0xFA	; 250
    ldi     x4, 4           ;[11]
     58e:	54 e0       	ldi	r21, 0x04	; 4

00000590 <se0Delay>:
se0Delay:
    dec     x4              ;[12] [15] [18] [21]
     590:	5a 95       	dec	r21
    brne    se0Delay        ;[13] [16] [19] [22]
     592:	f1 f7       	brne	.-4      	; 0x590 <se0Delay>
    out     USBOUT, x1      ;[23] <-- out J (idle) -- end of SE0 (EOP signal)
     594:	08 bb       	out	0x18, r16	; 24
    out     USBDDR, x2      ;[24] <-- release bus now
     596:	17 bb       	out	0x17, r17	; 23
    out     USBOUT, x3      ;[25] <-- ensure no pull-up resistors are active
     598:	48 bb       	out	0x18, r20	; 24
    rjmp    doReturn
     59a:	7f cf       	rjmp	.-258    	; 0x49a <doReturn>

0000059c <usbFunctionSetup>:
//-----------------------USB--------------------------//
//----------------------------------------------------//
usbMsgLen_t usbFunctionSetup(uint8_t data[8])
{
	// see HID1_11.pdf sect 7.2 and http://vusb.wikidot.com/driver-api
	usbRequest_t *rq = (void *)data;
     59c:	fc 01       	movw	r30, r24

	if ((rq->bmRequestType & USBRQ_TYPE_MASK) != USBRQ_TYPE_CLASS)
     59e:	80 81       	ld	r24, Z
     5a0:	80 76       	andi	r24, 0x60	; 96
     5a2:	80 32       	cpi	r24, 0x20	; 32
     5a4:	09 f0       	breq	.+2      	; 0x5a8 <usbFunctionSetup+0xc>
     5a6:	3f c0       	rjmp	.+126    	; 0x626 <usbFunctionSetup+0x8a>
		return 0; // ignore request if it's not a class specific request

	// see HID1_11.pdf sect 7.2
	switch (rq->bRequest)
     5a8:	81 81       	ldd	r24, Z+1	; 0x01
     5aa:	83 30       	cpi	r24, 0x03	; 3
     5ac:	a9 f0       	breq	.+42     	; 0x5d8 <usbFunctionSetup+0x3c>
     5ae:	84 30       	cpi	r24, 0x04	; 4
     5b0:	28 f4       	brcc	.+10     	; 0x5bc <usbFunctionSetup+0x20>
     5b2:	81 30       	cpi	r24, 0x01	; 1
     5b4:	f1 f0       	breq	.+60     	; 0x5f2 <usbFunctionSetup+0x56>
     5b6:	82 30       	cpi	r24, 0x02	; 2
     5b8:	b1 f5       	brne	.+108    	; 0x626 <usbFunctionSetup+0x8a>
     5ba:	07 c0       	rjmp	.+14     	; 0x5ca <usbFunctionSetup+0x2e>
     5bc:	8a 30       	cpi	r24, 0x0A	; 10
     5be:	41 f0       	breq	.+16     	; 0x5d0 <usbFunctionSetup+0x34>
     5c0:	8b 30       	cpi	r24, 0x0B	; 11
     5c2:	91 f0       	breq	.+36     	; 0x5e8 <usbFunctionSetup+0x4c>
     5c4:	89 30       	cpi	r24, 0x09	; 9
     5c6:	79 f5       	brne	.+94     	; 0x626 <usbFunctionSetup+0x8a>
     5c8:	29 c0       	rjmp	.+82     	; 0x61c <usbFunctionSetup+0x80>
	{
		case USBRQ_HID_GET_IDLE:
			usbMsgPtr = &idle_rate; // send data starting from this byte
     5ca:	8b e7       	ldi	r24, 0x7B	; 123
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	06 c0       	rjmp	.+12     	; 0x5dc <usbFunctionSetup+0x40>
			return 1; // send 1 byte
		case USBRQ_HID_SET_IDLE:
			idle_rate = rq->wValue.bytes[1]; // read in idle rate
     5d0:	83 81       	ldd	r24, Z+3	; 0x03
     5d2:	80 93 7b 00 	sts	0x007B, r24
     5d6:	0b c0       	rjmp	.+22     	; 0x5ee <usbFunctionSetup+0x52>
			return 0; // send nothing
		case USBRQ_HID_GET_PROTOCOL:
			usbMsgPtr = &protocol_version; // send data starting from this byte
     5d8:	86 e8       	ldi	r24, 0x86	; 134
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	90 93 b6 00 	sts	0x00B6, r25
     5e0:	80 93 b5 00 	sts	0x00B5, r24
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	08 95       	ret
			return 1; // send 1 byte
		case USBRQ_HID_SET_PROTOCOL:
			protocol_version = rq->wValue.bytes[1];
     5e8:	83 81       	ldd	r24, Z+3	; 0x03
     5ea:	80 93 86 00 	sts	0x0086, r24
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	08 95       	ret
			return 0; // send nothing
		case USBRQ_HID_GET_REPORT:
			// check for report ID then send back report
			if (rq->wValue.bytes[0] == 1)
     5f2:	82 81       	ldd	r24, Z+2	; 0x02
     5f4:	81 30       	cpi	r24, 0x01	; 1
     5f6:	41 f4       	brne	.+16     	; 0x608 <usbFunctionSetup+0x6c>
			{
				usbMsgPtr = &keyboard_report;
     5f8:	87 e8       	ldi	r24, 0x87	; 135
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	90 93 b6 00 	sts	0x00B6, r25
     600:	80 93 b5 00 	sts	0x00B5, r24
     604:	86 e0       	ldi	r24, 0x06	; 6
     606:	08 95       	ret
				return sizeof(keyboard_report);
			}
			else if (rq->wValue.bytes[0] == 2)
     608:	82 30       	cpi	r24, 0x02	; 2
     60a:	69 f4       	brne	.+26     	; 0x626 <usbFunctionSetup+0x8a>
			{
				usbMsgPtr = &mouse_report;
     60c:	8d e8       	ldi	r24, 0x8D	; 141
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	90 93 b6 00 	sts	0x00B6, r25
     614:	80 93 b5 00 	sts	0x00B5, r24
     618:	85 e0       	ldi	r24, 0x05	; 5
     61a:	08 95       	ret
			else
			{
				return 0; // no such report, send nothing
			}
		case USBRQ_HID_SET_REPORT: // no "output" or "feature" implemented, so ignore
		if (rq->wValue.bytes[0] == 1){
     61c:	82 81       	ldd	r24, Z+2	; 0x02
     61e:	81 30       	cpi	r24, 0x01	; 1
     620:	11 f4       	brne	.+4      	; 0x626 <usbFunctionSetup+0x8a>
     622:	8f ef       	ldi	r24, 0xFF	; 255
     624:	08 95       	ret
     626:	80 e0       	ldi	r24, 0x00	; 0
			return 0; // send nothing
			}
		default: // do not understand data, ignore
			return 0; // send nothing
	}
}
     628:	08 95       	ret

0000062a <usbFunctionWrite>:
int blink_count = 0; // keep track of how many times caps lock have toggled

usbMsgLen_t usbFunctionWrite(uint8_t * data, uchar len)
{	 		

	if (data[1] != LED_state)
     62a:	fc 01       	movw	r30, r24
     62c:	91 81       	ldd	r25, Z+1	; 0x01
     62e:	80 91 85 00 	lds	r24, 0x0085
     632:	98 17       	cp	r25, r24
     634:	91 f0       	breq	.+36     	; 0x65a <usbFunctionWrite+0x30>
	{
		// increment count when LED has toggled
		
		LED_state = data[1];
     636:	90 93 85 00 	sts	0x0085, r25
		
		
		if (bit_is_set(LED_state, 1))
     63a:	80 91 85 00 	lds	r24, 0x0085
     63e:	81 ff       	sbrs	r24, 1
     640:	0b c0       	rjmp	.+22     	; 0x658 <usbFunctionWrite+0x2e>
		{
			sbi(PORTB, YELLOW_LED);
     642:	c1 9a       	sbi	0x18, 1	; 24
			blink_count++;
     644:	80 91 7e 00 	lds	r24, 0x007E
     648:	90 91 7f 00 	lds	r25, 0x007F
     64c:	01 96       	adiw	r24, 0x01	; 1
     64e:	90 93 7f 00 	sts	0x007F, r25
     652:	80 93 7e 00 	sts	0x007E, r24
     656:	01 c0       	rjmp	.+2      	; 0x65a <usbFunctionWrite+0x30>
		}
		else
		{
			cbi(PORTB, YELLOW_LED);
     658:	c1 98       	cbi	0x18, 1	; 24
		}
	}
	return 1;             // return 1 if we have all data
}
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	08 95       	ret

0000065e <usbFunctionRead>:


usbMsgLen_t usbFunctionRead(uint8_t * data, uchar len)
{	 		
	return 1;             // return 1 if we have all data
}
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	08 95       	ret

00000662 <inputPoll>:
//----------------------------------------------------//
int clockstate;

void inputPoll()
{
	if (clockstate != clock)
     662:	86 b3       	in	r24, 0x16	; 22
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	34 e0       	ldi	r19, 0x04	; 4
     668:	96 95       	lsr	r25
     66a:	87 95       	ror	r24
     66c:	3a 95       	dec	r19
     66e:	e1 f7       	brne	.-8      	; 0x668 <inputPoll+0x6>
     670:	41 e0       	ldi	r20, 0x01	; 1
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	84 27       	eor	r24, r20
     676:	95 27       	eor	r25, r21
     678:	81 70       	andi	r24, 0x01	; 1
     67a:	90 70       	andi	r25, 0x00	; 0
     67c:	20 91 97 00 	lds	r18, 0x0097
     680:	30 91 98 00 	lds	r19, 0x0098
     684:	28 17       	cp	r18, r24
     686:	39 07       	cpc	r19, r25
     688:	e9 f0       	breq	.+58     	; 0x6c4 <inputPoll+0x62>
	{
		clockstate = clock;
     68a:	86 b3       	in	r24, 0x16	; 22
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	24 e0       	ldi	r18, 0x04	; 4
     690:	96 95       	lsr	r25
     692:	87 95       	ror	r24
     694:	2a 95       	dec	r18
     696:	e1 f7       	brne	.-8      	; 0x690 <inputPoll+0x2e>
     698:	84 27       	eor	r24, r20
     69a:	95 27       	eor	r25, r21
     69c:	81 70       	andi	r24, 0x01	; 1
     69e:	90 70       	andi	r25, 0x00	; 0
     6a0:	90 93 98 00 	sts	0x0098, r25
     6a4:	80 93 97 00 	sts	0x0097, r24
		if (clock){
     6a8:	b4 99       	sbic	0x16, 4	; 22
     6aa:	0b c0       	rjmp	.+22     	; 0x6c2 <inputPoll+0x60>
			sbi(PORTB, YELLOW_LED);
     6ac:	c1 9a       	sbi	0x18, 1	; 24
			blink_count++;
     6ae:	80 91 7e 00 	lds	r24, 0x007E
     6b2:	90 91 7f 00 	lds	r25, 0x007F
     6b6:	01 96       	adiw	r24, 0x01	; 1
     6b8:	90 93 7f 00 	sts	0x007F, r25
     6bc:	80 93 7e 00 	sts	0x007E, r24
     6c0:	08 95       	ret
		}
		else
		{
			cbi(PORTB, YELLOW_LED);
     6c2:	c1 98       	cbi	0x18, 1	; 24
     6c4:	08 95       	ret

000006c6 <usbSendHidReport>:
    eeprom_write_byte(0, OSCCAL);   /* store the calibrated value in EEPROM */
}

// this function is used to guarantee that the data is sent to the computer once
void usbSendHidReport(uchar * data, uchar len)
{
     6c6:	1f 93       	push	r17
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	ec 01       	movw	r28, r24
     6ce:	16 2f       	mov	r17, r22
	while(1)
	{
		usbPoll();
     6d0:	9b d3       	rcall	.+1846   	; 0xe08 <usbPoll>
		if (usbInterruptIsReady())
     6d2:	80 91 a6 00 	lds	r24, 0x00A6
     6d6:	84 ff       	sbrs	r24, 4
     6d8:	fb cf       	rjmp	.-10     	; 0x6d0 <usbSendHidReport+0xa>
		{
			usbSetInterrupt(data, len);
     6da:	ce 01       	movw	r24, r28
     6dc:	61 2f       	mov	r22, r17
     6de:	73 d3       	rcall	.+1766   	; 0xdc6 <usbSetInterrupt>
			break;
		}
	}
}
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	1f 91       	pop	r17
     6e6:	08 95       	ret

000006e8 <mouse_report_once>:
//----------------------------------------------------//


void mouse_report_once()
{
	usbPoll();
     6e8:	8f d3       	rcall	.+1822   	; 0xe08 <usbPoll>
  	usbSendHidReport(&mouse_report, sizeof(mouse_report));
     6ea:	8d e8       	ldi	r24, 0x8D	; 141
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	65 e0       	ldi	r22, 0x05	; 5
     6f0:	ea df       	rcall	.-44     	; 0x6c6 <usbSendHidReport>
}
     6f2:	08 95       	ret

000006f4 <mouse_move>:

void mouse_move(int8_t x,int8_t y,uint8_t speed ){
     6f4:	ef 92       	push	r14
     6f6:	ff 92       	push	r15
     6f8:	0f 93       	push	r16
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	e6 2e       	mov	r14, r22
     702:	f4 2e       	mov	r15, r20
	int i;
  
	if (x>0){
     704:	18 16       	cp	r1, r24
     706:	7c f4       	brge	.+30     	; 0x726 <mouse_move+0x32>
     708:	c0 e0       	ldi	r28, 0x00	; 0
     70a:	d0 e0       	ldi	r29, 0x00	; 0
    for(i=0;i<x;i++){  /* 300 ms disconnect */
     70c:	08 2f       	mov	r16, r24
     70e:	11 27       	eor	r17, r17
     710:	07 fd       	sbrc	r16, 7
     712:	10 95       	com	r17
     714:	04 c0       	rjmp	.+8      	; 0x71e <mouse_move+0x2a>
        mouse_report.x=speed;
     716:	f0 92 8f 00 	sts	0x008F, r15
        mouse_report_once();
     71a:	e6 df       	rcall	.-52     	; 0x6e8 <mouse_report_once>

void mouse_move(int8_t x,int8_t y,uint8_t speed ){
	int i;
  
	if (x>0){
    for(i=0;i<x;i++){  /* 300 ms disconnect */
     71c:	21 96       	adiw	r28, 0x01	; 1
     71e:	c0 17       	cp	r28, r16
     720:	d1 07       	cpc	r29, r17
     722:	cc f3       	brlt	.-14     	; 0x716 <mouse_move+0x22>
     724:	0d c0       	rjmp	.+26     	; 0x740 <mouse_move+0x4c>
        mouse_report_once();
    }
   }
   else
   {
      for(i=x;i<0;i++){  /* 300 ms disconnect */
     726:	c8 2f       	mov	r28, r24
     728:	dd 27       	eor	r29, r29
     72a:	c7 fd       	sbrc	r28, 7
     72c:	d0 95       	com	r29
        mouse_report.x=(-1*speed);
     72e:	14 2f       	mov	r17, r20
     730:	11 95       	neg	r17
     732:	04 c0       	rjmp	.+8      	; 0x73c <mouse_move+0x48>
     734:	10 93 8f 00 	sts	0x008F, r17
        mouse_report_once();
     738:	d7 df       	rcall	.-82     	; 0x6e8 <mouse_report_once>
        mouse_report_once();
    }
   }
   else
   {
      for(i=x;i<0;i++){  /* 300 ms disconnect */
     73a:	21 96       	adiw	r28, 0x01	; 1
     73c:	20 97       	sbiw	r28, 0x00	; 0
     73e:	d1 f7       	brne	.-12     	; 0x734 <mouse_move+0x40>
        mouse_report.x=(-1*speed);
        mouse_report_once();
      }
   }
   if (y>0){
     740:	1e 14       	cp	r1, r14
     742:	7c f4       	brge	.+30     	; 0x762 <mouse_move+0x6e>
     744:	c0 e0       	ldi	r28, 0x00	; 0
     746:	d0 e0       	ldi	r29, 0x00	; 0
    for(i=0;i<y;i++){  /* 300 ms disconnect */
     748:	0e 2d       	mov	r16, r14
     74a:	11 27       	eor	r17, r17
     74c:	07 fd       	sbrc	r16, 7
     74e:	10 95       	com	r17
     750:	04 c0       	rjmp	.+8      	; 0x75a <mouse_move+0x66>
        mouse_report.y=speed;
     752:	f0 92 90 00 	sts	0x0090, r15
        mouse_report_once();
     756:	c8 df       	rcall	.-112    	; 0x6e8 <mouse_report_once>
        mouse_report.x=(-1*speed);
        mouse_report_once();
      }
   }
   if (y>0){
    for(i=0;i<y;i++){  /* 300 ms disconnect */
     758:	21 96       	adiw	r28, 0x01	; 1
     75a:	c0 17       	cp	r28, r16
     75c:	d1 07       	cpc	r29, r17
     75e:	cc f3       	brlt	.-14     	; 0x752 <mouse_move+0x5e>
     760:	0d c0       	rjmp	.+26     	; 0x77c <mouse_move+0x88>
        mouse_report_once();
    }
   }
   else
   {
      for(i=y;i<0;i++){  /* 300 ms disconnect */
     762:	ce 2d       	mov	r28, r14
     764:	dd 27       	eor	r29, r29
     766:	c7 fd       	sbrc	r28, 7
     768:	d0 95       	com	r29
        mouse_report.y=(-1*speed);
     76a:	1f 2d       	mov	r17, r15
     76c:	11 95       	neg	r17
     76e:	04 c0       	rjmp	.+8      	; 0x778 <mouse_move+0x84>
     770:	10 93 90 00 	sts	0x0090, r17
        mouse_report_once();
     774:	b9 df       	rcall	.-142    	; 0x6e8 <mouse_report_once>
        mouse_report_once();
    }
   }
   else
   {
      for(i=y;i<0;i++){  /* 300 ms disconnect */
     776:	21 96       	adiw	r28, 0x01	; 1
     778:	20 97       	sbiw	r28, 0x00	; 0
     77a:	d1 f7       	brne	.-12     	; 0x770 <mouse_move+0x7c>
        mouse_report_once();
      }
   }
   
	
	mouse_report_reset();
     77c:	82 e0       	ldi	r24, 0x02	; 2
     77e:	80 93 8d 00 	sts	0x008D, r24
     782:	10 92 8e 00 	sts	0x008E, r1
     786:	10 92 8f 00 	sts	0x008F, r1
     78a:	10 92 90 00 	sts	0x0090, r1
     78e:	10 92 91 00 	sts	0x0091, r1
	mouse_report_once();
     792:	aa df       	rcall	.-172    	; 0x6e8 <mouse_report_once>
}
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	1f 91       	pop	r17
     79a:	0f 91       	pop	r16
     79c:	ff 90       	pop	r15
     79e:	ef 90       	pop	r14
     7a0:	08 95       	ret

000007a2 <send_report_once>:
//----------------------------------------------------//
//----------------------------------------------------//

void send_report_once()
{
  usbSendHidReport(&keyboard_report, sizeof(keyboard_report));
     7a2:	87 e8       	ldi	r24, 0x87	; 135
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	66 e0       	ldi	r22, 0x06	; 6
     7a8:	8e df       	rcall	.-228    	; 0x6c6 <usbSendHidReport>
}
     7aa:	08 95       	ret

000007ac <addDigit>:

static void addDigit(uchar key,uchar mod)
{
     7ac:	1f 93       	push	r17
	keyboard_report.report_id=1;
     7ae:	11 e0       	ldi	r17, 0x01	; 1
     7b0:	10 93 87 00 	sts	0x0087, r17
    keyboard_report.keycode[0] =  key;
     7b4:	80 93 8a 00 	sts	0x008A, r24
	keyboard_report.modifier = mod;
     7b8:	60 93 88 00 	sts	0x0088, r22
	send_report_once();
     7bc:	f2 df       	rcall	.-28     	; 0x7a2 <send_report_once>
	keyboard_report_reset(); // release keys
     7be:	10 93 87 00 	sts	0x0087, r17
     7c2:	10 92 88 00 	sts	0x0088, r1
     7c6:	10 92 89 00 	sts	0x0089, r1
     7ca:	10 92 8a 00 	sts	0x008A, r1
     7ce:	10 92 8b 00 	sts	0x008B, r1
     7d2:	10 92 8c 00 	sts	0x008C, r1
	send_report_once();
     7d6:	e5 df       	rcall	.-54     	; 0x7a2 <send_report_once>
}
     7d8:	1f 91       	pop	r17
     7da:	08 95       	ret

000007dc <ASCII_to_keycode>:
	send_report_once();	
}	

// translates ASCII to appropriate keyboard report, taking into consideration the status of caps lock
void ASCII_to_keycode(uint8_t ascii)
{
     7dc:	ef 92       	push	r14
     7de:	ff 92       	push	r15
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	98 2f       	mov	r25, r24
	keyboard_report.keycode[0] = 0x00;
	keyboard_report.modifier = 0x00;
     7ea:	10 92 88 00 	sts	0x0088, r1
	
	// see scancode.doc appendix C
	
	if (ascii >= 'A' && ascii <= 'Z')
     7ee:	81 54       	subi	r24, 0x41	; 65
     7f0:	8a 31       	cpi	r24, 0x1A	; 26
     7f2:	40 f4       	brcc	.+16     	; 0x804 <ASCII_to_keycode+0x28>
	{
		keyboard_report.keycode[0] = 4 + ascii - 'A'; // set letter
     7f4:	9d 53       	subi	r25, 0x3D	; 61
     7f6:	90 93 8a 00 	sts	0x008A, r25
		if (bit_is_set(LED_state, 1)) // if caps is on
     7fa:	80 91 85 00 	lds	r24, 0x0085
     7fe:	81 fd       	sbrc	r24, 1
     800:	24 c1       	rjmp	.+584    	; 0xa4a <ASCII_to_keycode+0x26e>
     802:	0b c0       	rjmp	.+22     	; 0x81a <ASCII_to_keycode+0x3e>
		else
		{
			keyboard_report.modifier = _BV(1); // hold shift // hold shift
		}
	}
	else if (ascii >= 'a' && ascii <= 'z')
     804:	89 2f       	mov	r24, r25
     806:	81 56       	subi	r24, 0x61	; 97
     808:	8a 31       	cpi	r24, 0x1A	; 26
     80a:	70 f4       	brcc	.+28     	; 0x828 <ASCII_to_keycode+0x4c>
	{
		keyboard_report.keycode[0] = 4 + ascii - 'a'; // set letter
     80c:	9d 55       	subi	r25, 0x5D	; 93
     80e:	90 93 8a 00 	sts	0x008A, r25
		if (bit_is_set(LED_state, 1)) // if caps is on
     812:	80 91 85 00 	lds	r24, 0x0085
     816:	81 ff       	sbrs	r24, 1
     818:	04 c0       	rjmp	.+8      	; 0x822 <ASCII_to_keycode+0x46>
		{
			keyboard_report.modifier = _BV(1); // hold shift // hold shift
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	80 93 88 00 	sts	0x0088, r24
     820:	14 c1       	rjmp	.+552    	; 0xa4a <ASCII_to_keycode+0x26e>
		}
		else
		{
			keyboard_report.modifier = 0x00; // no shift
     822:	10 92 88 00 	sts	0x0088, r1
     826:	11 c1       	rjmp	.+546    	; 0xa4a <ASCII_to_keycode+0x26e>
		}
	}
	else if (ascii >= '0' && ascii <= '9')
     828:	89 2f       	mov	r24, r25
     82a:	80 53       	subi	r24, 0x30	; 48
     82c:	8a 30       	cpi	r24, 0x0A	; 10
     82e:	48 f4       	brcc	.+18     	; 0x842 <ASCII_to_keycode+0x66>
	{
		keyboard_report.modifier = 0x00;
     830:	10 92 88 00 	sts	0x0088, r1
		if (ascii == '0')
     834:	90 33       	cpi	r25, 0x30	; 48
     836:	09 f4       	brne	.+2      	; 0x83a <ASCII_to_keycode+0x5e>
     838:	aa c0       	rjmp	.+340    	; 0x98e <ASCII_to_keycode+0x1b2>
		{
			keyboard_report.keycode[0] = 0x27;
		}
		else
		{
			keyboard_report.keycode[0] = 30 + ascii - '1'; 
     83a:	93 51       	subi	r25, 0x13	; 19
     83c:	90 93 8a 00 	sts	0x008A, r25
     840:	04 c1       	rjmp	.+520    	; 0xa4a <ASCII_to_keycode+0x26e>
		}
	}
	else
	{
		switch (ascii) // convert ascii to keycode according to documentation
     842:	9a 33       	cpi	r25, 0x3A	; 58
     844:	09 f4       	brne	.+2      	; 0x848 <ASCII_to_keycode+0x6c>
     846:	c3 c0       	rjmp	.+390    	; 0x9ce <ASCII_to_keycode+0x1f2>
     848:	9b 33       	cpi	r25, 0x3B	; 59
     84a:	d0 f5       	brcc	.+116    	; 0x8c0 <ASCII_to_keycode+0xe4>
     84c:	97 32       	cpi	r25, 0x27	; 39
     84e:	09 f4       	brne	.+2      	; 0x852 <ASCII_to_keycode+0x76>
     850:	c6 c0       	rjmp	.+396    	; 0x9de <ASCII_to_keycode+0x202>
     852:	98 32       	cpi	r25, 0x28	; 40
     854:	e0 f4       	brcc	.+56     	; 0x88e <ASCII_to_keycode+0xb2>
     856:	93 32       	cpi	r25, 0x23	; 35
     858:	09 f4       	brne	.+2      	; 0x85c <ASCII_to_keycode+0x80>
     85a:	73 c0       	rjmp	.+230    	; 0x942 <ASCII_to_keycode+0x166>
     85c:	94 32       	cpi	r25, 0x24	; 36
     85e:	80 f4       	brcc	.+32     	; 0x880 <ASCII_to_keycode+0xa4>
     860:	91 32       	cpi	r25, 0x21	; 33
     862:	09 f4       	brne	.+2      	; 0x866 <ASCII_to_keycode+0x8a>
     864:	62 c0       	rjmp	.+196    	; 0x92a <ASCII_to_keycode+0x14e>
     866:	92 32       	cpi	r25, 0x22	; 34
     868:	08 f0       	brcs	.+2      	; 0x86c <ASCII_to_keycode+0x90>
     86a:	b6 c0       	rjmp	.+364    	; 0x9d8 <ASCII_to_keycode+0x1fc>
     86c:	90 32       	cpi	r25, 0x20	; 32
     86e:	09 f4       	brne	.+2      	; 0x872 <ASCII_to_keycode+0x96>
     870:	c7 c0       	rjmp	.+398    	; 0xa00 <ASCII_to_keycode+0x224>
     872:	99 30       	cpi	r25, 0x09	; 9
     874:	09 f4       	brne	.+2      	; 0x878 <ASCII_to_keycode+0x9c>
     876:	c6 c0       	rjmp	.+396    	; 0xa04 <ASCII_to_keycode+0x228>
     878:	9a 30       	cpi	r25, 0x0A	; 10
     87a:	09 f0       	breq	.+2      	; 0x87e <ASCII_to_keycode+0xa2>
     87c:	c7 c0       	rjmp	.+398    	; 0xa0c <ASCII_to_keycode+0x230>
     87e:	c4 c0       	rjmp	.+392    	; 0xa08 <ASCII_to_keycode+0x22c>
     880:	95 32       	cpi	r25, 0x25	; 37
     882:	09 f4       	brne	.+2      	; 0x886 <ASCII_to_keycode+0xaa>
     884:	68 c0       	rjmp	.+208    	; 0x956 <ASCII_to_keycode+0x17a>
     886:	96 32       	cpi	r25, 0x26	; 38
     888:	08 f0       	brcs	.+2      	; 0x88c <ASCII_to_keycode+0xb0>
     88a:	6f c0       	rjmp	.+222    	; 0x96a <ASCII_to_keycode+0x18e>
     88c:	5f c0       	rjmp	.+190    	; 0x94c <ASCII_to_keycode+0x170>
     88e:	9b 32       	cpi	r25, 0x2B	; 43
     890:	09 f4       	brne	.+2      	; 0x894 <ASCII_to_keycode+0xb8>
     892:	89 c0       	rjmp	.+274    	; 0x9a6 <ASCII_to_keycode+0x1ca>
     894:	9c 32       	cpi	r25, 0x2C	; 44
     896:	38 f4       	brcc	.+14     	; 0x8a6 <ASCII_to_keycode+0xca>
     898:	99 32       	cpi	r25, 0x29	; 41
     89a:	09 f4       	brne	.+2      	; 0x89e <ASCII_to_keycode+0xc2>
     89c:	75 c0       	rjmp	.+234    	; 0x988 <ASCII_to_keycode+0x1ac>
     89e:	9a 32       	cpi	r25, 0x2A	; 42
     8a0:	08 f0       	brcs	.+2      	; 0x8a4 <ASCII_to_keycode+0xc8>
     8a2:	68 c0       	rjmp	.+208    	; 0x974 <ASCII_to_keycode+0x198>
     8a4:	6c c0       	rjmp	.+216    	; 0x97e <ASCII_to_keycode+0x1a2>
     8a6:	9d 32       	cpi	r25, 0x2D	; 45
     8a8:	09 f4       	brne	.+2      	; 0x8ac <ASCII_to_keycode+0xd0>
     8aa:	7b c0       	rjmp	.+246    	; 0x9a2 <ASCII_to_keycode+0x1c6>
     8ac:	9d 32       	cpi	r25, 0x2D	; 45
     8ae:	08 f4       	brcc	.+2      	; 0x8b2 <ASCII_to_keycode+0xd6>
     8b0:	9b c0       	rjmp	.+310    	; 0x9e8 <ASCII_to_keycode+0x20c>
     8b2:	9e 32       	cpi	r25, 0x2E	; 46
     8b4:	09 f4       	brne	.+2      	; 0x8b8 <ASCII_to_keycode+0xdc>
     8b6:	9d c0       	rjmp	.+314    	; 0x9f2 <ASCII_to_keycode+0x216>
     8b8:	9f 32       	cpi	r25, 0x2F	; 47
     8ba:	09 f0       	breq	.+2      	; 0x8be <ASCII_to_keycode+0xe2>
     8bc:	a7 c0       	rjmp	.+334    	; 0xa0c <ASCII_to_keycode+0x230>
     8be:	9e c0       	rjmp	.+316    	; 0x9fc <ASCII_to_keycode+0x220>
     8c0:	9c 35       	cpi	r25, 0x5C	; 92
     8c2:	09 f4       	brne	.+2      	; 0x8c6 <ASCII_to_keycode+0xea>
     8c4:	82 c0       	rjmp	.+260    	; 0x9ca <ASCII_to_keycode+0x1ee>
     8c6:	9d 35       	cpi	r25, 0x5D	; 93
     8c8:	a8 f4       	brcc	.+42     	; 0x8f4 <ASCII_to_keycode+0x118>
     8ca:	9e 33       	cpi	r25, 0x3E	; 62
     8cc:	09 f4       	brne	.+2      	; 0x8d0 <ASCII_to_keycode+0xf4>
     8ce:	8e c0       	rjmp	.+284    	; 0x9ec <ASCII_to_keycode+0x210>
     8d0:	9f 33       	cpi	r25, 0x3F	; 63
     8d2:	38 f4       	brcc	.+14     	; 0x8e2 <ASCII_to_keycode+0x106>
     8d4:	9c 33       	cpi	r25, 0x3C	; 60
     8d6:	09 f4       	brne	.+2      	; 0x8da <ASCII_to_keycode+0xfe>
     8d8:	84 c0       	rjmp	.+264    	; 0x9e2 <ASCII_to_keycode+0x206>
     8da:	9d 33       	cpi	r25, 0x3D	; 61
     8dc:	08 f0       	brcs	.+2      	; 0x8e0 <ASCII_to_keycode+0x104>
     8de:	66 c0       	rjmp	.+204    	; 0x9ac <ASCII_to_keycode+0x1d0>
     8e0:	79 c0       	rjmp	.+242    	; 0x9d4 <ASCII_to_keycode+0x1f8>
     8e2:	90 34       	cpi	r25, 0x40	; 64
     8e4:	49 f1       	breq	.+82     	; 0x938 <ASCII_to_keycode+0x15c>
     8e6:	90 34       	cpi	r25, 0x40	; 64
     8e8:	08 f4       	brcc	.+2      	; 0x8ec <ASCII_to_keycode+0x110>
     8ea:	85 c0       	rjmp	.+266    	; 0x9f6 <ASCII_to_keycode+0x21a>
     8ec:	9b 35       	cpi	r25, 0x5B	; 91
     8ee:	09 f0       	breq	.+2      	; 0x8f2 <ASCII_to_keycode+0x116>
     8f0:	8d c0       	rjmp	.+282    	; 0xa0c <ASCII_to_keycode+0x230>
     8f2:	61 c0       	rjmp	.+194    	; 0x9b6 <ASCII_to_keycode+0x1da>
     8f4:	90 36       	cpi	r25, 0x60	; 96
     8f6:	09 f4       	brne	.+2      	; 0x8fa <ASCII_to_keycode+0x11e>
     8f8:	4f c0       	rjmp	.+158    	; 0x998 <ASCII_to_keycode+0x1bc>
     8fa:	91 36       	cpi	r25, 0x61	; 97
     8fc:	30 f4       	brcc	.+12     	; 0x90a <ASCII_to_keycode+0x12e>
     8fe:	9e 35       	cpi	r25, 0x5E	; 94
     900:	79 f1       	breq	.+94     	; 0x960 <ASCII_to_keycode+0x184>
     902:	9f 35       	cpi	r25, 0x5F	; 95
     904:	08 f0       	brcs	.+2      	; 0x908 <ASCII_to_keycode+0x12c>
     906:	4a c0       	rjmp	.+148    	; 0x99c <ASCII_to_keycode+0x1c0>
     908:	5b c0       	rjmp	.+182    	; 0x9c0 <ASCII_to_keycode+0x1e4>
     90a:	9c 37       	cpi	r25, 0x7C	; 124
     90c:	09 f4       	brne	.+2      	; 0x910 <ASCII_to_keycode+0x134>
     90e:	5a c0       	rjmp	.+180    	; 0x9c4 <ASCII_to_keycode+0x1e8>
     910:	9d 37       	cpi	r25, 0x7D	; 125
     912:	20 f4       	brcc	.+8      	; 0x91c <ASCII_to_keycode+0x140>
     914:	9b 37       	cpi	r25, 0x7B	; 123
     916:	09 f0       	breq	.+2      	; 0x91a <ASCII_to_keycode+0x13e>
     918:	79 c0       	rjmp	.+242    	; 0xa0c <ASCII_to_keycode+0x230>
     91a:	4a c0       	rjmp	.+148    	; 0x9b0 <ASCII_to_keycode+0x1d4>
     91c:	9d 37       	cpi	r25, 0x7D	; 125
     91e:	09 f4       	brne	.+2      	; 0x922 <ASCII_to_keycode+0x146>
     920:	4c c0       	rjmp	.+152    	; 0x9ba <ASCII_to_keycode+0x1de>
     922:	9e 37       	cpi	r25, 0x7E	; 126
     924:	09 f0       	breq	.+2      	; 0x928 <ASCII_to_keycode+0x14c>
     926:	72 c0       	rjmp	.+228    	; 0xa0c <ASCII_to_keycode+0x230>
     928:	34 c0       	rjmp	.+104    	; 0x992 <ASCII_to_keycode+0x1b6>
		{
			case '!':
				keyboard_report.modifier = _BV(1); // hold shift
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	80 93 88 00 	sts	0x0088, r24
				keyboard_report.keycode[0] = 29 + 1;
     930:	8e e1       	ldi	r24, 0x1E	; 30
     932:	80 93 8a 00 	sts	0x008A, r24
     936:	89 c0       	rjmp	.+274    	; 0xa4a <ASCII_to_keycode+0x26e>
				break;
			case '@':
				keyboard_report.modifier = _BV(1); // hold shift
     938:	82 e0       	ldi	r24, 0x02	; 2
     93a:	80 93 88 00 	sts	0x0088, r24
				keyboard_report.keycode[0] = 29 + 2;
     93e:	8f e1       	ldi	r24, 0x1F	; 31
     940:	f8 cf       	rjmp	.-16     	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case '#':
				keyboard_report.modifier = _BV(1); // hold shift
     942:	82 e0       	ldi	r24, 0x02	; 2
     944:	80 93 88 00 	sts	0x0088, r24
				keyboard_report.keycode[0] = 29 + 3;
     948:	80 e2       	ldi	r24, 0x20	; 32
     94a:	f3 cf       	rjmp	.-26     	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case '$':
				keyboard_report.modifier = _BV(1); // hold shift
     94c:	82 e0       	ldi	r24, 0x02	; 2
     94e:	80 93 88 00 	sts	0x0088, r24
				keyboard_report.keycode[0] = 29 + 4;
     952:	81 e2       	ldi	r24, 0x21	; 33
     954:	ee cf       	rjmp	.-36     	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case '%':
				keyboard_report.modifier = _BV(1); // hold shift
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	80 93 88 00 	sts	0x0088, r24
				keyboard_report.keycode[0] = 29 + 5;
     95c:	82 e2       	ldi	r24, 0x22	; 34
     95e:	e9 cf       	rjmp	.-46     	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case '^':
				keyboard_report.modifier = _BV(1); // hold shift
     960:	82 e0       	ldi	r24, 0x02	; 2
     962:	80 93 88 00 	sts	0x0088, r24
				keyboard_report.keycode[0] = 29 + 6;
     966:	83 e2       	ldi	r24, 0x23	; 35
     968:	e4 cf       	rjmp	.-56     	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case '&':
				keyboard_report.modifier = _BV(1); // hold shift
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	80 93 88 00 	sts	0x0088, r24
				keyboard_report.keycode[0] = 29 + 7;
     970:	84 e2       	ldi	r24, 0x24	; 36
     972:	df cf       	rjmp	.-66     	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case '*':
				keyboard_report.modifier = _BV(1); // hold shift
     974:	82 e0       	ldi	r24, 0x02	; 2
     976:	80 93 88 00 	sts	0x0088, r24
				keyboard_report.keycode[0] = 29 + 8;
     97a:	85 e2       	ldi	r24, 0x25	; 37
     97c:	da cf       	rjmp	.-76     	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case '(':
				keyboard_report.modifier = _BV(1); // hold shift
     97e:	82 e0       	ldi	r24, 0x02	; 2
     980:	80 93 88 00 	sts	0x0088, r24
				keyboard_report.keycode[0] = 29 + 9;
     984:	86 e2       	ldi	r24, 0x26	; 38
     986:	d5 cf       	rjmp	.-86     	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case ')':
				keyboard_report.modifier = _BV(1); // hold shift
     988:	82 e0       	ldi	r24, 0x02	; 2
     98a:	80 93 88 00 	sts	0x0088, r24
				keyboard_report.keycode[0] = 0x27;
     98e:	87 e2       	ldi	r24, 0x27	; 39
     990:	d0 cf       	rjmp	.-96     	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case '~':
				keyboard_report.modifier = _BV(1); // hold shift
     992:	82 e0       	ldi	r24, 0x02	; 2
     994:	80 93 88 00 	sts	0x0088, r24
				// fall through
			case '`':
				keyboard_report.keycode[0] = 0x35;
     998:	85 e3       	ldi	r24, 0x35	; 53
     99a:	cb cf       	rjmp	.-106    	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case '_':
				keyboard_report.modifier = _BV(1); // hold shift
     99c:	82 e0       	ldi	r24, 0x02	; 2
     99e:	80 93 88 00 	sts	0x0088, r24
				// fall through
			case '-':
				keyboard_report.keycode[0] = 0x2D;
     9a2:	8d e2       	ldi	r24, 0x2D	; 45
     9a4:	c6 cf       	rjmp	.-116    	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case '+':
				keyboard_report.modifier = _BV(1); // hold shift
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	80 93 88 00 	sts	0x0088, r24
				// fall through
			case '=':
				keyboard_report.keycode[0] = 0x2E;
     9ac:	8e e2       	ldi	r24, 0x2E	; 46
     9ae:	c1 cf       	rjmp	.-126    	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case '{':
				keyboard_report.modifier = _BV(1); // hold shift
     9b0:	82 e0       	ldi	r24, 0x02	; 2
     9b2:	80 93 88 00 	sts	0x0088, r24
				// fall through
			case '[':
				keyboard_report.keycode[0] = 0x2F;
     9b6:	8f e2       	ldi	r24, 0x2F	; 47
     9b8:	bc cf       	rjmp	.-136    	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case '}':
				keyboard_report.modifier = _BV(1); // hold shift
     9ba:	82 e0       	ldi	r24, 0x02	; 2
     9bc:	80 93 88 00 	sts	0x0088, r24
				// fall through
			case ']':
				keyboard_report.keycode[0] = 0x30;
     9c0:	80 e3       	ldi	r24, 0x30	; 48
     9c2:	b7 cf       	rjmp	.-146    	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case '|':
				keyboard_report.modifier = _BV(1); // hold shift
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	80 93 88 00 	sts	0x0088, r24
				// fall through
			case '\\':
				keyboard_report.keycode[0] = 0x31;
     9ca:	81 e3       	ldi	r24, 0x31	; 49
     9cc:	b2 cf       	rjmp	.-156    	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case ':':
				keyboard_report.modifier = _BV(1); // hold shift
     9ce:	82 e0       	ldi	r24, 0x02	; 2
     9d0:	80 93 88 00 	sts	0x0088, r24
				// fall through
			case ';':
				keyboard_report.keycode[0] = 0x33;
     9d4:	83 e3       	ldi	r24, 0x33	; 51
     9d6:	ad cf       	rjmp	.-166    	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case '"':
				keyboard_report.modifier = _BV(1); // hold shift
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	80 93 88 00 	sts	0x0088, r24
				// fall through
			case '\'':
				keyboard_report.keycode[0] = 0x34;
     9de:	84 e3       	ldi	r24, 0x34	; 52
     9e0:	a8 cf       	rjmp	.-176    	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case '<':
				keyboard_report.modifier = _BV(1); // hold shift
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	80 93 88 00 	sts	0x0088, r24
				// fall through
			case ',':
				keyboard_report.keycode[0] = 0x36;
     9e8:	86 e3       	ldi	r24, 0x36	; 54
     9ea:	a3 cf       	rjmp	.-186    	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case '>':
				keyboard_report.modifier = _BV(1); // hold shift
     9ec:	82 e0       	ldi	r24, 0x02	; 2
     9ee:	80 93 88 00 	sts	0x0088, r24
				// fall through
			case '.':
				keyboard_report.keycode[0] = 0x37;
     9f2:	87 e3       	ldi	r24, 0x37	; 55
     9f4:	9e cf       	rjmp	.-196    	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case '?':
				keyboard_report.modifier = _BV(1); // hold shift
     9f6:	82 e0       	ldi	r24, 0x02	; 2
     9f8:	80 93 88 00 	sts	0x0088, r24
				// fall through
			case '/':
				keyboard_report.keycode[0] = 0x38;
     9fc:	88 e3       	ldi	r24, 0x38	; 56
     9fe:	99 cf       	rjmp	.-206    	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case ' ':
				keyboard_report.keycode[0] = 0x2C;
     a00:	8c e2       	ldi	r24, 0x2C	; 44
     a02:	97 cf       	rjmp	.-210    	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case '\t':
				keyboard_report.keycode[0] = 0x2B;
     a04:	8b e2       	ldi	r24, 0x2B	; 43
     a06:	95 cf       	rjmp	.-214    	; 0x932 <ASCII_to_keycode+0x156>
				break;
			case '\n':
				keyboard_report.keycode[0] = 0x28;
     a08:	88 e2       	ldi	r24, 0x28	; 40
     a0a:	93 cf       	rjmp	.-218    	; 0x932 <ASCII_to_keycode+0x156>
				break;
			default:
				alt_input(ascii);
     a0c:	09 2f       	mov	r16, r25
     a0e:	10 e0       	ldi	r17, 0x00	; 0
     	if(digit == 0){
     		keyboard_report.keycode[0] = 98;
			keyboard_report.modifier = (1<<6);
        }else{
			keyboard_report.keycode[0] = 88 + digit;
			keyboard_report.modifier = (1<<6);
     a10:	50 e4       	ldi	r21, 0x40	; 64
     a12:	f5 2e       	mov	r15, r21
	uchar   digit;
	do{
    	digit = code % 10;
    	code /= 10;
     	if(digit == 0){
     		keyboard_report.keycode[0] = 98;
     a14:	42 e6       	ldi	r20, 0x62	; 98
     a16:	e4 2e       	mov	r14, r20
}

static void alt_input(int code){
	uchar   digit;
	do{
    	digit = code % 10;
     a18:	c8 01       	movw	r24, r16
     a1a:	6a e0       	ldi	r22, 0x0A	; 10
     a1c:	70 e0       	ldi	r23, 0x00	; 0
     a1e:	f8 d5       	rcall	.+3056   	; 0x1610 <__divmodhi4>
     a20:	28 2f       	mov	r18, r24
    	code /= 10;
     a22:	c8 01       	movw	r24, r16
     a24:	6a e0       	ldi	r22, 0x0A	; 10
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	f3 d5       	rcall	.+3046   	; 0x1610 <__divmodhi4>
     a2a:	eb 01       	movw	r28, r22
     a2c:	8b 01       	movw	r16, r22
     	if(digit == 0){
     a2e:	22 23       	and	r18, r18
     a30:	19 f4       	brne	.+6      	; 0xa38 <ASCII_to_keycode+0x25c>
     		keyboard_report.keycode[0] = 98;
     a32:	e0 92 8a 00 	sts	0x008A, r14
     a36:	03 c0       	rjmp	.+6      	; 0xa3e <ASCII_to_keycode+0x262>
			keyboard_report.modifier = (1<<6);
        }else{
			keyboard_report.keycode[0] = 88 + digit;
     a38:	28 5a       	subi	r18, 0xA8	; 168
     a3a:	20 93 8a 00 	sts	0x008A, r18
			keyboard_report.modifier = (1<<6);
     a3e:	f0 92 88 00 	sts	0x0088, r15
        }
        send_report_once();
     a42:	af de       	rcall	.-674    	; 0x7a2 <send_report_once>
    }while(code != 0);
     a44:	cd 2b       	or	r28, r29
     a46:	41 f7       	brne	.-48     	; 0xa18 <ASCII_to_keycode+0x23c>
     a48:	01 c0       	rjmp	.+2      	; 0xa4c <ASCII_to_keycode+0x270>
			default:
				alt_input(ascii);
				return;
		}
	}
	send_report_once();
     a4a:	ab de       	rcall	.-682    	; 0x7a2 <send_report_once>
	keyboard_report_reset(); // release keys
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	80 93 87 00 	sts	0x0087, r24
     a52:	10 92 88 00 	sts	0x0088, r1
     a56:	10 92 89 00 	sts	0x0089, r1
     a5a:	10 92 8a 00 	sts	0x008A, r1
     a5e:	10 92 8b 00 	sts	0x008B, r1
     a62:	10 92 8c 00 	sts	0x008C, r1
	send_report_once();
     a66:	9d de       	rcall	.-710    	; 0x7a2 <send_report_once>
}
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	1f 91       	pop	r17
     a6e:	0f 91       	pop	r16
     a70:	ff 90       	pop	r15
     a72:	ef 90       	pop	r14
     a74:	08 95       	ret

00000a76 <main>:
{
	ASCII_to_keycode(ascii);
}
static FILE mystdout = FDEV_SETUP_STREAM(type_out_char, NULL, _FDEV_SETUP_WRITE); // setup writing stream
int main()
{
     a76:	cf 92       	push	r12
     a78:	df 92       	push	r13
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
int i;
	wdt_disable(); // no watchdog, just because I'm lazy
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	81 bd       	out	0x21, r24	; 33
     a8e:	11 bc       	out	0x21, r1	; 33
     a90:	0f be       	out	0x3f, r0	; 63
	stdout = &mystdout; // set default stream
     a92:	8d e6       	ldi	r24, 0x6D	; 109
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	90 93 d4 00 	sts	0x00D4, r25
     a9a:	80 93 d3 00 	sts	0x00D3, r24
	
	DDRB |= (1 << WHITE_LED) | (0 << 3)| (0 << 4);   //0 = input, 1 = output,WHITE_LED is output PB3 is input, PB4 is input 
     a9e:	b9 9a       	sbi	0x17, 1	; 23
	PORTB |= 1<<DDB3 | 1<<DDB4;
     aa0:	88 b3       	in	r24, 0x18	; 24
     aa2:	88 61       	ori	r24, 0x18	; 24
     aa4:	88 bb       	out	0x18, r24	; 24
	
		
	ADCSRA = UTIL_BIN8(1000, 0111); 					// enable ADC, not free running, interrupt disable, rate = 1/128
     aa6:	87 e8       	ldi	r24, 0x87	; 135
     aa8:	86 b9       	out	0x06, r24	; 6
	//+-----------------------------------------------+
	

	ADMUX = UTIL_BIN8(1000, 0011);						//Internal 1.1V Voltage Reference, Right adjust the result, Single Ended Input ADC3 (PB3) 
     aaa:	83 e8       	ldi	r24, 0x83	; 131
     aac:	87 b9       	out	0x07, r24	; 7
	//+-----------------------------------------------+

	TCCR1 = UTIL_BIN8(0000, 1011);           // select clock: 16.5M/1k -> overflow rate = 16.5M/256k = 62.94 Hz 
     aae:	8b e0       	ldi	r24, 0x0B	; 11
     ab0:	80 bf       	out	0x30, r24	; 48
	
	sbi(PORTB, WHITE_LED);
     ab2:	c1 9a       	sbi	0x18, 1	; 24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ab8:	23 eb       	ldi	r18, 0xB3	; 179
     aba:	31 ef       	ldi	r19, 0xF1	; 241
     abc:	f9 01       	movw	r30, r18
     abe:	31 97       	sbiw	r30, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <main+0x48>
    for(i=0;i<20;i++){  /* 300 ms disconnect */
     ac2:	01 96       	adiw	r24, 0x01	; 1
     ac4:	84 31       	cpi	r24, 0x14	; 20
     ac6:	91 05       	cpc	r25, r1
     ac8:	c9 f7       	brne	.-14     	; 0xabc <main+0x46>
        _delay_ms(15);
    }
	cbi(PORTB, WHITE_LED);
     aca:	c1 98       	cbi	0x18, 1	; 24
	
	sbi(PORTB, YELLOW_LED);
     acc:	c1 9a       	sbi	0x18, 1	; 24
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	23 eb       	ldi	r18, 0xB3	; 179
     ad4:	31 ef       	ldi	r19, 0xF1	; 241
     ad6:	f9 01       	movw	r30, r18
     ad8:	31 97       	sbiw	r30, 0x01	; 1
     ada:	f1 f7       	brne	.-4      	; 0xad8 <main+0x62>
    for(i=0;i<20;i++){  /* 300 ms disconnect */
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	84 31       	cpi	r24, 0x14	; 20
     ae0:	91 05       	cpc	r25, r1
     ae2:	c9 f7       	brne	.-14     	; 0xad6 <main+0x60>
        _delay_ms(15);
    }
	cbi(PORTB, YELLOW_LED);
     ae4:	c1 98       	cbi	0x18, 1	; 24
	
  usbDeviceDisconnect(); // enforce USB re-enumeration, do this while interrupts are disabled!
     ae6:	b8 9a       	sbi	0x17, 0	; 23
     ae8:	84 ec       	ldi	r24, 0xC4	; 196
     aea:	99 e0       	ldi	r25, 0x09	; 9
     aec:	2c e9       	ldi	r18, 0x9C	; 156
     aee:	31 e0       	ldi	r19, 0x01	; 1
     af0:	f9 01       	movw	r30, r18
     af2:	31 97       	sbiw	r30, 0x01	; 1
     af4:	f1 f7       	brne	.-4      	; 0xaf2 <main+0x7c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     af6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     af8:	d9 f7       	brne	.-10     	; 0xaf0 <main+0x7a>
	_delay_ms(250);
  usbDeviceConnect();
     afa:	b8 98       	cbi	0x17, 0	; 23
  
  bitbag_mode = 0; // disable bitbang
     afc:	10 92 95 00 	sts	0x0095, r1
  
  usbInit(); // start v-usb
     b00:	55 d1       	rcall	.+682    	; 0xdac <usbInit>
  sei(); // enable interrupts	
     b02:	78 94       	sei
	for(;;){
		// set the report IDs manually
		keyboard_report.report_id = 1;
     b04:	11 e0       	ldi	r17, 0x01	; 1
		mouse_report.report_id = 2;
     b06:	02 e0       	ldi	r16, 0x02	; 2
static void adc_timer_Poll(void)
{
static uchar timerCnt;

    if(TIFR & (1 << TOV1)){	//This flag is triggered at 60 hz.
        TIFR = (1 << TOV1); /* clear overflow */
     b08:	f4 e0       	ldi	r31, 0x04	; 4
     b0a:	cf 2e       	mov	r12, r31
					}
				}
			}
		}
		if (clock && nextclock == 0){			//toggle of the clockbit line wile the clock is pulled low.
			if (clockbit != strtbyte){
     b0c:	c1 e0       	ldi	r28, 0x01	; 1
     b0e:	d0 e0       	ldi	r29, 0x00	; 0
				{
					if(++bitnum <= 7){								//get ready for bit
						sbi(bitbag_data,bitnum);					//set the curent bit
						//printf("1");
					}else{
						bitnum = -1;
     b10:	dd 24       	eor	r13, r13
     b12:	da 94       	dec	r13
static void adcPoll()
{
	if (adcmodepool==1){
    	if(adcPending && !(ADCSRA & (1 << ADSC))){
			adcPending = 0;
			printf ("ADC = %d \n",ADC);
     b14:	e0 e6       	ldi	r30, 0x60	; 96
     b16:	ee 2e       	mov	r14, r30
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	fe 2e       	mov	r15, r30
  
  usbInit(); // start v-usb
  sei(); // enable interrupts	
	for(;;){
		// set the report IDs manually
		keyboard_report.report_id = 1;
     b1c:	10 93 87 00 	sts	0x0087, r17
		mouse_report.report_id = 2;
     b20:	00 93 8d 00 	sts	0x008D, r16
		if(blink_count == 1){
     b24:	80 91 7e 00 	lds	r24, 0x007E
     b28:	90 91 7f 00 	lds	r25, 0x007F
     b2c:	01 97       	sbiw	r24, 0x01	; 1
     b2e:	09 f0       	breq	.+2      	; 0xb32 <main+0xbc>
     b30:	8f c0       	rjmp	.+286    	; 0xc50 <main+0x1da>
			blink_count = 0;
     b32:	10 92 7f 00 	sts	0x007F, r1
     b36:	10 92 7e 00 	sts	0x007E, r1
//----------------------------------------------------//
int poolcout;
int bootrun = 1;
static void Poll(void)
{
	sbi(PORTB, WHITE_LED);
     b3a:	c1 9a       	sbi	0x18, 1	; 24
	
	if (bootrun){
     b3c:	80 91 6b 00 	lds	r24, 0x006B
     b40:	90 91 6c 00 	lds	r25, 0x006C
     b44:	20 91 99 00 	lds	r18, 0x0099
     b48:	30 91 9a 00 	lds	r19, 0x009A
     b4c:	89 2b       	or	r24, r25
     b4e:	09 f4       	brne	.+2      	; 0xb52 <main+0xdc>
     b50:	68 c0       	rjmp	.+208    	; 0xc22 <main+0x1ac>
		
		switch (poolcout++)
     b52:	2f 5f       	subi	r18, 0xFF	; 255
     b54:	3f 4f       	sbci	r19, 0xFF	; 255
     b56:	30 93 9a 00 	sts	0x009A, r19
     b5a:	20 93 99 00 	sts	0x0099, r18
     b5e:	21 50       	subi	r18, 0x01	; 1
     b60:	30 40       	sbci	r19, 0x00	; 0
     b62:	26 30       	cpi	r18, 0x06	; 6
     b64:	31 05       	cpc	r19, r1
     b66:	09 f4       	brne	.+2      	; 0xb6a <main+0xf4>
     b68:	43 c0       	rjmp	.+134    	; 0xbf0 <main+0x17a>
     b6a:	27 30       	cpi	r18, 0x07	; 7
     b6c:	31 05       	cpc	r19, r1
     b6e:	5c f4       	brge	.+22     	; 0xb86 <main+0x110>
     b70:	24 30       	cpi	r18, 0x04	; 4
     b72:	31 05       	cpc	r19, r1
     b74:	d1 f0       	breq	.+52     	; 0xbaa <main+0x134>
     b76:	25 30       	cpi	r18, 0x05	; 5
     b78:	31 05       	cpc	r19, r1
     b7a:	9c f5       	brge	.+102    	; 0xbe2 <main+0x16c>
     b7c:	22 30       	cpi	r18, 0x02	; 2
     b7e:	31 05       	cpc	r19, r1
     b80:	09 f0       	breq	.+2      	; 0xb84 <main+0x10e>
     b82:	65 c0       	rjmp	.+202    	; 0xc4e <main+0x1d8>
     b84:	0b c0       	rjmp	.+22     	; 0xb9c <main+0x126>
     b86:	28 30       	cpi	r18, 0x08	; 8
     b88:	31 05       	cpc	r19, r1
     b8a:	f1 f1       	breq	.+124    	; 0xc08 <main+0x192>
     b8c:	28 30       	cpi	r18, 0x08	; 8
     b8e:	31 05       	cpc	r19, r1
     b90:	bc f1       	brlt	.+110    	; 0xc00 <main+0x18a>
     b92:	29 30       	cpi	r18, 0x09	; 9
     b94:	31 05       	cpc	r19, r1
     b96:	09 f0       	breq	.+2      	; 0xb9a <main+0x124>
     b98:	5a c0       	rjmp	.+180    	; 0xc4e <main+0x1d8>
     b9a:	3d c0       	rjmp	.+122    	; 0xc16 <main+0x1a0>
	      {
	         case 2:
				addDigit(0,0);
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	05 de       	rcall	.-1014   	; 0x7ac <addDigit>
				//addDigit(21,MOD_GUI_RIGHT);
				addDigit(0,0);
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	02 de       	rcall	.-1020   	; 0x7ac <addDigit>
     ba8:	52 c0       	rjmp	.+164    	; 0xc4e <main+0x1d8>
				break;
			case 3:
				//puts_P(PSTR("notepad.exe"));
				break;
			case 4:
				puts_P(PSTR("+--------------------+"));
     baa:	8f eb       	ldi	r24, 0xBF	; 191
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	74 d2       	rcall	.+1256   	; 0x1098 <puts_P>
				puts_P(PSTR("| USB Testing Device |"));
     bb0:	88 ea       	ldi	r24, 0xA8	; 168
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	71 d2       	rcall	.+1250   	; 0x1098 <puts_P>
				puts_P(PSTR("|--------------------|"));
     bb6:	81 e9       	ldi	r24, 0x91	; 145
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	6e d2       	rcall	.+1244   	; 0x1098 <puts_P>
	      		puts_P(PSTR("|  (1) USB Keyboad   |"));
     bbc:	8a e7       	ldi	r24, 0x7A	; 122
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	6b d2       	rcall	.+1238   	; 0x1098 <puts_P>
	      		puts_P(PSTR("|--------------------|"));
     bc2:	83 e6       	ldi	r24, 0x63	; 99
     bc4:	91 e0       	ldi	r25, 0x01	; 1
     bc6:	68 d2       	rcall	.+1232   	; 0x1098 <puts_P>
	      		puts_P(PSTR("|  (2) USB Mouse     |"));
     bc8:	8c e4       	ldi	r24, 0x4C	; 76
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	65 d2       	rcall	.+1226   	; 0x1098 <puts_P>
	      		puts_P(PSTR("+--------------------+"));
     bce:	85 e3       	ldi	r24, 0x35	; 53
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	62 d2       	rcall	.+1220   	; 0x1098 <puts_P>
				puts_P(PSTR("| Now With a Brain!! |"));
     bd4:	8e e1       	ldi	r24, 0x1E	; 30
     bd6:	91 e0       	ldi	r25, 0x01	; 1
     bd8:	5f d2       	rcall	.+1214   	; 0x1098 <puts_P>
				puts_P(PSTR("+--------------------+"));
     bda:	87 e0       	ldi	r24, 0x07	; 7
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	5c d2       	rcall	.+1208   	; 0x1098 <puts_P>
     be0:	36 c0       	rjmp	.+108    	; 0xc4e <main+0x1d8>
				break;
			case 5:
				puts_P(PSTR("Mouse move x=50 y=0 speed 10"));
     be2:	8a ee       	ldi	r24, 0xEA	; 234
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	58 d2       	rcall	.+1200   	; 0x1098 <puts_P>
				mouse_move(50,0,10);
     be8:	82 e3       	ldi	r24, 0x32	; 50
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	4a e0       	ldi	r20, 0x0A	; 10
     bee:	06 c0       	rjmp	.+12     	; 0xbfc <main+0x186>
				break;
			case 6:
				puts_P(PSTR("Mouse move x=-50 y=20 speed 5"));
     bf0:	8c ec       	ldi	r24, 0xCC	; 204
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	51 d2       	rcall	.+1186   	; 0x1098 <puts_P>
				mouse_move(-50,20,5);
     bf6:	8e ec       	ldi	r24, 0xCE	; 206
     bf8:	64 e1       	ldi	r22, 0x14	; 20
     bfa:	45 e0       	ldi	r20, 0x05	; 5
     bfc:	7b dd       	rcall	.-1290   	; 0x6f4 <mouse_move>
     bfe:	27 c0       	rjmp	.+78     	; 0xc4e <main+0x1d8>
				break;
			case 7:
				//addDigit(76,20); //ctrl+alt+delt	
				puts_P(PSTR("ADC Meater Mode on"));
     c00:	89 eb       	ldi	r24, 0xB9	; 185
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	49 d2       	rcall	.+1170   	; 0x1098 <puts_P>
     c06:	1a c0       	rjmp	.+52     	; 0xc3c <main+0x1c6>
				adcmodepool=1;
				break;
			case 8:
				puts_P(PSTR("ADC Meater Mode off"));
     c08:	85 ea       	ldi	r24, 0xA5	; 165
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	45 d2       	rcall	.+1162   	; 0x1098 <puts_P>
				adcmodepool=0;
     c0e:	10 92 93 00 	sts	0x0093, r1
				ADCSRA = 0; //turn off ADC
     c12:	16 b8       	out	0x06, r1	; 6
     c14:	1c c0       	rjmp	.+56     	; 0xc4e <main+0x1d8>
				break;
			case 9:
				puts_P(PSTR("BitBang Mode On"));
     c16:	85 e9       	ldi	r24, 0x95	; 149
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	3e d2       	rcall	.+1148   	; 0x1098 <puts_P>
				bitbag_mode = enabled_con; //enable bitbang
     c1c:	10 93 95 00 	sts	0x0095, r17
     c20:	16 c0       	rjmp	.+44     	; 0xc4e <main+0x1d8>
				break;
	      }
	}
	else
	{
	      	switch (poolcout++)
     c22:	2f 5f       	subi	r18, 0xFF	; 255
     c24:	3f 4f       	sbci	r19, 0xFF	; 255
     c26:	30 93 9a 00 	sts	0x009A, r19
     c2a:	20 93 99 00 	sts	0x0099, r18
     c2e:	21 50       	subi	r18, 0x01	; 1
     c30:	30 40       	sbci	r19, 0x00	; 0
     c32:	21 f0       	breq	.+8      	; 0xc3c <main+0x1c6>
     c34:	21 30       	cpi	r18, 0x01	; 1
     c36:	31 05       	cpc	r19, r1
     c38:	51 f4       	brne	.+20     	; 0xc4e <main+0x1d8>
     c3a:	03 c0       	rjmp	.+6      	; 0xc42 <main+0x1cc>
	      	{
	      		
	      	case 0:
				//addDigit(76,20); //ctrl+alt+delt	
				adcmodepool =1;
     c3c:	10 93 93 00 	sts	0x0093, r17
     c40:	06 c0       	rjmp	.+12     	; 0xc4e <main+0x1d8>
				break;
			case 1:
				adcmodepool=0;
     c42:	10 92 93 00 	sts	0x0093, r1
				poolcout=0;
     c46:	10 92 9a 00 	sts	0x009A, r1
     c4a:	10 92 99 00 	sts	0x0099, r1
				break;
	      }
	}
	

	cbi(PORTB, WHITE_LED);
     c4e:	c1 98       	cbi	0x18, 1	; 24
		if(blink_count == 1){
			blink_count = 0;
			Poll();
		}
		
		inputPoll();
     c50:	08 dd       	rcall	.-1520   	; 0x662 <inputPoll>
		
		usbPoll();
     c52:	da d0       	rcall	.+436    	; 0xe08 <usbPoll>
		if (bitbag_mode == enabled_con){
     c54:	80 91 95 00 	lds	r24, 0x0095
     c58:	81 30       	cpi	r24, 0x01	; 1
     c5a:	09 f0       	breq	.+2      	; 0xc5e <main+0x1e8>
     c5c:	76 c0       	rjmp	.+236    	; 0xd4a <main+0x2d4>
	static int8_t bitnum;
	static uchar  nextclock;
	static uchar  strtbyte;
	static uchar inbyte;
	
	if(TIFR & (1 << TOV1)){	//This flag is triggered at 60 hz. 
     c5e:	08 b6       	in	r0, 0x38	; 56
     c60:	02 fe       	sbrs	r0, 2
     c62:	69 c0       	rjmp	.+210    	; 0xd36 <main+0x2c0>
		TIFR = (1 << TOV1); /* clear overflow */
     c64:	c8 be       	out	0x38, r12	; 56
		
		if(clock && nextclock == 1)									// if the clockbit is pulled down we clock in.
     c66:	b4 99       	sbic	0x16, 4	; 22
     c68:	45 c0       	rjmp	.+138    	; 0xcf4 <main+0x27e>
     c6a:	80 91 82 00 	lds	r24, 0x0082
     c6e:	81 30       	cpi	r24, 0x01	; 1
     c70:	09 f0       	breq	.+2      	; 0xc74 <main+0x1fe>
     c72:	40 c0       	rjmp	.+128    	; 0xcf4 <main+0x27e>
		{
			nextclock = 0;
     c74:	10 92 82 00 	sts	0x0082, r1
			strtbyte = clockbit;
     c78:	86 b3       	in	r24, 0x16	; 22
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	73 e0       	ldi	r23, 0x03	; 3
     c7e:	96 95       	lsr	r25
     c80:	87 95       	ror	r24
     c82:	7a 95       	dec	r23
     c84:	e1 f7       	brne	.-8      	; 0xc7e <main+0x208>
     c86:	8c 27       	eor	r24, r28
     c88:	9d 27       	eor	r25, r29
     c8a:	81 70       	andi	r24, 0x01	; 1
     c8c:	80 93 81 00 	sts	0x0081, r24
			if (inbyte == 1)
     c90:	80 91 80 00 	lds	r24, 0x0080
     c94:	81 30       	cpi	r24, 0x01	; 1
     c96:	71 f5       	brne	.+92     	; 0xcf4 <main+0x27e>
     c98:	80 91 83 00 	lds	r24, 0x0083
			{
				if(!(PINB & (1<<PINB3)))
     c9c:	b3 99       	sbic	0x16, 3	; 22
     c9e:	13 c0       	rjmp	.+38     	; 0xcc6 <main+0x250>
				{
					if(++bitnum <= 7)
     ca0:	8f 5f       	subi	r24, 0xFF	; 255
     ca2:	80 93 83 00 	sts	0x0083, r24
     ca6:	88 30       	cpi	r24, 0x08	; 8
     ca8:	fc f4       	brge	.+62     	; 0xce8 <main+0x272>
					{								//get ready for bit
						cbi(bitbag_data,bitnum);					//clear the curent bit
     caa:	9e 01       	movw	r18, r28
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <main+0x23c>
     cae:	22 0f       	add	r18, r18
     cb0:	33 1f       	adc	r19, r19
     cb2:	8a 95       	dec	r24
     cb4:	e2 f7       	brpl	.-8      	; 0xcae <main+0x238>
     cb6:	c9 01       	movw	r24, r18
     cb8:	80 95       	com	r24
     cba:	20 91 94 00 	lds	r18, 0x0094
     cbe:	28 23       	and	r18, r24
     cc0:	20 93 94 00 	sts	0x0094, r18
     cc4:	17 c0       	rjmp	.+46     	; 0xcf4 <main+0x27e>
						//printf("\n");
					}
				}
				else
				{
					if(++bitnum <= 7){								//get ready for bit
     cc6:	8f 5f       	subi	r24, 0xFF	; 255
     cc8:	80 93 83 00 	sts	0x0083, r24
     ccc:	88 30       	cpi	r24, 0x08	; 8
     cce:	64 f4       	brge	.+24     	; 0xce8 <main+0x272>
						sbi(bitbag_data,bitnum);					//set the curent bit
     cd0:	9e 01       	movw	r18, r28
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <main+0x262>
     cd4:	22 0f       	add	r18, r18
     cd6:	33 1f       	adc	r19, r19
     cd8:	8a 95       	dec	r24
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <main+0x25e>
     cdc:	80 91 94 00 	lds	r24, 0x0094
     ce0:	82 2b       	or	r24, r18
     ce2:	80 93 94 00 	sts	0x0094, r24
     ce6:	06 c0       	rjmp	.+12     	; 0xcf4 <main+0x27e>
						//printf("1");
					}else{
						bitnum = -1;
     ce8:	d0 92 83 00 	sts	0x0083, r13
						inbyte = 0;		
     cec:	10 92 80 00 	sts	0x0080, r1
						bitbag_mode = byte_flag;
     cf0:	00 93 95 00 	sts	0x0095, r16
						//printf("\n");
					}
				}
			}
		}
		if (clock && nextclock == 0){			//toggle of the clockbit line wile the clock is pulled low.
     cf4:	b4 99       	sbic	0x16, 4	; 22
     cf6:	17 c0       	rjmp	.+46     	; 0xd26 <main+0x2b0>
     cf8:	80 91 82 00 	lds	r24, 0x0082
     cfc:	88 23       	and	r24, r24
     cfe:	99 f4       	brne	.+38     	; 0xd26 <main+0x2b0>
			if (clockbit != strtbyte){
     d00:	86 b3       	in	r24, 0x16	; 22
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	63 e0       	ldi	r22, 0x03	; 3
     d06:	96 95       	lsr	r25
     d08:	87 95       	ror	r24
     d0a:	6a 95       	dec	r22
     d0c:	e1 f7       	brne	.-8      	; 0xd06 <main+0x290>
     d0e:	8c 27       	eor	r24, r28
     d10:	9d 27       	eor	r25, r29
     d12:	81 70       	andi	r24, 0x01	; 1
     d14:	90 70       	andi	r25, 0x00	; 0
     d16:	20 91 81 00 	lds	r18, 0x0081
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	82 17       	cp	r24, r18
     d1e:	93 07       	cpc	r25, r19
     d20:	11 f0       	breq	.+4      	; 0xd26 <main+0x2b0>
				inbyte =1;
     d22:	10 93 80 00 	sts	0x0080, r17
			}
		}
		
		if(!(clock) && nextclock == 0){
     d26:	b4 9b       	sbis	0x16, 4	; 22
     d28:	06 c0       	rjmp	.+12     	; 0xd36 <main+0x2c0>
     d2a:	80 91 82 00 	lds	r24, 0x0082
     d2e:	88 23       	and	r24, r24
     d30:	11 f4       	brne	.+4      	; 0xd36 <main+0x2c0>
			nextclock=1;			//get ready for next message
     d32:	10 93 82 00 	sts	0x0082, r17
		inputPoll();
		
		usbPoll();
		if (bitbag_mode == enabled_con){
			bitbagPoll();
			if (bitbag_mode == byte_flag){
     d36:	80 91 95 00 	lds	r24, 0x0095
     d3a:	82 30       	cpi	r24, 0x02	; 2
     d3c:	b1 f4       	brne	.+44     	; 0xd6a <main+0x2f4>
				ASCII_to_keycode(bitbag_data);
     d3e:	80 91 94 00 	lds	r24, 0x0094
     d42:	4c dd       	rcall	.-1384   	; 0x7dc <ASCII_to_keycode>
				bitbag_mode=enabled_con;
     d44:	10 93 95 00 	sts	0x0095, r17
     d48:	10 c0       	rjmp	.+32     	; 0xd6a <main+0x2f4>

static void adc_timer_Poll(void)
{
static uchar timerCnt;

    if(TIFR & (1 << TOV1)){	//This flag is triggered at 60 hz.
     d4a:	08 b6       	in	r0, 0x38	; 56
     d4c:	02 fe       	sbrs	r0, 2
     d4e:	0d c0       	rjmp	.+26     	; 0xd6a <main+0x2f4>
        TIFR = (1 << TOV1); /* clear overflow */
     d50:	c8 be       	out	0x38, r12	; 56
		if(++timerCnt >= 31){		 /* ~ 0.5 second interval */
     d52:	80 91 84 00 	lds	r24, 0x0084
     d56:	8f 5f       	subi	r24, 0xFF	; 255
     d58:	80 93 84 00 	sts	0x0084, r24
     d5c:	8f 31       	cpi	r24, 0x1F	; 31
     d5e:	28 f0       	brcs	.+10     	; 0xd6a <main+0x2f4>
            timerCnt = 0;
     d60:	10 92 84 00 	sts	0x0084, r1
			adcPending = 1;
     d64:	10 93 92 00 	sts	0x0092, r17
			ADCSRA |= (1 << ADSC);  /* start next conversion */
     d68:	36 9a       	sbi	0x06, 6	; 6
		else
		{
			adc_timer_Poll();	
		}
		
		usbPoll();
     d6a:	4e d0       	rcall	.+156    	; 0xe08 <usbPoll>
static uchar    adcPending;
static uint8_t    adcmodepool;

static void adcPoll()
{
	if (adcmodepool==1){
     d6c:	80 91 93 00 	lds	r24, 0x0093
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	09 f0       	breq	.+2      	; 0xd76 <main+0x300>
     d74:	d3 ce       	rjmp	.-602    	; 0xb1c <main+0xa6>
    	if(adcPending && !(ADCSRA & (1 << ADSC))){
     d76:	80 91 92 00 	lds	r24, 0x0092
     d7a:	88 23       	and	r24, r24
     d7c:	09 f4       	brne	.+2      	; 0xd80 <main+0x30a>
     d7e:	ce ce       	rjmp	.-612    	; 0xb1c <main+0xa6>
     d80:	36 99       	sbic	0x06, 6	; 6
     d82:	cc ce       	rjmp	.-616    	; 0xb1c <main+0xa6>
			adcPending = 0;
     d84:	10 92 92 00 	sts	0x0092, r1
			printf ("ADC = %d \n",ADC);
     d88:	84 b1       	in	r24, 0x04	; 4
     d8a:	95 b1       	in	r25, 0x05	; 5
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <main+0x318>
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <main+0x31a>
     d90:	ed b7       	in	r30, 0x3d	; 61
     d92:	fe b7       	in	r31, 0x3e	; 62
     d94:	f2 82       	std	Z+2, r15	; 0x02
     d96:	e1 82       	std	Z+1, r14	; 0x01
     d98:	94 83       	std	Z+4, r25	; 0x04
     d9a:	83 83       	std	Z+3, r24	; 0x03
     d9c:	6b d1       	rcall	.+726    	; 0x1074 <printf>
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	ba ce       	rjmp	.-652    	; 0xb1c <main+0xa6>

00000da8 <type_out_char>:
}

// stdio's stream will use this funct to type out characters in a string
void type_out_char(uint8_t ascii, FILE *stream)
{
	ASCII_to_keycode(ascii);
     da8:	19 dd       	rcall	.-1486   	; 0x7dc <ASCII_to_keycode>
}
     daa:	08 95       	ret

00000dac <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
     dac:	85 b7       	in	r24, 0x35	; 53
     dae:	82 60       	ori	r24, 0x02	; 2
     db0:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
     db2:	8b b7       	in	r24, 0x3b	; 59
     db4:	80 64       	ori	r24, 0x40	; 64
     db6:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     db8:	8b e4       	ldi	r24, 0x4B	; 75
     dba:	80 93 a7 00 	sts	0x00A7, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
     dbe:	8a e5       	ldi	r24, 0x5A	; 90
     dc0:	80 93 a6 00 	sts	0x00A6, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
     dc4:	08 95       	ret

00000dc6 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
     dc6:	1f 93       	push	r17
     dc8:	dc 01       	movw	r26, r24
     dca:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
     dcc:	80 91 a6 00 	lds	r24, 0x00A6
     dd0:	84 ff       	sbrs	r24, 4
     dd2:	07 c0       	rjmp	.+14     	; 0xde2 <usbSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
     dd4:	80 91 a7 00 	lds	r24, 0x00A7
     dd8:	98 e8       	ldi	r25, 0x88	; 136
     dda:	89 27       	eor	r24, r25
     ddc:	80 93 a7 00 	sts	0x00A7, r24
     de0:	03 c0       	rjmp	.+6      	; 0xde8 <usbSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
     de2:	8a e5       	ldi	r24, 0x5A	; 90
     de4:	80 93 a6 00 	sts	0x00A6, r24
     de8:	91 2f       	mov	r25, r17
     dea:	e8 ea       	ldi	r30, 0xA8	; 168
     dec:	f0 e0       	ldi	r31, 0x00	; 0
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
     dee:	8d 91       	ld	r24, X+
     df0:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
     df2:	91 50       	subi	r25, 0x01	; 1
     df4:	e1 f7       	brne	.-8      	; 0xdee <usbSetInterrupt+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
     df6:	88 ea       	ldi	r24, 0xA8	; 168
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	61 2f       	mov	r22, r17
     dfc:	5a da       	rcall	.-2892   	; 0x2b2 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
     dfe:	1c 5f       	subi	r17, 0xFC	; 252
     e00:	10 93 a6 00 	sts	0x00A6, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
     e04:	1f 91       	pop	r17
     e06:	08 95       	ret

00000e08 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
     e08:	1f 93       	push	r17
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
     e0e:	60 91 b7 00 	lds	r22, 0x00B7
     e12:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
     e14:	67 fd       	sbrc	r22, 7
     e16:	c2 c0       	rjmp	.+388    	; 0xf9c <usbPoll+0x194>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
     e18:	80 91 b4 00 	lds	r24, 0x00B4
     e1c:	cc e0       	ldi	r28, 0x0C	; 12
     e1e:	d0 e0       	ldi	r29, 0x00	; 0
     e20:	c8 1b       	sub	r28, r24
     e22:	d1 09       	sbc	r29, r1
     e24:	c5 54       	subi	r28, 0x45	; 69
     e26:	df 4f       	sbci	r29, 0xFF	; 255
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
     e28:	80 91 b3 00 	lds	r24, 0x00B3
     e2c:	8d 32       	cpi	r24, 0x2D	; 45
     e2e:	09 f0       	breq	.+2      	; 0xe32 <usbPoll+0x2a>
     e30:	a3 c0       	rjmp	.+326    	; 0xf78 <usbPoll+0x170>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
     e32:	68 30       	cpi	r22, 0x08	; 8
     e34:	09 f0       	breq	.+2      	; 0xe38 <usbPoll+0x30>
     e36:	b0 c0       	rjmp	.+352    	; 0xf98 <usbPoll+0x190>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
     e38:	83 ec       	ldi	r24, 0xC3	; 195
     e3a:	80 93 9b 00 	sts	0x009B, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
     e3e:	8a e5       	ldi	r24, 0x5A	; 90
     e40:	80 93 7c 00 	sts	0x007C, r24
        usbMsgFlags = 0;
     e44:	10 92 96 00 	sts	0x0096, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
     e48:	88 81       	ld	r24, Y
     e4a:	80 76       	andi	r24, 0x60	; 96
     e4c:	39 f0       	breq	.+14     	; 0xe5c <usbPoll+0x54>
            replyLen = usbFunctionSetup(data);
     e4e:	ce 01       	movw	r24, r28
     e50:	a5 db       	rcall	.-2230   	; 0x59c <usbFunctionSetup>
     e52:	28 2f       	mov	r18, r24
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
     e54:	8f 3f       	cpi	r24, 0xFF	; 255
     e56:	09 f4       	brne	.+2      	; 0xe5a <usbPoll+0x52>
     e58:	7e c0       	rjmp	.+252    	; 0xf56 <usbPoll+0x14e>
     e5a:	84 c0       	rjmp	.+264    	; 0xf64 <usbPoll+0x15c>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
     e5c:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
     e5e:	10 92 a4 00 	sts	0x00A4, r1
    SWITCH_START(rq->bRequest)
     e62:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
     e64:	88 23       	and	r24, r24
     e66:	21 f4       	brne	.+8      	; 0xe70 <usbPoll+0x68>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
     e68:	10 92 a5 00 	sts	0x00A5, r1
     e6c:	22 e0       	ldi	r18, 0x02	; 2
     e6e:	6c c0       	rjmp	.+216    	; 0xf48 <usbPoll+0x140>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
     e70:	85 30       	cpi	r24, 0x05	; 5
     e72:	19 f4       	brne	.+6      	; 0xe7a <usbPoll+0x72>
        usbNewDeviceAddr = value;
     e74:	90 93 b8 00 	sts	0x00B8, r25
     e78:	66 c0       	rjmp	.+204    	; 0xf46 <usbPoll+0x13e>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
     e7a:	86 30       	cpi	r24, 0x06	; 6
     e7c:	09 f0       	breq	.+2      	; 0xe80 <usbPoll+0x78>
     e7e:	4f c0       	rjmp	.+158    	; 0xf1e <usbPoll+0x116>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	41 f4       	brne	.+16     	; 0xe96 <usbPoll+0x8e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
     e86:	8c e1       	ldi	r24, 0x1C	; 28
     e88:	92 e0       	ldi	r25, 0x02	; 2
     e8a:	90 93 b6 00 	sts	0x00B6, r25
     e8e:	80 93 b5 00 	sts	0x00B5, r24
     e92:	22 e1       	ldi	r18, 0x12	; 18
     e94:	40 c0       	rjmp	.+128    	; 0xf16 <usbPoll+0x10e>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
     e96:	82 30       	cpi	r24, 0x02	; 2
     e98:	41 f4       	brne	.+16     	; 0xeaa <usbPoll+0xa2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
     e9a:	8e e2       	ldi	r24, 0x2E	; 46
     e9c:	92 e0       	ldi	r25, 0x02	; 2
     e9e:	90 93 b6 00 	sts	0x00B6, r25
     ea2:	80 93 b5 00 	sts	0x00B5, r24
     ea6:	22 e2       	ldi	r18, 0x22	; 34
     ea8:	36 c0       	rjmp	.+108    	; 0xf16 <usbPoll+0x10e>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
     eaa:	83 30       	cpi	r24, 0x03	; 3
     eac:	f9 f4       	brne	.+62     	; 0xeec <usbPoll+0xe4>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
     eb0:	88 23       	and	r24, r24
     eb2:	41 f4       	brne	.+16     	; 0xec4 <usbPoll+0xbc>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
     eb4:	86 ed       	ldi	r24, 0xD6	; 214
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	90 93 b6 00 	sts	0x00B6, r25
     ebc:	80 93 b5 00 	sts	0x00B5, r24
     ec0:	24 e0       	ldi	r18, 0x04	; 4
     ec2:	29 c0       	rjmp	.+82     	; 0xf16 <usbPoll+0x10e>
        SWITCH_CASE(1)
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	41 f4       	brne	.+16     	; 0xed8 <usbPoll+0xd0>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     ec8:	8a ed       	ldi	r24, 0xDA	; 218
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	90 93 b6 00 	sts	0x00B6, r25
     ed0:	80 93 b5 00 	sts	0x00B5, r24
     ed4:	2c e1       	ldi	r18, 0x1C	; 28
     ed6:	1f c0       	rjmp	.+62     	; 0xf16 <usbPoll+0x10e>
        SWITCH_CASE(2)
     ed8:	82 30       	cpi	r24, 0x02	; 2
     eda:	e1 f4       	brne	.+56     	; 0xf14 <usbPoll+0x10c>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
     edc:	86 ef       	ldi	r24, 0xF6	; 246
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	90 93 b6 00 	sts	0x00B6, r25
     ee4:	80 93 b5 00 	sts	0x00B5, r24
     ee8:	26 e2       	ldi	r18, 0x26	; 38
     eea:	15 c0       	rjmp	.+42     	; 0xf16 <usbPoll+0x10e>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
     eec:	81 32       	cpi	r24, 0x21	; 33
     eee:	41 f4       	brne	.+16     	; 0xf00 <usbPoll+0xf8>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
     ef0:	80 e4       	ldi	r24, 0x40	; 64
     ef2:	92 e0       	ldi	r25, 0x02	; 2
     ef4:	90 93 b6 00 	sts	0x00B6, r25
     ef8:	80 93 b5 00 	sts	0x00B5, r24
     efc:	29 e0       	ldi	r18, 0x09	; 9
     efe:	0b c0       	rjmp	.+22     	; 0xf16 <usbPoll+0x10e>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
     f00:	82 32       	cpi	r24, 0x22	; 34
     f02:	41 f4       	brne	.+16     	; 0xf14 <usbPoll+0x10c>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
     f04:	8e e1       	ldi	r24, 0x1E	; 30
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	90 93 b6 00 	sts	0x00B6, r25
     f0c:	80 93 b5 00 	sts	0x00B5, r24
     f10:	27 e7       	ldi	r18, 0x77	; 119
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <usbPoll+0x10e>
     f14:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
     f16:	80 e4       	ldi	r24, 0x40	; 64
     f18:	80 93 96 00 	sts	0x0096, r24
     f1c:	23 c0       	rjmp	.+70     	; 0xf64 <usbPoll+0x15c>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
     f1e:	88 30       	cpi	r24, 0x08	; 8
     f20:	21 f4       	brne	.+8      	; 0xf2a <usbPoll+0x122>
     f22:	21 e0       	ldi	r18, 0x01	; 1
     f24:	8a eb       	ldi	r24, 0xBA	; 186
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	11 c0       	rjmp	.+34     	; 0xf4c <usbPoll+0x144>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
     f2a:	89 30       	cpi	r24, 0x09	; 9
     f2c:	19 f4       	brne	.+6      	; 0xf34 <usbPoll+0x12c>
        usbConfiguration = value;
     f2e:	90 93 ba 00 	sts	0x00BA, r25
     f32:	09 c0       	rjmp	.+18     	; 0xf46 <usbPoll+0x13e>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
     f34:	8a 30       	cpi	r24, 0x0A	; 10
     f36:	11 f4       	brne	.+4      	; 0xf3c <usbPoll+0x134>
     f38:	21 e0       	ldi	r18, 0x01	; 1
     f3a:	06 c0       	rjmp	.+12     	; 0xf48 <usbPoll+0x140>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
     f3c:	8b 30       	cpi	r24, 0x0B	; 11
     f3e:	19 f4       	brne	.+6      	; 0xf46 <usbPoll+0x13e>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     f40:	8b e4       	ldi	r24, 0x4B	; 75
     f42:	80 93 a7 00 	sts	0x00A7, r24
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	84 ea       	ldi	r24, 0xA4	; 164
     f4a:	90 e0       	ldi	r25, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
     f4c:	90 93 b6 00 	sts	0x00B6, r25
     f50:	80 93 b5 00 	sts	0x00B5, r24
     f54:	07 c0       	rjmp	.+14     	; 0xf64 <usbPoll+0x15c>
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
     f56:	88 81       	ld	r24, Y
     f58:	87 fd       	sbrc	r24, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
     f5a:	2e 81       	ldd	r18, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
     f5c:	80 e8       	ldi	r24, 0x80	; 128
     f5e:	80 93 96 00 	sts	0x0096, r24
     f62:	06 c0       	rjmp	.+12     	; 0xf70 <usbPoll+0x168>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
     f64:	8f 81       	ldd	r24, Y+7	; 0x07
     f66:	88 23       	and	r24, r24
     f68:	19 f4       	brne	.+6      	; 0xf70 <usbPoll+0x168>
     f6a:	8e 81       	ldd	r24, Y+6	; 0x06
     f6c:	82 17       	cp	r24, r18
     f6e:	08 f0       	brcs	.+2      	; 0xf72 <usbPoll+0x16a>
     f70:	82 2f       	mov	r24, r18
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
     f72:	80 93 7d 00 	sts	0x007D, r24
     f76:	10 c0       	rjmp	.+32     	; 0xf98 <usbPoll+0x190>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     f78:	80 91 96 00 	lds	r24, 0x0096
     f7c:	87 ff       	sbrs	r24, 7
     f7e:	0c c0       	rjmp	.+24     	; 0xf98 <usbPoll+0x190>
            uchar rval = usbFunctionWrite(data, len);
     f80:	ce 01       	movw	r24, r28
     f82:	53 db       	rcall	.-2394   	; 0x62a <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
     f84:	8f 3f       	cpi	r24, 0xFF	; 255
     f86:	21 f4       	brne	.+8      	; 0xf90 <usbPoll+0x188>
                usbTxLen = USBPID_STALL;
     f88:	8e e1       	ldi	r24, 0x1E	; 30
     f8a:	80 93 7c 00 	sts	0x007C, r24
     f8e:	04 c0       	rjmp	.+8      	; 0xf98 <usbPoll+0x190>
            }else if(rval != 0){    /* This was the final package */
     f90:	88 23       	and	r24, r24
     f92:	11 f0       	breq	.+4      	; 0xf98 <usbPoll+0x190>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
     f94:	10 92 7d 00 	sts	0x007D, r1
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
     f98:	10 92 b7 00 	sts	0x00B7, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
     f9c:	80 91 7c 00 	lds	r24, 0x007C
     fa0:	84 ff       	sbrs	r24, 4
     fa2:	58 c0       	rjmp	.+176    	; 0x1054 <usbPoll+0x24c>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
     fa4:	80 91 7d 00 	lds	r24, 0x007D
     fa8:	8f 3f       	cpi	r24, 0xFF	; 255
     faa:	09 f4       	brne	.+2      	; 0xfae <usbPoll+0x1a6>
     fac:	53 c0       	rjmp	.+166    	; 0x1054 <usbPoll+0x24c>
     fae:	18 2f       	mov	r17, r24
     fb0:	89 30       	cpi	r24, 0x09	; 9
     fb2:	08 f0       	brcs	.+2      	; 0xfb6 <usbPoll+0x1ae>
     fb4:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
     fb6:	81 1b       	sub	r24, r17
     fb8:	80 93 7d 00 	sts	0x007D, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
     fbc:	80 91 9b 00 	lds	r24, 0x009B
     fc0:	98 e8       	ldi	r25, 0x88	; 136
     fc2:	89 27       	eor	r24, r25
     fc4:	80 93 9b 00 	sts	0x009B, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
     fc8:	11 23       	and	r17, r17
     fca:	91 f1       	breq	.+100    	; 0x1030 <usbPoll+0x228>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     fcc:	80 91 96 00 	lds	r24, 0x0096
     fd0:	87 ff       	sbrs	r24, 7
     fd2:	08 c0       	rjmp	.+16     	; 0xfe4 <usbPoll+0x1dc>
            len = usbFunctionRead(data, len);
     fd4:	8c e9       	ldi	r24, 0x9C	; 156
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	61 2f       	mov	r22, r17
     fda:	41 db       	rcall	.-2430   	; 0x65e <usbFunctionRead>
     fdc:	18 2f       	mov	r17, r24
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
     fde:	89 30       	cpi	r24, 0x09	; 9
     fe0:	98 f5       	brcc	.+102    	; 0x1048 <usbPoll+0x240>
     fe2:	26 c0       	rjmp	.+76     	; 0x1030 <usbPoll+0x228>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
     fe4:	20 91 b5 00 	lds	r18, 0x00B5
     fe8:	30 91 b6 00 	lds	r19, 0x00B6
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     fec:	86 ff       	sbrs	r24, 6
     fee:	0d c0       	rjmp	.+26     	; 0x100a <usbPoll+0x202>
     ff0:	ac e9       	ldi	r26, 0x9C	; 156
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
     ff8:	f9 01       	movw	r30, r18
     ffa:	e8 0f       	add	r30, r24
     ffc:	f9 1f       	adc	r31, r25
     ffe:	e4 91       	lpm	r30, Z+
                    *data++ = c;
    1000:	ed 93       	st	X+, r30
    1002:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
    1004:	18 17       	cp	r17, r24
    1006:	c1 f7       	brne	.-16     	; 0xff8 <usbPoll+0x1f0>
    1008:	08 c0       	rjmp	.+16     	; 0x101a <usbPoll+0x212>
    100a:	91 2f       	mov	r25, r17
    100c:	d9 01       	movw	r26, r18
    100e:	ec e9       	ldi	r30, 0x9C	; 156
    1010:	f0 e0       	ldi	r31, 0x00	; 0
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
    1012:	8d 91       	ld	r24, X+
    1014:	81 93       	st	Z+, r24
                }while(--i);
    1016:	91 50       	subi	r25, 0x01	; 1
    1018:	e1 f7       	brne	.-8      	; 0x1012 <usbPoll+0x20a>
    101a:	11 50       	subi	r17, 0x01	; 1
    101c:	81 2f       	mov	r24, r17
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	1f 5f       	subi	r17, 0xFF	; 255
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	82 0f       	add	r24, r18
    1026:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
    1028:	90 93 b6 00 	sts	0x00B6, r25
    102c:	80 93 b5 00 	sts	0x00B5, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
    1030:	8c e9       	ldi	r24, 0x9C	; 156
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	61 2f       	mov	r22, r17
    1036:	3d d9       	rcall	.-3462   	; 0x2b2 <usbCrc16Append>
        len += 4;           /* length including sync byte */
    1038:	61 2f       	mov	r22, r17
    103a:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
    103c:	6c 30       	cpi	r22, 0x0C	; 12
    103e:	41 f0       	breq	.+16     	; 0x1050 <usbPoll+0x248>
            usbMsgLen = USB_NO_MSG;
    1040:	8f ef       	ldi	r24, 0xFF	; 255
    1042:	80 93 7d 00 	sts	0x007D, r24
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <usbPoll+0x248>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    1048:	8f ef       	ldi	r24, 0xFF	; 255
    104a:	80 93 7d 00 	sts	0x007D, r24
    104e:	6e e1       	ldi	r22, 0x1E	; 30
    }
    usbTxLen = len;
    1050:	60 93 7c 00 	sts	0x007C, r22
    1054:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
    1056:	86 b3       	in	r24, 0x16	; 22
        if(usbLineStatus != 0)  /* SE0 has ended */
    1058:	85 70       	andi	r24, 0x05	; 5
    105a:	31 f4       	brne	.+12     	; 0x1068 <usbPoll+0x260>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
    105c:	91 50       	subi	r25, 0x01	; 1
    105e:	d9 f7       	brne	.-10     	; 0x1056 <usbPoll+0x24e>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
    1060:	10 92 b8 00 	sts	0x00B8, r1
    usbDeviceAddr = 0;
    1064:	10 92 b2 00 	sts	0x00B2, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	08 95       	ret

00001070 <exit>:
    1070:	f8 94       	cli
    1072:	2c c3       	rjmp	.+1624   	; 0x16cc <_exit>

00001074 <printf>:
    1074:	a0 e0       	ldi	r26, 0x00	; 0
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	ef e3       	ldi	r30, 0x3F	; 63
    107a:	f8 e0       	ldi	r31, 0x08	; 8
    107c:	ec c2       	rjmp	.+1496   	; 0x1656 <__prologue_saves__+0x20>
    107e:	fe 01       	movw	r30, r28
    1080:	35 96       	adiw	r30, 0x05	; 5
    1082:	61 91       	ld	r22, Z+
    1084:	71 91       	ld	r23, Z+
    1086:	80 91 d3 00 	lds	r24, 0x00D3
    108a:	90 91 d4 00 	lds	r25, 0x00D4
    108e:	af 01       	movw	r20, r30
    1090:	38 d0       	rcall	.+112    	; 0x1102 <vfprintf>
    1092:	20 96       	adiw	r28, 0x00	; 0
    1094:	e2 e0       	ldi	r30, 0x02	; 2
    1096:	fb c2       	rjmp	.+1526   	; 0x168e <__epilogue_restores__+0x20>

00001098 <puts_P>:
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	ec 01       	movw	r28, r24
    10a2:	e0 91 d3 00 	lds	r30, 0x00D3
    10a6:	f0 91 d4 00 	lds	r31, 0x00D4
    10aa:	83 81       	ldd	r24, Z+3	; 0x03
    10ac:	81 ff       	sbrs	r24, 1
    10ae:	21 c0       	rjmp	.+66     	; 0x10f2 <puts_P+0x5a>
    10b0:	00 e0       	ldi	r16, 0x00	; 0
    10b2:	10 e0       	ldi	r17, 0x00	; 0
    10b4:	0e c0       	rjmp	.+28     	; 0x10d2 <puts_P+0x3a>
    10b6:	e0 91 d3 00 	lds	r30, 0x00D3
    10ba:	f0 91 d4 00 	lds	r31, 0x00D4
    10be:	20 85       	ldd	r18, Z+8	; 0x08
    10c0:	31 85       	ldd	r19, Z+9	; 0x09
    10c2:	bf 01       	movw	r22, r30
    10c4:	f9 01       	movw	r30, r18
    10c6:	09 95       	icall
    10c8:	89 2b       	or	r24, r25
    10ca:	11 f0       	breq	.+4      	; 0x10d0 <puts_P+0x38>
    10cc:	0f ef       	ldi	r16, 0xFF	; 255
    10ce:	1f ef       	ldi	r17, 0xFF	; 255
    10d0:	21 96       	adiw	r28, 0x01	; 1
    10d2:	fe 01       	movw	r30, r28
    10d4:	84 91       	lpm	r24, Z+
    10d6:	88 23       	and	r24, r24
    10d8:	71 f7       	brne	.-36     	; 0x10b6 <puts_P+0x1e>
    10da:	e0 91 d3 00 	lds	r30, 0x00D3
    10de:	f0 91 d4 00 	lds	r31, 0x00D4
    10e2:	20 85       	ldd	r18, Z+8	; 0x08
    10e4:	31 85       	ldd	r19, Z+9	; 0x09
    10e6:	8a e0       	ldi	r24, 0x0A	; 10
    10e8:	bf 01       	movw	r22, r30
    10ea:	f9 01       	movw	r30, r18
    10ec:	09 95       	icall
    10ee:	89 2b       	or	r24, r25
    10f0:	11 f0       	breq	.+4      	; 0x10f6 <puts_P+0x5e>
    10f2:	0f ef       	ldi	r16, 0xFF	; 255
    10f4:	1f ef       	ldi	r17, 0xFF	; 255
    10f6:	c8 01       	movw	r24, r16
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	08 95       	ret

00001102 <vfprintf>:
    1102:	ab e0       	ldi	r26, 0x0B	; 11
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e6 e8       	ldi	r30, 0x86	; 134
    1108:	f8 e0       	ldi	r31, 0x08	; 8
    110a:	95 c2       	rjmp	.+1322   	; 0x1636 <__prologue_saves__>
    110c:	4c 01       	movw	r8, r24
    110e:	2b 01       	movw	r4, r22
    1110:	5a 01       	movw	r10, r20
    1112:	fc 01       	movw	r30, r24
    1114:	17 82       	std	Z+7, r1	; 0x07
    1116:	16 82       	std	Z+6, r1	; 0x06
    1118:	83 81       	ldd	r24, Z+3	; 0x03
    111a:	81 fd       	sbrc	r24, 1
    111c:	03 c0       	rjmp	.+6      	; 0x1124 <vfprintf+0x22>
    111e:	6f ef       	ldi	r22, 0xFF	; 255
    1120:	7f ef       	ldi	r23, 0xFF	; 255
    1122:	be c1       	rjmp	.+892    	; 0x14a0 <vfprintf+0x39e>
    1124:	1e 01       	movw	r2, r28
    1126:	08 94       	sec
    1128:	21 1c       	adc	r2, r1
    112a:	31 1c       	adc	r3, r1
    112c:	9f e3       	ldi	r25, 0x3F	; 63
    112e:	69 2e       	mov	r6, r25
    1130:	f4 01       	movw	r30, r8
    1132:	33 81       	ldd	r19, Z+3	; 0x03
    1134:	f2 01       	movw	r30, r4
    1136:	33 fd       	sbrc	r19, 3
    1138:	85 91       	lpm	r24, Z+
    113a:	33 ff       	sbrs	r19, 3
    113c:	81 91       	ld	r24, Z+
    113e:	2f 01       	movw	r4, r30
    1140:	88 23       	and	r24, r24
    1142:	09 f4       	brne	.+2      	; 0x1146 <vfprintf+0x44>
    1144:	aa c1       	rjmp	.+852    	; 0x149a <vfprintf+0x398>
    1146:	85 32       	cpi	r24, 0x25	; 37
    1148:	39 f4       	brne	.+14     	; 0x1158 <vfprintf+0x56>
    114a:	33 fd       	sbrc	r19, 3
    114c:	85 91       	lpm	r24, Z+
    114e:	33 ff       	sbrs	r19, 3
    1150:	81 91       	ld	r24, Z+
    1152:	2f 01       	movw	r4, r30
    1154:	85 32       	cpi	r24, 0x25	; 37
    1156:	21 f4       	brne	.+8      	; 0x1160 <vfprintf+0x5e>
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	b4 01       	movw	r22, r8
    115c:	bb d1       	rcall	.+886    	; 0x14d4 <fputc>
    115e:	e8 cf       	rjmp	.-48     	; 0x1130 <vfprintf+0x2e>
    1160:	98 2f       	mov	r25, r24
    1162:	ff 24       	eor	r15, r15
    1164:	ee 24       	eor	r14, r14
    1166:	77 24       	eor	r7, r7
    1168:	ff e1       	ldi	r31, 0x1F	; 31
    116a:	ff 15       	cp	r31, r15
    116c:	d0 f0       	brcs	.+52     	; 0x11a2 <vfprintf+0xa0>
    116e:	9b 32       	cpi	r25, 0x2B	; 43
    1170:	69 f0       	breq	.+26     	; 0x118c <vfprintf+0x8a>
    1172:	9c 32       	cpi	r25, 0x2C	; 44
    1174:	28 f4       	brcc	.+10     	; 0x1180 <vfprintf+0x7e>
    1176:	90 32       	cpi	r25, 0x20	; 32
    1178:	59 f0       	breq	.+22     	; 0x1190 <vfprintf+0x8e>
    117a:	93 32       	cpi	r25, 0x23	; 35
    117c:	91 f4       	brne	.+36     	; 0x11a2 <vfprintf+0xa0>
    117e:	0e c0       	rjmp	.+28     	; 0x119c <vfprintf+0x9a>
    1180:	9d 32       	cpi	r25, 0x2D	; 45
    1182:	49 f0       	breq	.+18     	; 0x1196 <vfprintf+0x94>
    1184:	90 33       	cpi	r25, 0x30	; 48
    1186:	69 f4       	brne	.+26     	; 0x11a2 <vfprintf+0xa0>
    1188:	41 e0       	ldi	r20, 0x01	; 1
    118a:	2a c0       	rjmp	.+84     	; 0x11e0 <vfprintf+0xde>
    118c:	52 e0       	ldi	r21, 0x02	; 2
    118e:	f5 2a       	or	r15, r21
    1190:	84 e0       	ldi	r24, 0x04	; 4
    1192:	f8 2a       	or	r15, r24
    1194:	2e c0       	rjmp	.+92     	; 0x11f2 <vfprintf+0xf0>
    1196:	98 e0       	ldi	r25, 0x08	; 8
    1198:	f9 2a       	or	r15, r25
    119a:	2b c0       	rjmp	.+86     	; 0x11f2 <vfprintf+0xf0>
    119c:	e0 e1       	ldi	r30, 0x10	; 16
    119e:	fe 2a       	or	r15, r30
    11a0:	28 c0       	rjmp	.+80     	; 0x11f2 <vfprintf+0xf0>
    11a2:	f7 fc       	sbrc	r15, 7
    11a4:	2f c0       	rjmp	.+94     	; 0x1204 <vfprintf+0x102>
    11a6:	29 2f       	mov	r18, r25
    11a8:	20 53       	subi	r18, 0x30	; 48
    11aa:	2a 30       	cpi	r18, 0x0A	; 10
    11ac:	a0 f4       	brcc	.+40     	; 0x11d6 <vfprintf+0xd4>
    11ae:	f6 fe       	sbrs	r15, 6
    11b0:	08 c0       	rjmp	.+16     	; 0x11c2 <vfprintf+0xc0>
    11b2:	87 2d       	mov	r24, r7
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	6a e0       	ldi	r22, 0x0A	; 10
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	18 d2       	rcall	.+1072   	; 0x15ec <__mulhi3>
    11bc:	78 2e       	mov	r7, r24
    11be:	72 0e       	add	r7, r18
    11c0:	18 c0       	rjmp	.+48     	; 0x11f2 <vfprintf+0xf0>
    11c2:	8e 2d       	mov	r24, r14
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	6a e0       	ldi	r22, 0x0A	; 10
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	10 d2       	rcall	.+1056   	; 0x15ec <__mulhi3>
    11cc:	e8 2e       	mov	r14, r24
    11ce:	e2 0e       	add	r14, r18
    11d0:	f0 e2       	ldi	r31, 0x20	; 32
    11d2:	ff 2a       	or	r15, r31
    11d4:	0e c0       	rjmp	.+28     	; 0x11f2 <vfprintf+0xf0>
    11d6:	9e 32       	cpi	r25, 0x2E	; 46
    11d8:	29 f4       	brne	.+10     	; 0x11e4 <vfprintf+0xe2>
    11da:	f6 fc       	sbrc	r15, 6
    11dc:	5e c1       	rjmp	.+700    	; 0x149a <vfprintf+0x398>
    11de:	40 e4       	ldi	r20, 0x40	; 64
    11e0:	f4 2a       	or	r15, r20
    11e2:	07 c0       	rjmp	.+14     	; 0x11f2 <vfprintf+0xf0>
    11e4:	9c 36       	cpi	r25, 0x6C	; 108
    11e6:	19 f4       	brne	.+6      	; 0x11ee <vfprintf+0xec>
    11e8:	50 e8       	ldi	r21, 0x80	; 128
    11ea:	f5 2a       	or	r15, r21
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <vfprintf+0xf0>
    11ee:	98 36       	cpi	r25, 0x68	; 104
    11f0:	49 f4       	brne	.+18     	; 0x1204 <vfprintf+0x102>
    11f2:	f2 01       	movw	r30, r4
    11f4:	33 fd       	sbrc	r19, 3
    11f6:	95 91       	lpm	r25, Z+
    11f8:	33 ff       	sbrs	r19, 3
    11fa:	91 91       	ld	r25, Z+
    11fc:	2f 01       	movw	r4, r30
    11fe:	99 23       	and	r25, r25
    1200:	09 f0       	breq	.+2      	; 0x1204 <vfprintf+0x102>
    1202:	b2 cf       	rjmp	.-156    	; 0x1168 <vfprintf+0x66>
    1204:	89 2f       	mov	r24, r25
    1206:	85 54       	subi	r24, 0x45	; 69
    1208:	83 30       	cpi	r24, 0x03	; 3
    120a:	18 f0       	brcs	.+6      	; 0x1212 <vfprintf+0x110>
    120c:	80 52       	subi	r24, 0x20	; 32
    120e:	83 30       	cpi	r24, 0x03	; 3
    1210:	30 f4       	brcc	.+12     	; 0x121e <vfprintf+0x11c>
    1212:	44 e0       	ldi	r20, 0x04	; 4
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	a4 0e       	add	r10, r20
    1218:	b5 1e       	adc	r11, r21
    121a:	69 82       	std	Y+1, r6	; 0x01
    121c:	0f c0       	rjmp	.+30     	; 0x123c <vfprintf+0x13a>
    121e:	93 36       	cpi	r25, 0x63	; 99
    1220:	31 f0       	breq	.+12     	; 0x122e <vfprintf+0x12c>
    1222:	93 37       	cpi	r25, 0x73	; 115
    1224:	79 f0       	breq	.+30     	; 0x1244 <vfprintf+0x142>
    1226:	93 35       	cpi	r25, 0x53	; 83
    1228:	09 f0       	breq	.+2      	; 0x122c <vfprintf+0x12a>
    122a:	52 c0       	rjmp	.+164    	; 0x12d0 <vfprintf+0x1ce>
    122c:	1f c0       	rjmp	.+62     	; 0x126c <vfprintf+0x16a>
    122e:	f5 01       	movw	r30, r10
    1230:	80 81       	ld	r24, Z
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	42 e0       	ldi	r20, 0x02	; 2
    1236:	50 e0       	ldi	r21, 0x00	; 0
    1238:	a4 0e       	add	r10, r20
    123a:	b5 1e       	adc	r11, r21
    123c:	61 01       	movw	r12, r2
    123e:	01 e0       	ldi	r16, 0x01	; 1
    1240:	10 e0       	ldi	r17, 0x00	; 0
    1242:	11 c0       	rjmp	.+34     	; 0x1266 <vfprintf+0x164>
    1244:	f5 01       	movw	r30, r10
    1246:	c0 80       	ld	r12, Z
    1248:	d1 80       	ldd	r13, Z+1	; 0x01
    124a:	f6 fc       	sbrc	r15, 6
    124c:	03 c0       	rjmp	.+6      	; 0x1254 <vfprintf+0x152>
    124e:	6f ef       	ldi	r22, 0xFF	; 255
    1250:	7f ef       	ldi	r23, 0xFF	; 255
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <vfprintf+0x156>
    1254:	67 2d       	mov	r22, r7
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	42 e0       	ldi	r20, 0x02	; 2
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	a4 0e       	add	r10, r20
    125e:	b5 1e       	adc	r11, r21
    1260:	c6 01       	movw	r24, r12
    1262:	2d d1       	rcall	.+602    	; 0x14be <strnlen>
    1264:	8c 01       	movw	r16, r24
    1266:	5f e7       	ldi	r21, 0x7F	; 127
    1268:	f5 22       	and	r15, r21
    126a:	13 c0       	rjmp	.+38     	; 0x1292 <vfprintf+0x190>
    126c:	f5 01       	movw	r30, r10
    126e:	c0 80       	ld	r12, Z
    1270:	d1 80       	ldd	r13, Z+1	; 0x01
    1272:	f6 fc       	sbrc	r15, 6
    1274:	03 c0       	rjmp	.+6      	; 0x127c <vfprintf+0x17a>
    1276:	6f ef       	ldi	r22, 0xFF	; 255
    1278:	7f ef       	ldi	r23, 0xFF	; 255
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <vfprintf+0x17e>
    127c:	67 2d       	mov	r22, r7
    127e:	70 e0       	ldi	r23, 0x00	; 0
    1280:	42 e0       	ldi	r20, 0x02	; 2
    1282:	50 e0       	ldi	r21, 0x00	; 0
    1284:	a4 0e       	add	r10, r20
    1286:	b5 1e       	adc	r11, r21
    1288:	c6 01       	movw	r24, r12
    128a:	0e d1       	rcall	.+540    	; 0x14a8 <strnlen_P>
    128c:	8c 01       	movw	r16, r24
    128e:	50 e8       	ldi	r21, 0x80	; 128
    1290:	f5 2a       	or	r15, r21
    1292:	f3 fe       	sbrs	r15, 3
    1294:	06 c0       	rjmp	.+12     	; 0x12a2 <vfprintf+0x1a0>
    1296:	18 c0       	rjmp	.+48     	; 0x12c8 <vfprintf+0x1c6>
    1298:	80 e2       	ldi	r24, 0x20	; 32
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	b4 01       	movw	r22, r8
    129e:	1a d1       	rcall	.+564    	; 0x14d4 <fputc>
    12a0:	ea 94       	dec	r14
    12a2:	8e 2d       	mov	r24, r14
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	08 17       	cp	r16, r24
    12a8:	19 07       	cpc	r17, r25
    12aa:	b0 f3       	brcs	.-20     	; 0x1298 <vfprintf+0x196>
    12ac:	0d c0       	rjmp	.+26     	; 0x12c8 <vfprintf+0x1c6>
    12ae:	f6 01       	movw	r30, r12
    12b0:	f7 fc       	sbrc	r15, 7
    12b2:	85 91       	lpm	r24, Z+
    12b4:	f7 fe       	sbrs	r15, 7
    12b6:	81 91       	ld	r24, Z+
    12b8:	6f 01       	movw	r12, r30
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	b4 01       	movw	r22, r8
    12be:	0a d1       	rcall	.+532    	; 0x14d4 <fputc>
    12c0:	e1 10       	cpse	r14, r1
    12c2:	ea 94       	dec	r14
    12c4:	01 50       	subi	r16, 0x01	; 1
    12c6:	10 40       	sbci	r17, 0x00	; 0
    12c8:	01 15       	cp	r16, r1
    12ca:	11 05       	cpc	r17, r1
    12cc:	81 f7       	brne	.-32     	; 0x12ae <vfprintf+0x1ac>
    12ce:	e2 c0       	rjmp	.+452    	; 0x1494 <vfprintf+0x392>
    12d0:	94 36       	cpi	r25, 0x64	; 100
    12d2:	11 f0       	breq	.+4      	; 0x12d8 <vfprintf+0x1d6>
    12d4:	99 36       	cpi	r25, 0x69	; 105
    12d6:	61 f5       	brne	.+88     	; 0x1330 <vfprintf+0x22e>
    12d8:	f7 fe       	sbrs	r15, 7
    12da:	08 c0       	rjmp	.+16     	; 0x12ec <vfprintf+0x1ea>
    12dc:	f5 01       	movw	r30, r10
    12de:	20 81       	ld	r18, Z
    12e0:	31 81       	ldd	r19, Z+1	; 0x01
    12e2:	42 81       	ldd	r20, Z+2	; 0x02
    12e4:	53 81       	ldd	r21, Z+3	; 0x03
    12e6:	84 e0       	ldi	r24, 0x04	; 4
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0a c0       	rjmp	.+20     	; 0x1300 <vfprintf+0x1fe>
    12ec:	f5 01       	movw	r30, r10
    12ee:	80 81       	ld	r24, Z
    12f0:	91 81       	ldd	r25, Z+1	; 0x01
    12f2:	9c 01       	movw	r18, r24
    12f4:	44 27       	eor	r20, r20
    12f6:	37 fd       	sbrc	r19, 7
    12f8:	40 95       	com	r20
    12fa:	54 2f       	mov	r21, r20
    12fc:	82 e0       	ldi	r24, 0x02	; 2
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	a8 0e       	add	r10, r24
    1302:	b9 1e       	adc	r11, r25
    1304:	9f e6       	ldi	r25, 0x6F	; 111
    1306:	f9 22       	and	r15, r25
    1308:	57 ff       	sbrs	r21, 7
    130a:	09 c0       	rjmp	.+18     	; 0x131e <vfprintf+0x21c>
    130c:	50 95       	com	r21
    130e:	40 95       	com	r20
    1310:	30 95       	com	r19
    1312:	21 95       	neg	r18
    1314:	3f 4f       	sbci	r19, 0xFF	; 255
    1316:	4f 4f       	sbci	r20, 0xFF	; 255
    1318:	5f 4f       	sbci	r21, 0xFF	; 255
    131a:	e0 e8       	ldi	r30, 0x80	; 128
    131c:	fe 2a       	or	r15, r30
    131e:	ca 01       	movw	r24, r20
    1320:	b9 01       	movw	r22, r18
    1322:	a1 01       	movw	r20, r2
    1324:	2a e0       	ldi	r18, 0x0A	; 10
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	01 d1       	rcall	.+514    	; 0x152c <__ultoa_invert>
    132a:	d8 2e       	mov	r13, r24
    132c:	d2 18       	sub	r13, r2
    132e:	3f c0       	rjmp	.+126    	; 0x13ae <vfprintf+0x2ac>
    1330:	95 37       	cpi	r25, 0x75	; 117
    1332:	29 f4       	brne	.+10     	; 0x133e <vfprintf+0x23c>
    1334:	1f 2d       	mov	r17, r15
    1336:	1f 7e       	andi	r17, 0xEF	; 239
    1338:	2a e0       	ldi	r18, 0x0A	; 10
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	1d c0       	rjmp	.+58     	; 0x1378 <vfprintf+0x276>
    133e:	1f 2d       	mov	r17, r15
    1340:	19 7f       	andi	r17, 0xF9	; 249
    1342:	9f 36       	cpi	r25, 0x6F	; 111
    1344:	61 f0       	breq	.+24     	; 0x135e <vfprintf+0x25c>
    1346:	90 37       	cpi	r25, 0x70	; 112
    1348:	20 f4       	brcc	.+8      	; 0x1352 <vfprintf+0x250>
    134a:	98 35       	cpi	r25, 0x58	; 88
    134c:	09 f0       	breq	.+2      	; 0x1350 <vfprintf+0x24e>
    134e:	a5 c0       	rjmp	.+330    	; 0x149a <vfprintf+0x398>
    1350:	0f c0       	rjmp	.+30     	; 0x1370 <vfprintf+0x26e>
    1352:	90 37       	cpi	r25, 0x70	; 112
    1354:	39 f0       	breq	.+14     	; 0x1364 <vfprintf+0x262>
    1356:	98 37       	cpi	r25, 0x78	; 120
    1358:	09 f0       	breq	.+2      	; 0x135c <vfprintf+0x25a>
    135a:	9f c0       	rjmp	.+318    	; 0x149a <vfprintf+0x398>
    135c:	04 c0       	rjmp	.+8      	; 0x1366 <vfprintf+0x264>
    135e:	28 e0       	ldi	r18, 0x08	; 8
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	0a c0       	rjmp	.+20     	; 0x1378 <vfprintf+0x276>
    1364:	10 61       	ori	r17, 0x10	; 16
    1366:	14 fd       	sbrc	r17, 4
    1368:	14 60       	ori	r17, 0x04	; 4
    136a:	20 e1       	ldi	r18, 0x10	; 16
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	04 c0       	rjmp	.+8      	; 0x1378 <vfprintf+0x276>
    1370:	14 fd       	sbrc	r17, 4
    1372:	16 60       	ori	r17, 0x06	; 6
    1374:	20 e1       	ldi	r18, 0x10	; 16
    1376:	32 e0       	ldi	r19, 0x02	; 2
    1378:	17 ff       	sbrs	r17, 7
    137a:	08 c0       	rjmp	.+16     	; 0x138c <vfprintf+0x28a>
    137c:	f5 01       	movw	r30, r10
    137e:	60 81       	ld	r22, Z
    1380:	71 81       	ldd	r23, Z+1	; 0x01
    1382:	82 81       	ldd	r24, Z+2	; 0x02
    1384:	93 81       	ldd	r25, Z+3	; 0x03
    1386:	44 e0       	ldi	r20, 0x04	; 4
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	08 c0       	rjmp	.+16     	; 0x139c <vfprintf+0x29a>
    138c:	f5 01       	movw	r30, r10
    138e:	80 81       	ld	r24, Z
    1390:	91 81       	ldd	r25, Z+1	; 0x01
    1392:	bc 01       	movw	r22, r24
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	42 e0       	ldi	r20, 0x02	; 2
    139a:	50 e0       	ldi	r21, 0x00	; 0
    139c:	a4 0e       	add	r10, r20
    139e:	b5 1e       	adc	r11, r21
    13a0:	a1 01       	movw	r20, r2
    13a2:	c4 d0       	rcall	.+392    	; 0x152c <__ultoa_invert>
    13a4:	d8 2e       	mov	r13, r24
    13a6:	d2 18       	sub	r13, r2
    13a8:	8f e7       	ldi	r24, 0x7F	; 127
    13aa:	f8 2e       	mov	r15, r24
    13ac:	f1 22       	and	r15, r17
    13ae:	f6 fe       	sbrs	r15, 6
    13b0:	0b c0       	rjmp	.+22     	; 0x13c8 <vfprintf+0x2c6>
    13b2:	5e ef       	ldi	r21, 0xFE	; 254
    13b4:	f5 22       	and	r15, r21
    13b6:	d7 14       	cp	r13, r7
    13b8:	38 f4       	brcc	.+14     	; 0x13c8 <vfprintf+0x2c6>
    13ba:	f4 fe       	sbrs	r15, 4
    13bc:	07 c0       	rjmp	.+14     	; 0x13cc <vfprintf+0x2ca>
    13be:	f2 fc       	sbrc	r15, 2
    13c0:	05 c0       	rjmp	.+10     	; 0x13cc <vfprintf+0x2ca>
    13c2:	8f ee       	ldi	r24, 0xEF	; 239
    13c4:	f8 22       	and	r15, r24
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <vfprintf+0x2ca>
    13c8:	1d 2d       	mov	r17, r13
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <vfprintf+0x2cc>
    13cc:	17 2d       	mov	r17, r7
    13ce:	f4 fe       	sbrs	r15, 4
    13d0:	0d c0       	rjmp	.+26     	; 0x13ec <vfprintf+0x2ea>
    13d2:	fe 01       	movw	r30, r28
    13d4:	ed 0d       	add	r30, r13
    13d6:	f1 1d       	adc	r31, r1
    13d8:	80 81       	ld	r24, Z
    13da:	80 33       	cpi	r24, 0x30	; 48
    13dc:	19 f4       	brne	.+6      	; 0x13e4 <vfprintf+0x2e2>
    13de:	99 ee       	ldi	r25, 0xE9	; 233
    13e0:	f9 22       	and	r15, r25
    13e2:	08 c0       	rjmp	.+16     	; 0x13f4 <vfprintf+0x2f2>
    13e4:	1f 5f       	subi	r17, 0xFF	; 255
    13e6:	f2 fe       	sbrs	r15, 2
    13e8:	05 c0       	rjmp	.+10     	; 0x13f4 <vfprintf+0x2f2>
    13ea:	03 c0       	rjmp	.+6      	; 0x13f2 <vfprintf+0x2f0>
    13ec:	8f 2d       	mov	r24, r15
    13ee:	86 78       	andi	r24, 0x86	; 134
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <vfprintf+0x2f2>
    13f2:	1f 5f       	subi	r17, 0xFF	; 255
    13f4:	0f 2d       	mov	r16, r15
    13f6:	f3 fc       	sbrc	r15, 3
    13f8:	13 c0       	rjmp	.+38     	; 0x1420 <vfprintf+0x31e>
    13fa:	f0 fe       	sbrs	r15, 0
    13fc:	0e c0       	rjmp	.+28     	; 0x141a <vfprintf+0x318>
    13fe:	1e 15       	cp	r17, r14
    1400:	10 f0       	brcs	.+4      	; 0x1406 <vfprintf+0x304>
    1402:	7d 2c       	mov	r7, r13
    1404:	0a c0       	rjmp	.+20     	; 0x141a <vfprintf+0x318>
    1406:	7d 2c       	mov	r7, r13
    1408:	7e 0c       	add	r7, r14
    140a:	71 1a       	sub	r7, r17
    140c:	1e 2d       	mov	r17, r14
    140e:	05 c0       	rjmp	.+10     	; 0x141a <vfprintf+0x318>
    1410:	80 e2       	ldi	r24, 0x20	; 32
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	b4 01       	movw	r22, r8
    1416:	5e d0       	rcall	.+188    	; 0x14d4 <fputc>
    1418:	1f 5f       	subi	r17, 0xFF	; 255
    141a:	1e 15       	cp	r17, r14
    141c:	c8 f3       	brcs	.-14     	; 0x1410 <vfprintf+0x30e>
    141e:	04 c0       	rjmp	.+8      	; 0x1428 <vfprintf+0x326>
    1420:	1e 15       	cp	r17, r14
    1422:	10 f4       	brcc	.+4      	; 0x1428 <vfprintf+0x326>
    1424:	e1 1a       	sub	r14, r17
    1426:	01 c0       	rjmp	.+2      	; 0x142a <vfprintf+0x328>
    1428:	ee 24       	eor	r14, r14
    142a:	04 ff       	sbrs	r16, 4
    142c:	0e c0       	rjmp	.+28     	; 0x144a <vfprintf+0x348>
    142e:	80 e3       	ldi	r24, 0x30	; 48
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	b4 01       	movw	r22, r8
    1434:	4f d0       	rcall	.+158    	; 0x14d4 <fputc>
    1436:	02 ff       	sbrs	r16, 2
    1438:	1b c0       	rjmp	.+54     	; 0x1470 <vfprintf+0x36e>
    143a:	01 fd       	sbrc	r16, 1
    143c:	03 c0       	rjmp	.+6      	; 0x1444 <vfprintf+0x342>
    143e:	88 e7       	ldi	r24, 0x78	; 120
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	0e c0       	rjmp	.+28     	; 0x1460 <vfprintf+0x35e>
    1444:	88 e5       	ldi	r24, 0x58	; 88
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0b c0       	rjmp	.+22     	; 0x1460 <vfprintf+0x35e>
    144a:	80 2f       	mov	r24, r16
    144c:	86 78       	andi	r24, 0x86	; 134
    144e:	81 f0       	breq	.+32     	; 0x1470 <vfprintf+0x36e>
    1450:	01 ff       	sbrs	r16, 1
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <vfprintf+0x356>
    1454:	8b e2       	ldi	r24, 0x2B	; 43
    1456:	01 c0       	rjmp	.+2      	; 0x145a <vfprintf+0x358>
    1458:	80 e2       	ldi	r24, 0x20	; 32
    145a:	f7 fc       	sbrc	r15, 7
    145c:	8d e2       	ldi	r24, 0x2D	; 45
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	b4 01       	movw	r22, r8
    1462:	38 d0       	rcall	.+112    	; 0x14d4 <fputc>
    1464:	05 c0       	rjmp	.+10     	; 0x1470 <vfprintf+0x36e>
    1466:	80 e3       	ldi	r24, 0x30	; 48
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	b4 01       	movw	r22, r8
    146c:	33 d0       	rcall	.+102    	; 0x14d4 <fputc>
    146e:	7a 94       	dec	r7
    1470:	d7 14       	cp	r13, r7
    1472:	c8 f3       	brcs	.-14     	; 0x1466 <vfprintf+0x364>
    1474:	da 94       	dec	r13
    1476:	f1 01       	movw	r30, r2
    1478:	ed 0d       	add	r30, r13
    147a:	f1 1d       	adc	r31, r1
    147c:	80 81       	ld	r24, Z
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	b4 01       	movw	r22, r8
    1482:	28 d0       	rcall	.+80     	; 0x14d4 <fputc>
    1484:	dd 20       	and	r13, r13
    1486:	b1 f7       	brne	.-20     	; 0x1474 <vfprintf+0x372>
    1488:	05 c0       	rjmp	.+10     	; 0x1494 <vfprintf+0x392>
    148a:	80 e2       	ldi	r24, 0x20	; 32
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	b4 01       	movw	r22, r8
    1490:	21 d0       	rcall	.+66     	; 0x14d4 <fputc>
    1492:	ea 94       	dec	r14
    1494:	ee 20       	and	r14, r14
    1496:	c9 f7       	brne	.-14     	; 0x148a <vfprintf+0x388>
    1498:	4b ce       	rjmp	.-874    	; 0x1130 <vfprintf+0x2e>
    149a:	f4 01       	movw	r30, r8
    149c:	66 81       	ldd	r22, Z+6	; 0x06
    149e:	77 81       	ldd	r23, Z+7	; 0x07
    14a0:	cb 01       	movw	r24, r22
    14a2:	2b 96       	adiw	r28, 0x0b	; 11
    14a4:	e2 e1       	ldi	r30, 0x12	; 18
    14a6:	e3 c0       	rjmp	.+454    	; 0x166e <__epilogue_restores__>

000014a8 <strnlen_P>:
    14a8:	fc 01       	movw	r30, r24
    14aa:	05 90       	lpm	r0, Z+
    14ac:	61 50       	subi	r22, 0x01	; 1
    14ae:	70 40       	sbci	r23, 0x00	; 0
    14b0:	01 10       	cpse	r0, r1
    14b2:	d8 f7       	brcc	.-10     	; 0x14aa <strnlen_P+0x2>
    14b4:	80 95       	com	r24
    14b6:	90 95       	com	r25
    14b8:	8e 0f       	add	r24, r30
    14ba:	9f 1f       	adc	r25, r31
    14bc:	08 95       	ret

000014be <strnlen>:
    14be:	fc 01       	movw	r30, r24
    14c0:	61 50       	subi	r22, 0x01	; 1
    14c2:	70 40       	sbci	r23, 0x00	; 0
    14c4:	01 90       	ld	r0, Z+
    14c6:	01 10       	cpse	r0, r1
    14c8:	d8 f7       	brcc	.-10     	; 0x14c0 <strnlen+0x2>
    14ca:	80 95       	com	r24
    14cc:	90 95       	com	r25
    14ce:	8e 0f       	add	r24, r30
    14d0:	9f 1f       	adc	r25, r31
    14d2:	08 95       	ret

000014d4 <fputc>:
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	8c 01       	movw	r16, r24
    14de:	eb 01       	movw	r28, r22
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	81 ff       	sbrs	r24, 1
    14e4:	1b c0       	rjmp	.+54     	; 0x151c <fputc+0x48>
    14e6:	82 ff       	sbrs	r24, 2
    14e8:	0d c0       	rjmp	.+26     	; 0x1504 <fputc+0x30>
    14ea:	2e 81       	ldd	r18, Y+6	; 0x06
    14ec:	3f 81       	ldd	r19, Y+7	; 0x07
    14ee:	8c 81       	ldd	r24, Y+4	; 0x04
    14f0:	9d 81       	ldd	r25, Y+5	; 0x05
    14f2:	28 17       	cp	r18, r24
    14f4:	39 07       	cpc	r19, r25
    14f6:	64 f4       	brge	.+24     	; 0x1510 <fputc+0x3c>
    14f8:	e8 81       	ld	r30, Y
    14fa:	f9 81       	ldd	r31, Y+1	; 0x01
    14fc:	01 93       	st	Z+, r16
    14fe:	f9 83       	std	Y+1, r31	; 0x01
    1500:	e8 83       	st	Y, r30
    1502:	06 c0       	rjmp	.+12     	; 0x1510 <fputc+0x3c>
    1504:	e8 85       	ldd	r30, Y+8	; 0x08
    1506:	f9 85       	ldd	r31, Y+9	; 0x09
    1508:	80 2f       	mov	r24, r16
    150a:	09 95       	icall
    150c:	89 2b       	or	r24, r25
    150e:	31 f4       	brne	.+12     	; 0x151c <fputc+0x48>
    1510:	8e 81       	ldd	r24, Y+6	; 0x06
    1512:	9f 81       	ldd	r25, Y+7	; 0x07
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	9f 83       	std	Y+7, r25	; 0x07
    1518:	8e 83       	std	Y+6, r24	; 0x06
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <fputc+0x4c>
    151c:	0f ef       	ldi	r16, 0xFF	; 255
    151e:	1f ef       	ldi	r17, 0xFF	; 255
    1520:	c8 01       	movw	r24, r16
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	08 95       	ret

0000152c <__ultoa_invert>:
    152c:	fa 01       	movw	r30, r20
    152e:	aa 27       	eor	r26, r26
    1530:	28 30       	cpi	r18, 0x08	; 8
    1532:	61 f1       	breq	.+88     	; 0x158c <__ultoa_invert+0x60>
    1534:	20 31       	cpi	r18, 0x10	; 16
    1536:	91 f1       	breq	.+100    	; 0x159c <__ultoa_invert+0x70>
    1538:	e8 94       	clt
    153a:	6f 93       	push	r22
    153c:	6e 7f       	andi	r22, 0xFE	; 254
    153e:	6e 5f       	subi	r22, 0xFE	; 254
    1540:	7f 4f       	sbci	r23, 0xFF	; 255
    1542:	8f 4f       	sbci	r24, 0xFF	; 255
    1544:	9f 4f       	sbci	r25, 0xFF	; 255
    1546:	af 4f       	sbci	r26, 0xFF	; 255
    1548:	b1 e0       	ldi	r27, 0x01	; 1
    154a:	40 d0       	rcall	.+128    	; 0x15cc <__ultoa_invert+0xa0>
    154c:	b4 e0       	ldi	r27, 0x04	; 4
    154e:	3e d0       	rcall	.+124    	; 0x15cc <__ultoa_invert+0xa0>
    1550:	67 0f       	add	r22, r23
    1552:	78 1f       	adc	r23, r24
    1554:	89 1f       	adc	r24, r25
    1556:	9a 1f       	adc	r25, r26
    1558:	a1 1d       	adc	r26, r1
    155a:	68 0f       	add	r22, r24
    155c:	79 1f       	adc	r23, r25
    155e:	8a 1f       	adc	r24, r26
    1560:	91 1d       	adc	r25, r1
    1562:	a1 1d       	adc	r26, r1
    1564:	6a 0f       	add	r22, r26
    1566:	71 1d       	adc	r23, r1
    1568:	81 1d       	adc	r24, r1
    156a:	91 1d       	adc	r25, r1
    156c:	a1 1d       	adc	r26, r1
    156e:	22 d0       	rcall	.+68     	; 0x15b4 <__ultoa_invert+0x88>
    1570:	09 f4       	brne	.+2      	; 0x1574 <__ultoa_invert+0x48>
    1572:	68 94       	set
    1574:	3f 91       	pop	r19
    1576:	06 2e       	mov	r0, r22
    1578:	00 0c       	add	r0, r0
    157a:	30 19       	sub	r19, r0
    157c:	00 0c       	add	r0, r0
    157e:	00 0c       	add	r0, r0
    1580:	30 19       	sub	r19, r0
    1582:	30 5d       	subi	r19, 0xD0	; 208
    1584:	31 93       	st	Z+, r19
    1586:	ce f6       	brtc	.-78     	; 0x153a <__ultoa_invert+0xe>
    1588:	cf 01       	movw	r24, r30
    158a:	08 95       	ret
    158c:	46 2f       	mov	r20, r22
    158e:	47 70       	andi	r20, 0x07	; 7
    1590:	40 5d       	subi	r20, 0xD0	; 208
    1592:	41 93       	st	Z+, r20
    1594:	b3 e0       	ldi	r27, 0x03	; 3
    1596:	0f d0       	rcall	.+30     	; 0x15b6 <__ultoa_invert+0x8a>
    1598:	c9 f7       	brne	.-14     	; 0x158c <__ultoa_invert+0x60>
    159a:	f6 cf       	rjmp	.-20     	; 0x1588 <__ultoa_invert+0x5c>
    159c:	46 2f       	mov	r20, r22
    159e:	4f 70       	andi	r20, 0x0F	; 15
    15a0:	40 5d       	subi	r20, 0xD0	; 208
    15a2:	4a 33       	cpi	r20, 0x3A	; 58
    15a4:	18 f0       	brcs	.+6      	; 0x15ac <__ultoa_invert+0x80>
    15a6:	49 5d       	subi	r20, 0xD9	; 217
    15a8:	31 fd       	sbrc	r19, 1
    15aa:	40 52       	subi	r20, 0x20	; 32
    15ac:	41 93       	st	Z+, r20
    15ae:	02 d0       	rcall	.+4      	; 0x15b4 <__ultoa_invert+0x88>
    15b0:	a9 f7       	brne	.-22     	; 0x159c <__ultoa_invert+0x70>
    15b2:	ea cf       	rjmp	.-44     	; 0x1588 <__ultoa_invert+0x5c>
    15b4:	b4 e0       	ldi	r27, 0x04	; 4
    15b6:	a6 95       	lsr	r26
    15b8:	97 95       	ror	r25
    15ba:	87 95       	ror	r24
    15bc:	77 95       	ror	r23
    15be:	67 95       	ror	r22
    15c0:	ba 95       	dec	r27
    15c2:	c9 f7       	brne	.-14     	; 0x15b6 <__ultoa_invert+0x8a>
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	61 05       	cpc	r22, r1
    15c8:	71 05       	cpc	r23, r1
    15ca:	08 95       	ret
    15cc:	9b 01       	movw	r18, r22
    15ce:	ac 01       	movw	r20, r24
    15d0:	0a 2e       	mov	r0, r26
    15d2:	06 94       	lsr	r0
    15d4:	57 95       	ror	r21
    15d6:	47 95       	ror	r20
    15d8:	37 95       	ror	r19
    15da:	27 95       	ror	r18
    15dc:	ba 95       	dec	r27
    15de:	c9 f7       	brne	.-14     	; 0x15d2 <__ultoa_invert+0xa6>
    15e0:	62 0f       	add	r22, r18
    15e2:	73 1f       	adc	r23, r19
    15e4:	84 1f       	adc	r24, r20
    15e6:	95 1f       	adc	r25, r21
    15e8:	a0 1d       	adc	r26, r0
    15ea:	08 95       	ret

000015ec <__mulhi3>:
    15ec:	55 27       	eor	r21, r21
    15ee:	00 24       	eor	r0, r0

000015f0 <__mulhi3_loop>:
    15f0:	80 ff       	sbrs	r24, 0
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <__mulhi3_skip1>
    15f4:	06 0e       	add	r0, r22
    15f6:	57 1f       	adc	r21, r23

000015f8 <__mulhi3_skip1>:
    15f8:	66 0f       	add	r22, r22
    15fa:	77 1f       	adc	r23, r23
    15fc:	61 15       	cp	r22, r1
    15fe:	71 05       	cpc	r23, r1
    1600:	21 f0       	breq	.+8      	; 0x160a <__mulhi3_exit>
    1602:	96 95       	lsr	r25
    1604:	87 95       	ror	r24
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	99 f7       	brne	.-26     	; 0x15f0 <__mulhi3_loop>

0000160a <__mulhi3_exit>:
    160a:	95 2f       	mov	r25, r21
    160c:	80 2d       	mov	r24, r0
    160e:	08 95       	ret

00001610 <__divmodhi4>:
    1610:	97 fb       	bst	r25, 7
    1612:	09 2e       	mov	r0, r25
    1614:	07 26       	eor	r0, r23
    1616:	0a d0       	rcall	.+20     	; 0x162c <__divmodhi4_neg1>
    1618:	77 fd       	sbrc	r23, 7
    161a:	04 d0       	rcall	.+8      	; 0x1624 <__divmodhi4_neg2>
    161c:	43 d0       	rcall	.+134    	; 0x16a4 <__udivmodhi4>
    161e:	06 d0       	rcall	.+12     	; 0x162c <__divmodhi4_neg1>
    1620:	00 20       	and	r0, r0
    1622:	1a f4       	brpl	.+6      	; 0x162a <__divmodhi4_exit>

00001624 <__divmodhi4_neg2>:
    1624:	70 95       	com	r23
    1626:	61 95       	neg	r22
    1628:	7f 4f       	sbci	r23, 0xFF	; 255

0000162a <__divmodhi4_exit>:
    162a:	08 95       	ret

0000162c <__divmodhi4_neg1>:
    162c:	f6 f7       	brtc	.-4      	; 0x162a <__divmodhi4_exit>
    162e:	90 95       	com	r25
    1630:	81 95       	neg	r24
    1632:	9f 4f       	sbci	r25, 0xFF	; 255
    1634:	08 95       	ret

00001636 <__prologue_saves__>:
    1636:	2f 92       	push	r2
    1638:	3f 92       	push	r3
    163a:	4f 92       	push	r4
    163c:	5f 92       	push	r5
    163e:	6f 92       	push	r6
    1640:	7f 92       	push	r7
    1642:	8f 92       	push	r8
    1644:	9f 92       	push	r9
    1646:	af 92       	push	r10
    1648:	bf 92       	push	r11
    164a:	cf 92       	push	r12
    164c:	df 92       	push	r13
    164e:	ef 92       	push	r14
    1650:	ff 92       	push	r15
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	ca 1b       	sub	r28, r26
    1660:	db 0b       	sbc	r29, r27
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	09 94       	ijmp

0000166e <__epilogue_restores__>:
    166e:	2a 88       	ldd	r2, Y+18	; 0x12
    1670:	39 88       	ldd	r3, Y+17	; 0x11
    1672:	48 88       	ldd	r4, Y+16	; 0x10
    1674:	5f 84       	ldd	r5, Y+15	; 0x0f
    1676:	6e 84       	ldd	r6, Y+14	; 0x0e
    1678:	7d 84       	ldd	r7, Y+13	; 0x0d
    167a:	8c 84       	ldd	r8, Y+12	; 0x0c
    167c:	9b 84       	ldd	r9, Y+11	; 0x0b
    167e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1680:	b9 84       	ldd	r11, Y+9	; 0x09
    1682:	c8 84       	ldd	r12, Y+8	; 0x08
    1684:	df 80       	ldd	r13, Y+7	; 0x07
    1686:	ee 80       	ldd	r14, Y+6	; 0x06
    1688:	fd 80       	ldd	r15, Y+5	; 0x05
    168a:	0c 81       	ldd	r16, Y+4	; 0x04
    168c:	1b 81       	ldd	r17, Y+3	; 0x03
    168e:	aa 81       	ldd	r26, Y+2	; 0x02
    1690:	b9 81       	ldd	r27, Y+1	; 0x01
    1692:	ce 0f       	add	r28, r30
    1694:	d1 1d       	adc	r29, r1
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	ed 01       	movw	r28, r26
    16a2:	08 95       	ret

000016a4 <__udivmodhi4>:
    16a4:	aa 1b       	sub	r26, r26
    16a6:	bb 1b       	sub	r27, r27
    16a8:	51 e1       	ldi	r21, 0x11	; 17
    16aa:	07 c0       	rjmp	.+14     	; 0x16ba <__udivmodhi4_ep>

000016ac <__udivmodhi4_loop>:
    16ac:	aa 1f       	adc	r26, r26
    16ae:	bb 1f       	adc	r27, r27
    16b0:	a6 17       	cp	r26, r22
    16b2:	b7 07       	cpc	r27, r23
    16b4:	10 f0       	brcs	.+4      	; 0x16ba <__udivmodhi4_ep>
    16b6:	a6 1b       	sub	r26, r22
    16b8:	b7 0b       	sbc	r27, r23

000016ba <__udivmodhi4_ep>:
    16ba:	88 1f       	adc	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	5a 95       	dec	r21
    16c0:	a9 f7       	brne	.-22     	; 0x16ac <__udivmodhi4_loop>
    16c2:	80 95       	com	r24
    16c4:	90 95       	com	r25
    16c6:	bc 01       	movw	r22, r24
    16c8:	cd 01       	movw	r24, r26
    16ca:	08 95       	ret

000016cc <_exit>:
    16cc:	f8 94       	cli

000016ce <__stop_program>:
    16ce:	ff cf       	rjmp	.-2      	; 0x16ce <__stop_program>
